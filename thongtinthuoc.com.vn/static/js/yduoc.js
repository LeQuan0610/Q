// Generated by CoffeeScript 1.10.0
var JOB_draw, LectureAudio, addSearchFilter, addSearchFilterSelection, adjustCurrentSlide, adjustSlidesPosition, animateScrollTo, approveDraft, cacheClient, cacheProfile, cacheXToken, cancelUploadAvatar, cando_permission, capitalize, changePassword, changeSearchCat, changeSort, checkMultiplePrescriptions, checkProgressStep, check_permission, check_reaction, clearProfile, clearXToken, closeEditor, closeTopSearch, cookie_addPresItem, cookie_checkSaved, cookie_check_interaction, cookie_clearSaved, cookie_delPresItem, cookie_getSavedPrescription, cookie_savePres, cookie_showSaved, copyAttributeToTag, createBietDuocTile, createDraftListItem, createHoatChatTile, createNewsListItem, createResultItem, createReviewerListItem, createSimpleItem, csrfSafeMethod, currentDate, currentTime, dock, doneBatchBietDuoc, doneGenThumbnail, downloadReport, exportDataURL, extractFilter, files, formatDateTime, genLectureThumbs, genPDFThumb, genProgressBar, getCache, getCookie, getParameterByName, getSubTitle, global_count, global_idle, global_tictoc, gotoEntity, gotoResultSection, goto_reaction, handDraft, handDraft_, handleLoadBarCode, handleOpenAvatarFile, htmlToPlaintext, initAjaxUpload, initAudioControl, initBarcode, initLectureSlider, initProgressBar, initQuagga, initVideo, isNonAuthenticated, loadDrafts, loadLecture, loadLocalFile, loadMainEntity, loadMainEntityRelated, loadPage, loadProfile, loadReviewers, loadXToken, logout, matchAccent, menu, navDrugPresc, navigateSlides, normalizeString, onAdvancedSearch, onAuthenticated, onAuthenticating, onInlineSearch, onNonAuthenticated, onSaveAvatar, onSearch, onSearchFormChange, onSearchInputChange, onSearchNavigate, onSearch_, onToggleSaltDeriv, onUpdatePatientInfo, onZoom, on_going_prescription, openCategoryChoice, openEditor, openNews, openNewsCategoryChoice, openReactionDetail, openReviewerDialog, openSearchFilterSelector, openTopSearch, paginate, parseAdvancedSearchResult, parseCheckingResult, parseDate, parseDrafts, parseNewsList, parsePersonalData, parseRational, parseReactionResult, parseSearchData, parseSearchResult, parseSimpleRelated, parseTTT, parseTopReaction, parseUniiRelated, pdfDoc, pdfReady, pdfTimelapse, playLectureAudio, processCitation, processFacetData, processRelation, process_cached, quagga_inited, rational2str, redecode, refreshAdvancedSearch, refreshBenh, register, rejectDraft, relateEntity, removeCache, removeDraft, renderFieldToTag, renderPDFPage, renderPDFPage_, reprocess, saveDraft, saveEditor, saveProfile, saveReview, saved_advanced_search_timeout, saved_search_event, search_form_ajax, search_results, second2minute, selectTab, sex_name, showKickedOutMessage, showPrescription, simpleRefresh, slides_onNextPage, slides_onPrevPage, softlogout, startDecode, startQuagga, stopDecode, stopQuagga, syncAudioProgress, template_allergy, template_bietduoc_list, template_bietduoc_tile, template_drug_interaction, template_duoclieu_tile, template_duplication, template_hoatchat_tile, template_interim_drug_list, template_interim_drug_tile, template_mangthai, template_patient_info, template_thuocla, template_tuongtacthuoc, toggleHoverDock, trigger_change, ttmt_qua_nhau_thai, ttmt_ynghia, ttt_add_hc, ttt_add_reactor, ttt_create_element, ttt_data, ttt_del_hc, ttt_hc_info, ttt_khoi_phat, ttt_nghiem_trong, ttt_tai_lieu, ttt_y_nghia, unicode2ascii, updateAddressbar, updateDiseaseList, updateEntity, updateNewsCat, updateReviewRequest, uploadEntity, uploadFile, use_local_storage, validateDate, validateEmail, viewDraft,
    indexOf = [].indexOf || function(item) {
        for (var i = 0, l = this.length; i < l; i++) {
            if (i in this && this[i] === item) return i;
        }
        return -1;
    },
    bind = function(fn, me) {
        return function() {
            return fn.apply(me, arguments);
        };
    };

register = function(form) {
    var c, data, i, is_capital, is_numeric, is_special, j, message, ref1, special_chars;
    data = {};
    message = $(form).find('.error-message');
    message.empty().removeClass('error');
    $(form).find('.input-group, input, select').removeClass('error');
    $(form).find('input, select').each(function() {
        if ($(this).attr('type') === 'checkbox') {
            data[$(this).attr('name')] = $(this).is(":checked");
            return;
        }
        return data[$(this).attr('name')] = $.trim($(this).val());
    });
    if (!((data.username != null) && data.username.length > 0)) {
        $(form).find("input[name='username']").addClass('error');
        message.html('Tên đăng nhập chưa có!');
        message.addClass('error');
        return;
    }
    if (data.username.indexOf(' ') >= 0) {
        message.html('Tên đăng nhập không được có khoảng trống');
        message.addClass('error');
        return;
    }
    if (data.username.length >= 32) {
        $(form).find("input[name='username']").addClass('error');
        message.html('Tên đăng nhập không được dài hơn 32 ký tự');
        message.addClass('error');
        return;
    }
    if (!((data.password != null) && data.password.length > 7)) {
        $(form).find("input[name='password']").addClass('error');
        message.html('Mật khẩu phải có ít nhất 8 ký tự!');
        message.addClass('error');
        return;
    }
    if (!((data.repassword != null) && data.password === data.repassword)) {
        $(form).find("input[name='repassword']").addClass('error');
        message.html('Xác nhận mật khẩu chưa đúng!');
        message.addClass('error');
        return;
    }
    is_capital = false;
    is_numeric = false;
    is_special = false;
    special_chars = '! @ # $ % ^ & * ?';
    for (i = j = 0, ref1 = data.password.length - 1; 0 <= ref1 ? j <= ref1 : j >= ref1; i = 0 <= ref1 ? ++j : --j) {
        c = data.password.charAt(i);
        if ('A' <= c && c <= 'Z') {
            is_capital = true;
        } else if ('0' <= c && c <= '9') {
            is_numeric = true;
        }
    }
    if (!is_capital) {
        $(form).find("input[name='password']").addClass('error');
        message.html('Mật khẩu phải có ít nhất 1 chữ cái viết hoa!');
        message.addClass('error');
        return;
    }
    if (!is_numeric) {
        $(form).find("input[name='password']").addClass('error');
        message.html('Mật khẩu phải có ít nhất 1 chữ số!');
        message.addClass('error');
        return;
    }
    if (!validateEmail(data.email)) {
        message.html('Địa chỉ hòm thư chưa đúng định dạng!');
        message.addClass('error');
        return;
    }
    if (data.with_patient) {
        if (!data.name || data.name.length < 1) {
            $(form).find("[name='name']").addClass('error');
            message.html('Chưa nhập tên');
            message.addClass('error');
            return;
        }
        if ((data.day == null) || data.day.length < 1) {
            $(form).find("[name='day']").addClass('error');
            message.html('Chưa nhập ngày sinh');
            message.addClass('error');
            return;
        }
        if ((data.month == null) || data.month.length < 1) {
            $(form).find("[name='month']").addClass('error');
            message.html('Chưa nhập tháng sinh');
            message.addClass('error');
            return;
        }
        if ((data.year == null) || data.year.length < 1) {
            $(form).find("[name='year']").addClass('error');
            message.html('Chưa nhập năm sinh');
            message.addClass('error');
            return;
        }
    }
    $(form).addClass('waiting');
    return $.ajax({
        url: root_api_url + 'register',
        type: 'POST',
        data: data,
        context: {
            form: form
        },
        complete: function() {
            return $(form).removeClass('waiting');
        },
        error: function(req, st, err) {
            var error1, response;
            message = $(this.form).find('.error-message').addClass('error');
            try {
                response = $.parseJSON(req.responseText);
            } catch (error1) {

            }
            if (response == null) {
                response = {};
            }
            if (response.field != null) {
                $("[name='" + response.field + "']").addClass('error');
            }
            if (req.status === 405) {
                message.html('Tên đăng nhập đã được sử dụng!');
                return;
            } else if (req.status === 406) {
                message.html('Email đã được sử dụng!');
                return;
            } else if (req.status === 400) {
                message.html(response.message);
                return;
            }
            return message.html('Có lỗi trong quá trình xử lý. Vui lòng hãy quay lại sử dụng dịch vụ sau!');
        },
        success: function(data) {
            var msg, w;
            w = $(this.form).parent();
            $(this.form).children("header").siblings().fadeOut('fast', function() {
                return $(this).remove();
            });
            msg = $('<div>').html("Một email đã được gửi đến địa chỉ do bạn đăng ký. Xin vui lòng kiểm tra hòm thư và làm theo hướng dẫn để kịch hoạt tài khoản!");
            msg.css({
                color: '#666',
                padding: '20px',
                textAlign: 'center'
            });
            msg.hide().appendTo($(this.form));
            return msg.fadeIn('fast');
        }
    });
};

use_local_storage = false;

clearXToken = function() {
    removeCache('authenticated');
    if (use_local_storage && (window.localStorage != null)) {
        window.localStorage.removeItem('xtoken');
        return;
    }
    return Cookies.remove('xtoken');
};

cacheXToken = function(data) {
    if (use_local_storage && (window.localStorage != null)) {
        window.localStorage.setItem('xtoken', data);
        return;
    }
    return Cookies.set('xtoken', data);
};

loadXToken = function() {
    var xtoken;
    xtoken = Cookies.get('xtoken');
    if (xtoken != null) {
        if (use_local_storage && (window.localStorage != null)) {
            window.localStorage.setItem('xtoken', xtoken);
            Cookies.remove('xtoken');
        }
    } else if (use_local_storage && (window.localStorage != null)) {
        xtoken = window.localStorage.getItem('xtoken');
        if (xtoken != null) {
            return xtoken;
        }
    }
    return xtoken;
};

$(document).ready(function() {
    return initBarcode();
});

initBarcode = function() {
    var holder;
    holder = $('.JOB-reader');
    if (holder.size() < 1) {
        return;
    }
    JOB.Init();
    window.JOB_localized = [];
    window.JOB_streaming = false;
    JOB.StreamCallback = function(result) {
        var code, j, len, r, ref1;
        if (result.length > 0) {
            console.log(result);
            if ((window._config != null) && (window._config.barcode_readers != null)) {
                for (j = 0, len = result.length; j < len; j++) {
                    r = result[j];
                    if (ref1 = r.Format, indexOf.call(window._config.barcode_readers, ref1) >= 0) {
                        code = r.Value;
                    }
                }
            } else {
                code = code = result[0].Value;
            }
            if (code == null) {
                return;
            }
            loadPatient($('.barcode-input'));
            return stopDecode();
        }
    };
    JOB.SetLocalizationCallback(function(result) {
        return window.JOB_localized = result;
    });
    JOB.SwitchLocalizationFeedback(true);
    window.JOB_canvas = document.getElementById("videoCanvas");
    window.JOB_ctx = window.JOB_canvas.getContext("2d");
    window.JOB_video = document.createElement("video");
    window.JOB_video.width = 800;
    window.JOB_video.height = 600;
    window.ratio_w = window.JOB_canvas.width / 320;
    return window.ratio_h = window.JOB_canvas.height / 240;
};

initVideo = function(config) {
    if (typeof MediaStreamTrack === "undefined" || MediaStreamTrack === null) {
        return;
    }
    return MediaStreamTrack.getSources(function(sourceInfos) {
        videoSourceId;
        var j, len, sourceInfo, videoSourceId;
        for (j = 0, len = sourceInfos.length; j < len; j++) {
            sourceInfo = sourceInfos[j];
            if (sourceInfo.kind === "video" && sourceInfo.facing === config.facing) {
                videoSourceId = sourceInfo.id;
            }
        }
        config.video = {

            /*
            mandatory: {
                minWidth: videoConstraints.width,
                minHeight: videoConstraints.height
            },
             */
            optional: [{
                sourceId: videoSourceId
            }]
        };
        navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
        $(window.JOB_canvas).show();
        if (navigator.getUserMedia) {
            navigator.getUserMedia(config, function(localMediaStream) {
                window.JOB_video.src = window.URL.createObjectURL(localMediaStream);
                window.JOB_video.play();
                JOB_draw();
                window.JOB_streaming = true;
                return JOB.DecodeStream(window.JOB_video);
            }, function(err) {
                return console.log("The following error occured: " + err);
            });
        } else {
            console.log("getUserMedia not supported");
        }
        return window.JOB_started = true;
    });
};

startDecode = function() {
    var config;
    if (!window.JOB_started) {
        config = {
            video: true,
            audio: false,
            facing: 'environment',
            width: {
                min: 640,
                ideal: 1280
            },
            height: {
                min: 480,
                ideal: 720
            },
            advanced: [{
                width: 1920,
                height: 1280
            }, {
                aspectRatio: 1.3333333333
            }]
        };
        return initVideo(config);
        navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
        $(window.JOB_canvas).show();
        if (navigator.getUserMedia) {
            navigator.getUserMedia(config, function(localMediaStream) {
                window.JOB_video.src = window.URL.createObjectURL(localMediaStream);
                window.JOB_video.play();
                JOB_draw();
                window.JOB_streaming = true;
                return JOB.DecodeStream(window.JOB_video);
            }, function(err) {
                return console.log("The following error occured: " + err);
            });
        } else {
            console.log("getUserMedia not supported");
        }
        window.JOB_started = true;
        return;
    }
    window.JOB_video.play();
    return JOB.DecodeStream(window.JOB_video);
};

stopDecode = function() {
    if (typeof JOB !== "undefined" && JOB !== null) {
        JOB.StopStreamDecode();
    }
    if (window.JOB_video != null) {
        return window.JOB_video.pause();
    }
};

JOB_draw = function() {
    var e, error1, j, l, len, ref1;
    try {
        window.JOB_ctx.drawImage(window.JOB_video, 0, 0, window.JOB_canvas.width, window.JOB_canvas.height);
        if (window.JOB_localized.length > 0) {
            window.JOB_ctx.beginPath();
            window.JOB_ctx.lineWIdth = "1";
            window.JOB_ctx.strokeStyle = "red";
            ref1 = window.JOB_localized;
            for (j = 0, len = ref1.length; j < len; j++) {
                l = ref1[j];
                window.JOB_ctx.rect(l.x * window.ratio_w, l.y * window.ratio_h, l.width * window.ratio_w, l.height * window.ratio_h);
            }
            window.JOB_ctx.stroke();
        }
        return setTimeout(JOB_draw, 100);
    } catch (error1) {
        e = error1;
        if (e.name === "NS_ERROR_NOT_AVAILABLE") {
            return setTimeout(JOB_draw, 20);
        } else {
            throw e;
        }
    }
};

updateEntity = function(entity_type, id, field, value) {
    var payload, url;
    url = root_api_url + entity_type + '/' + id + '/';
    payload = {};
    payload[field] = value;
    return $.ajax({
        url: url,
        type: 'PATCH',
        data: payload,
        context: {
            type: entity_type,
            id: id,
            field: field
        },
        dataType: 'json',
        success: function(data) {}
    });
};

isNonAuthenticated = function() {
    var xtoken, yfp;
    yfp = Cookies.get('_yfp');
    if (yfp == null) {
        return true;
    }
    xtoken = loadXToken();
    if (xtoken == null) {
        return true;
    }
    return false;
};

onNonAuthenticated = function() {
    $('.non-authentication-required').fadeIn();
    $('.authentication-waiting').fadeOut();
    $('.authentication-required').fadeOut();
    return clearProfile();
};

onAuthenticated = function() {
    $('.non-authentication-required').fadeOut();
    $('.authentication-waiting').removeClass('waiting').fadeIn();
    return $('.authentication-required').fadeIn();
};

onAuthenticating = function() {
    $('.non-authentication-required').fadeOut();
    $('.authentication-waiting').addClass('waiting').fadeIn();
    return $('.authentication-required').fadeOut();
};

$(document).ready(function() {
    onAuthenticating();
    if (isNonAuthenticated()) {
        return onNonAuthenticated();
    }
});

$(document).ajaxComplete(function(event, jqXHR, options) {
    var current_status, x_authenticated;
    x_authenticated = jqXHR.getResponseHeader('X-Authenticated');
    if (x_authenticated != null) {
        current_status = isNonAuthenticated();
        cacheClient('authenticated', x_authenticated);
        if (parseInt(x_authenticated) > 0) {
            return onAuthenticated();
        } else {
            if ((current_status != null) && parseInt(current_status) > 0) {
                showKickedOutMessage();
            }
            return onNonAuthenticated();
        }
    }
});

showKickedOutMessage = function() {
    var warning;
    warning = $("<div>", {
        "class": "kicked-out"
    }).appendTo($("body")).hide();
    warning.css({
        "position": "fixed",
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        'z-index': 100000,
        "text-align": "center"
    });
    warning.html("<div style='position: absolute; top: 0; left:0; bottom: 0; right: 0; background-color: #fff; opacity: 0.95; z-index: -1;'></div>\n<div style='padding-top: 40px; color: #222; padding-bottom: 20px; text-align: left; margin-left: auto; margin-right: auto; width: 400px; max-width: 100%;'>\n  Bạn không có quyền xem hoặc thực hiện thao tác này, có thể do 1 trong những nguyên nhân sau:\n  <ul><li>Chưa đăng nhập.</li><li>Đăng nhập quá lâu.</li><li>Một người khác đã dùng tài khoản của bạn để đăng nhập vào một máy khác.</li></ul>\n</div>\n<div>\n  <a href=\"/login\" class='button black medium'>Đăng nhập lại</a>\n  <span class=\"button medium\" onclick=\"$(this).closest('.kicked-out').fadeOut()\">Bỏ qua</span>\n</div>\n");
    return warning.fadeIn();
};

loadMainEntity = function(entity_type, id, with_related, related_parser) {
    var url;
    if (with_related == null) {
        with_related = false;
    }
    if (related_parser == null) {
        related_parser = null;
    }
    if (isNonAuthenticated()) {
        url = root_api_url + 'public/' + entity_type + '/' + id + '/';
    } else {
        url = root_api_url + entity_type + '/' + id + '/';
    }
    if (with_related) {
        url = url + '?top_related=1';
    }
    $.ajax({
        url: url,
        type: 'GET',
        context: {
            type: entity_type,
            id: id,
            with_related: with_related,
            related_parser: related_parser
        },
        dataType: 'json',
        success: function(data) {
            var container, field, value;
            container = $("#main-entity-container");
            container.removeClass('waiting');
            for (field in data) {
                value = data[field];
                if (value == null) {
                    continue;
                }
                if ($.type(value) === 'string') {
                    value = $.trim(value);
                    if (!(value.length > 0)) {
                        continue;
                    }
                }
                $(".object-info[rel='" + field + "']").each(function() {
                    return renderFieldToTag($(this), value);
                });
                $(".object-related[rel='" + field + "']").fadeIn('fast');
                $(".object-related[rel*='," + field + ",']").fadeIn('fast');
                $(".object-attr[rel='" + field + "']").each(function() {
                    return copyAttributeToTag($(this), field, value);
                });
                $(".object-attr[rel*='," + field + ",']").each(function() {
                    return copyAttributeToTag($(this), field, value);
                });
            }
            if (this.with_related && (this.related_parser != null)) {
                return this.related_parser(data);
            }
        },
        error: function(req, status) {
            var container;
            container = $("#main-entity-container");
            if (req.status === 406 && (req.responseJSON != null) && (req.responseJSON.message != null)) {
                container.empty();
                container.append("<div class=\"alert alert-danger\">\n" + req.responseJSON.message + "\n<div>email: thongtinthuoc.com@gmail.com.</div>\n</div>");
            } else {
                container.empty();
                container.append("<div class=\"alert alert-warning\">\nCó lỗi xảy ra trong quá trình tải dữ liệu.\n</div>");
            }
            return container.removeClass('waiting');
        }
    });
    if (!with_related && (related_parser != null)) {
        return loadMainEntityRelated(entity_type, id, related_parser);
    }
};

copyAttributeToTag = function(field, name, value, parent) {
    var attr, current_value, ind;
    if (parent == null) {
        parent = null;
    }
    if (parent != null) {
        if (!$(field).parent().closest('.object-info').is(parent)) {
            return;
        }
    } else {
        if ($(field).parent().closest('.object-info').size() > 0) {
            return;
        }
    }
    ind = field.attr('rel').split(',').indexOf(name);
    attr = field.attr('attr').split(',')[ind];
    current_value = field.attr(attr);
    if ((current_value != null) && current_value.indexOf("\#{" + name + "}") >= 0) {
        current_value = current_value.replace("\#{" + name + "}", value);
        field.attr(attr, current_value);
        return;
    }
    return field.attr(attr, value);
};

renderFieldToTag = function(field, value, parent) {
    var ele, f, j, k, len, v;
    if (parent == null) {
        parent = null;
    }
    if (parent != null) {
        if (!$(field).parent().closest('.object-info').is(parent)) {
            return;
        }
    } else {
        if ($(field).parent().closest('.object-info').size() > 0) {
            return;
        }
    }
    if ($.type(value) === 'array') {
        for (j = 0, len = value.length; j < len; j++) {
            ele = value[j];
            f = field.clone().insertBefore(field);
            renderFieldToTag(f, ele, parent);
        }
        field.remove();
        return;
    }
    if ($.type(value) === 'object') {
        for (k in value) {
            v = value[k];
            if ($.type(v) === 'string') {
                v = $.trim(v);
                if (!(v.length > 0)) {
                    continue;
                }
            }
            field.find(".object-related[rel='" + k + "']").each(function() {
                if (!$(this).parent().closest('.object-info').is(field)) {
                    return;
                }
                return $(this).fadeIn('fast');
            });
            field.find(".object-info[rel='" + k + "']").each(function() {
                return renderFieldToTag($(this), v, field);
            });
            field.find(".object-attr[rel='" + k + "']").each(function() {
                return copyAttributeToTag($(this), k, v, field);
            });
            field.find(".object-attr[rel*='," + k + ",']").each(function() {
                return copyAttributeToTag($(this), k, v, field);
            });
        }
        return;
    }
    return field.html(value);
};

loadMainEntityRelated = function(entity_type, id, related_parser) {
    var url;
    url = root_api_url + entity_type + '/' + id + '/top-related/';
    return $.ajax({
        url: url,
        type: 'GET',
        context: {
            type: entity_type,
            id: id,
            parser: related_parser
        },
        dataType: 'json',
        success: function(data) {
            return this.parser(data);
        }
    });
};

pdfDoc = null;

pdfTimelapse = "0:10:20:30:40:50:60:70:80:90:100";

LectureAudio = (function() {
    function LectureAudio() {
        this.toggle = bind(this.toggle, this);
        this.paused = bind(this.paused, this);
        this.pause = bind(this.pause, this);
        this.play = bind(this.play, this);
        this.updateProgress = bind(this.updateProgress, this);
        this.interval = 200;
        this.progress_bar_ = $('.lecture-progress-bar .progress-indicator');
        this.progress_pos_ = $('.lecture-progress-bar .audio-current');
        this.doc_ = null;
        this.timelapse_ = null;
        this.currentPage = 1;
        this.owner_ = null;
    }

    LectureAudio.prototype.owner = function(o) {
        if (o != null) {
            this.owner_ = o;
        }
        return this.owner_;
    };

    LectureAudio.prototype.slider = function(s) {
        if (s != null) {
            return this.slider_ = s;
        } else {
            return this.slider_;
        }
    };

    LectureAudio.prototype.progress_bar = function(p) {
        if (p != null) {
            return this.progress_bar_ = p;
        } else {
            return this.progress_bar_;
        }
    };

    LectureAudio.prototype.audio = function(a) {
        if (a != null) {
            this.audio_ = a;
            return this.length_percent = 100.0 / this.audio_.duration;
        } else {
            return this.audio_;
        }
    };

    LectureAudio.prototype.doc = function(d) {
        var i, j, ref1;
        if (d != null) {
            this.doc_ = d;
            if ((this.audio_ != null) && (this.timelapse_ == null)) {
                this.timelapse_ = [];
                for (i = j = 0, ref1 = this.doc_.numPages; 0 <= ref1 ? j <= ref1 : j >= ref1; i = 0 <= ref1 ? ++j : --j) {
                    this.timelapse_.push(i * this.audio_.duration / this.doc_.numPages);
                }
            }
        }
        return this.doc_;
    };

    LectureAudio.prototype.timelapse = function(t) {
        if (t != null) {
            this.timelapse_ = t;
            this.timelapse_.sort(function(a, b) {
                return parseFloat(a) - parseFloat(b);
            });
        }
        return this.timelapse_;
    };

    LectureAudio.prototype.resetTimelapse = function() {
        var i, j, length, pages, ref1, slider, tt, w;
        if (!((this.audio_ != null) && (this.doc_ != null))) {
            return;
        }
        length = this.audio_.duration;
        pages = this.doc_.numPages;
        this.timelapse_ = [];
        w = length / pages;
        for (i = j = 0, ref1 = pages; 0 <= ref1 ? j <= ref1 : j >= ref1; i = 0 <= ref1 ? ++j : --j) {
            this.timelapse_.push(i * w);
        }
        this.saveTimelapse();
        genProgressBar($('.lecture-progress-bar'));
        slider = $('.slide-position-slider');
        if ((this.timelapse_ != null) && this.timelapse_.length > 0) {
            tt = this.timelapse_.slice(1, this.timelapse_.length - 1);
            return slider.slider("option", "values", tt);
        }
    };

    LectureAudio.prototype.updateProgress = function() {
        var nc;
        if (!((this.audio_ != null) && (this.progress_bar_ != null))) {
            return;
        }
        this.progress_bar_.css({
            "width": (this.audio_.currentTime * this.length_percent) + '%'
        });
        if (this.progress_pos_.size() > 0) {
            this.progress_pos_.html(second2minute(this.audio_.currentTime));
        }
        if ((this.doc_ != null) && (this.timelapse_ != null)) {
            nc = this.currentPage;
            if (nc < 1) {
                nc = 1;
            }
            if (nc > this.doc_.numPages) {
                nc = this.doc_.numPages;
            }
            while (this.audio_.currentTime > this.timelapse_[nc] && nc < this.doc_.numPages) {
                nc += 1;
            }
            while (this.audio_.currentTime < this.timelapse_[nc - 1] && nc > 1) {
                nc -= 1;
            }
            if (nc !== this.currentPage) {
                this.currentPage = nc;
                return renderPDFPage(nc);
            }
        }
    };

    LectureAudio.prototype.play = function() {
        this.timer = setInterval(this.updateProgress, this.interval);
        if (this.audio_.paused) {
            return this.audio_.play();
        }
    };

    LectureAudio.prototype.pause = function() {
        clearInterval(this.timer);
        if (!this.audio_.paused) {
            this.audio_.pause();
        }
        return this.timer = null;
    };

    LectureAudio.prototype.paused = function() {
        return this.audio_.paused;
    };

    LectureAudio.prototype.toggle = function() {
        if (this.audio_ == null) {
            return;
        }
        if (this.audio_.paused) {
            return this.play();
        } else {
            return this.pause();
        }
    };

    LectureAudio.prototype.move = function(percent) {
        this.progress_bar_.animate({
            "width": (100 * percent) + '%'
        }, 50);
        if (this.audio_ != null) {
            return this.audio_.currentTime = this.audio_.duration * parseFloat(percent);
        }
    };

    LectureAudio.prototype.changeSlide = function(num) {
        if (this.timelapse_ == null) {
            return;
        }
        if (num < 1 || num >= this.timelapse_.length) {
            return;
        }
        this.currentPage = num;
        return this.move(this.timelapse_[num - 1] / this.timelapse_[this.timelapse_.length - 1]);
    };

    LectureAudio.prototype.saveTimelapse = function() {
        var url;
        if (!this.owner_) {
            return;
        }
        url = root_api_url + this.owner_;
        return $.ajax({
            url: url,
            type: 'PATCH',
            data: {
                'timelase': this.timelapse_.join(':')
            }
        });
    };

    return LectureAudio;

})();

document['lecture_audio'] = new LectureAudio();

checkProgressStep = function(slider) {
    return $(slider).find('.steps .step').each(function() {
        var w;
        w = $(this).width();
        if (w < 20) {
            return $(this).addClass('no-indicator');
        } else {
            return $(this).removeClass('no-indicator');
        }
    });
};

initLectureSlider = function(owner, timelapse, max) {
    var slider, tt;
    slider = $('.slide-position-slider');
    if ((timelapse != null) && timelapse.length > 0) {
        tt = timelapse.slice(1, timelapse.length - 1);
        slider.slider({
            values: tt,
            max: max,
            step: 0.1
        });
    } else {
        slider.slider({
            max: max,
            step: 0.1
        });
    }
    $(".slide-position-slider .ui-slider-handle").each(function(index) {
        return $(this).append("<div class=\"time-indicator\">" + (second2minute(timelapse[index + 1], false)) + "</div>");
    });
    return $(".slide-position-slider").on("slide", function(event, ui) {
        return $(ui.handle).children('.time-indicator').html(second2minute(ui.value));
    });
};

initAudioControl = function(owner, timelapse) {
    var a, current_bar, holder, j, len, length_bar, t, tsplit, tt, w;
    if (document['lecture_audio'] == null) {
        document['lecture_audio'] = new LectureAudio();
    }
    if ((owner != null) && owner.length > 0) {
        document['lecture_audio'].owner(owner);
    }
    tt = [];
    if ((timelapse != null) && timelapse.length > 0) {
        tsplit = timelapse.split(':');
        for (j = 0, len = tsplit.length; j < len; j++) {
            t = tsplit[j];
            tt.push(parseFloat(t));
        }
        document['lecture_audio'].timelapse(tt);
    }
    w = $("#audio-file");
    a = w.children('audio');
    if (pdfDoc != null) {
        document['lecture_audio'].doc(pdfDoc);
    }
    if (a.size() < 1) {
        return;
    }
    if (!(a[0].duration > 0)) {
        return;
    }
    document['lecture_audio'].audio(a[0]);
    initLectureSlider(owner, document['lecture_audio'].timelapse(), a[0].duration);
    $(".player-control").removeClass("waiting");
    holder = $(".lecture-progress-bar");
    length_bar = holder.children('.audio-length');
    if (length_bar.size() < 1) {
        length_bar = $("<div>", {
            "class": "audio-length"
        }).appendTo($(".lecture-progress-bar"));
    }
    length_bar.html(second2minute(a[0].duration));
    current_bar = holder.children('.audio-current');
    if (current_bar.size() < 1) {
        current_bar = $("<div>", {
            "class": "audio-current"
        }).appendTo($(".lecture-progress-bar"));
    }
    current_bar.html("00:00");
    return document['lecture_audio'].progress_pos_ = current_bar;
};

second2minute = function(length, full) {
    var display, minutes, seconds;
    if (full == null) {
        full = true;
    }
    length = Math.round(length);
    minutes = Math.floor(length / 60);
    seconds = length - minutes * 60;
    if (minutes < 1) {
        return length + "s";
    }
    if (full && seconds < 10) {
        seconds = "0" + seconds;
    }
    display = minutes + ":" + seconds;
    if (full && minutes < 10) {
        display = "0" + display;
    }
    return display;
};

syncAudioProgress = function() {
    if (document['lecture_audio'] == null) {
        return;
    }
    return document['lecture_audio'].updateProgress();
};

renderPDFPage = function(num) {
    var canvas, pageRendering;
    pageRendering = true;
    canvas = $("#the-canvas")[0];
    return renderPDFPage_(num, canvas);
};

renderPDFPage_ = function(num, canvas) {
    var ctx;
    ctx = canvas.getContext("2d");
    $('.slide-pagination-wrapper').attr('rel', num);
    pdfDoc.getPage(num).then(function(page) {
        var renderContext, renderTask, scale, viewport;
        viewport = page.getViewport(1.0);
        scale = canvas.width / viewport.width;
        viewport = page.getViewport(scale);
        canvas.height = viewport.height;
        renderContext = {
            canvasContext: ctx,
            viewport: viewport
        };
        renderTask = page.render(renderContext);
        return renderTask.promise.then(function() {
            var pageNumPending, pageRendering;
            pageRendering = false;
            if (typeof pageNumPending !== "undefined" && pageNumPending !== null) {
                renderPDFPage(pageNumPending);
                return pageNumPending = null;
            }
        });
    });
    return $("#page_num").html(num);
};

slides_onPrevPage = function() {
    var pageNum;
    pageNum = parseInt($('.slide-pagination-wrapper').attr('rel'));
    if (pageNum <= 1) {
        return;
    }
    pageNum--;
    renderPDFPage(pageNum);
    if (document['lecture_audio'] != null) {
        return document['lecture_audio'].changeSlide(pageNum);
    }
};

slides_onNextPage = function() {
    var pageNum;
    pageNum = parseInt($('.slide-pagination-wrapper').attr('rel'));
    if (pageNum >= pdfDoc.numPages) {
        return;
    }
    pageNum++;
    renderPDFPage(pageNum);
    if (document['lecture_audio'] != null) {
        return document['lecture_audio'].changeSlide(pageNum);
    }
};

navigateSlides = function(event) {
    if (event.which === 37) {
        slides_onPrevPage();
    }
    if (event.which === 39) {
        return slides_onNextPage();
    }
};

pdfReady = function(url) {

    /**
    Get page info from document, resize canvas accordingly, and render page.
    @param num Page number.
     */
    var canvas, pageNumPending, pageRendering;
    PDFJS.workerSrc = "/static/js/pdf.worker.js";
    pageRendering = false;
    pageNumPending = null;
    canvas = $("#the-canvas")[0];
    $("#prev").on("click", function() {
        slides_onPrevPage();
        return false;
    });
    $("#next").on("click", function() {
        slides_onNextPage();
        return false;
    });
    $('html').on('keydown', function(event) {
        return navigateSlides(event);
    });
    return PDFJS.getDocument(url).then(function(pdfDoc_) {
        var thumb;
        pdfDoc = pdfDoc_;
        $("#page_count").html(pdfDoc.numPages);
        initProgressBar($('.lecture-progress-bar'), pdfDoc.numPages);
        if (document['lecture_audio'] != null) {
            document['lecture_audio'].doc(pdfDoc_);
        }
        renderPDFPage(1);
        thumb = $('.lecture-thumbnail-wrapper');
        if (thumb.hasClass('no-thumb')) {
            return genLectureThumbs();
        }
    });
};

genLectureThumbs = function() {
    var pages, scale, thumb_height, thumb_width;
    if (pdfDoc == null) {
        console.log('No pdf file loaded!');
        return;
    }
    thumb_width = 200;
    thumb_height = 160;
    scale = 1.0;
    pages = pdfDoc.numPages;
    return pdfDoc.getPage(1).then(function(page) {
        var canvas, thumbs, viewport, wrapper;
        viewport = page.getViewport(1.0);
        scale = thumb_width / viewport.width;
        thumb_height = scale * viewport.height;
        wrapper = $(".lecture-thumbnail-wrapper");
        wrapper.empty();
        canvas = $("<canvas>").attr({
            width: thumb_width * pages,
            height: thumb_height
        });
        canvas.appendTo($(".lecture-progress-bar .progress-thumbnail"));
        $(".lecture-progress-bar .progress-thumbnail").removeClass('waiting');
        thumbs = canvas[0].getContext("2d");
        return genPDFThumb(null, thumbs, pdfDoc, 1, scale, thumb_width, thumb_height, doneGenThumbnail);
    });
};

initProgressBar = function(holder, pages) {
    var bar_wrapper, i, itotal, j, p, q, ref1, ref2, results1, step, timelapse, w, wrapper;
    bar_wrapper = holder.find('.progress-bar-wrapper .steps');
    p = holder.find('.progress-indicator');
    p.show('fast');
    bar_wrapper.children().remove();
    wrapper = $(".lecture-progress-bar .progress-thumbnail");
    wrapper.addClass('waiting');
    w = 100.0 / pages;
    timelapse = [];
    for (i = j = 0, ref1 = pages; 0 <= ref1 ? j <= ref1 : j >= ref1; i = 0 <= ref1 ? ++j : --j) {
        timelapse.push(i * w);
    }
    document['lecture_audio'].timelapse(timelapse);
    itotal = 100 / timelapse[pages];
    results1 = [];
    for (i = q = 0, ref2 = pages - 1; 0 <= ref2 ? q <= ref2 : q >= ref2; i = 0 <= ref2 ? ++q : --q) {
        step = $("<div>", {
            "class": "step"
        }).appendTo(bar_wrapper);
        step.attr("rel", i);
        step.html(i + 1);
        step.css({
            width: ((timelapse[i + 1] - timelapse[i]) * itotal) + '%',
            left: (timelapse[i] * itotal) + '%'
        });
        step.mouseenter(function(event) {
            return $(event.target).closest('.progress-bar-outer').siblings('.progress-thumbnail').addClass('slide-' + $(this).attr('rel'));
        });
        step.mouseleave(function(event) {
            return $(event.target).closest('.progress-bar-outer').siblings('.progress-thumbnail').removeClass('slide-' + $(this).attr('rel'));
        });
        results1.push(step.click(function(event) {
            var s;
            s = 1 + parseInt($(event.target).attr('rel'));
            document['lecture_audio'].changeSlide(s);
            return renderPDFPage(s);
        }));
    }
    return results1;
};

genProgressBar = function(holder) {
    var bar_wrapper, doc, i, itotal, j, p, pages, q, ref1, ref2, step, timelapse, w;
    if (document['lecture_audio'] == null) {
        return;
    }
    doc = document['lecture_audio'].doc_;
    if (doc == null) {
        return;
    }
    pages = doc.numPages;
    bar_wrapper = holder.find('.progress-bar-wrapper .steps');
    p = holder.find('.progress-indicator');
    p.show('fast');
    bar_wrapper.children().remove();
    timelapse = document['lecture_audio'].timelapse();
    if (!((timelapse != null) && timelapse.length > 0)) {
        itotal = 1;
        w = 100.0 / pages;
        timelapse = [];
        for (i = j = 0, ref1 = pages; 0 <= ref1 ? j <= ref1 : j >= ref1; i = 0 <= ref1 ? ++j : --j) {
            timelapse.push(i * w);
        }
    }
    itotal = 100 / timelapse[pages];
    for (i = q = 0, ref2 = pages - 1; 0 <= ref2 ? q <= ref2 : q >= ref2; i = 0 <= ref2 ? ++q : --q) {
        step = $("<div>", {
            "class": "step"
        }).appendTo(bar_wrapper);
        step.attr("rel", i);
        step.html(i + 1);
        step.css({
            width: ((timelapse[i + 1] - timelapse[i]) * itotal) + '%',
            left: (timelapse[i] * itotal) + '%'
        });
        step.mouseenter(function(event) {
            return $(event.target).closest('.progress-bar-outer').siblings('.progress-thumbnail').addClass('slide-' + $(this).attr('rel'));
        });
        step.mouseleave(function(event) {
            return $(event.target).closest('.progress-bar-outer').siblings('.progress-thumbnail').removeClass('slide-' + $(this).attr('rel'));
        });
        step.click(function(event) {
            var s;
            s = 1 + parseInt($(event.target).attr('rel'));
            document['lecture_audio'].changeSlide(s);
            return renderPDFPage(s);
        });
    }
    return checkProgressStep(holder);
};

doneGenThumbnail = function() {
    return $('.bxslider.thumbnail-slider').bxSlider({
        minSlides: 1,
        maxSlides: 5,
        infiniteLoop: false,
        useCSS: false,
        controls: false,
        responsive: true,
        slideWidth: 220
    });
};

genPDFThumb = function(wrapper, ctx, pdf, p, scale, width, height, handler) {
    if (p > pdf.numPages) {
        if (handler != null) {
            handler();
        }
        return;
    }
    return pdf.getPage(p).then(function(page) {
        var canvas, renderContext, renderTask, thumb, viewport;
        viewport = page.getViewport(scale);
        canvas = document.createElement('canvas');
        canvas.height = height;
        canvas.width = width;
        thumb = canvas.getContext("2d");
        renderContext = {
            canvasContext: thumb,
            viewport: viewport
        };
        renderTask = page.render(renderContext);
        return renderTask.promise.then(function() {
            ctx.drawImage(canvas, (p - 1) * width, 0);
            return genPDFThumb(wrapper, ctx, pdf, p + 1, scale, width, height, handler);
        });
    });
};

playLectureAudio = function() {
    if (document['lecture_audio'] == null) {
        return;
    }
    if (document['lecture_audio'].paused()) {
        $('.player-control').addClass('playing');
    } else {
        $('.player-control').removeClass('playing');
    }
    return document['lecture_audio'].toggle();
};

adjustSlidesPosition = function() {
    var slider, timelapse, values;
    if (document['lecture_audio'] == null) {
        return;
    }
    slider = $('.slide-position-slider');
    values = slider.slider("option", "values");
    timelapse = [0].concat(values);
    timelapse.push(document['lecture_audio'].audio().duration);
    document['lecture_audio'].timelapse(timelapse);
    return document['lecture_audio'].saveTimelapse();
};

adjustCurrentSlide = function() {
    var currentSlide, currentTime, ind, timelapse;
    currentSlide = lecture_audio.currentPage;
    if (currentSlide < 1) {
        currentSlide = 1;
    }
    currentTime = $('.slide-position-slider').slider("option", "value");
    timelapse = document['lecture_audio'].timelapse();
    ind = currentSlide + 1;
    timelapse[currentSlide - 1] = currentTime;
    while (ind < timelapse.length && timelapse[ind] < (timelapse[ind - 1] + 3)) {
        timelapse[ind] = timelapse[ind - 1] + 3;
        ind += 1;
    }
    timelapse[timelapse.length - 1] = document['lecture_audio'].audio().duration;
    ind = timelapse.length - 1;
    while (ind > 0) {
        if (timelapse[ind] > (timelapse[ind - 1] + 2)) {
            break;
        }
        timelapse[ind - 1] = timelapse[ind] - 2;
        ind -= 1;
    }
    document['lecture_audio'].timelapse(timelapse);
    document['lecture_audio'].saveTimelapse();
    return genProgressBar($('.lecture-progress-bar'));
};

onZoom = function(ele, direction) {
    var bar, class_name, holder, input, val;
    holder = $(ele).closest('.zoom-controller');
    input = holder.children('.zoom');
    bar = holder.siblings('.progress-bar-outer');
    val = parseFloat(input.attr('rel'));
    val += direction * 0.5;
    if (val < 1 || val > 6) {
        return;
    }
    input.attr('rel', val);
    class_name = "x" + val;
    class_name = class_name.replace('.', '-');
    bar.removeClass('x1');
    bar.removeClass('x1-5');
    bar.removeClass('x2');
    bar.removeClass('x2-5');
    bar.removeClass('x3');
    bar.removeClass('x3-5');
    bar.removeClass('x4');
    bar.removeClass('x4-5');
    bar.removeClass('x5');
    bar.removeClass('x5-5');
    bar.removeClass('x6');
    bar.addClass(class_name);
    return input.html((val * 100) + '%');
};

$(window).resize(function() {
    var s;
    s = $('.progress-bar-wrapper');
    if (s.size() > 0) {
        return checkProgressStep(s);
    }
});

loadLecture = function(id) {
    var url;
    if (isNonAuthenticated()) {
        return;
    }
    url = alt_api_url + ("lectures/" + id + "/");
    return $.ajax({
        url: url,
        dataType: 'jsonp',
        success: function(response) {
            var payload;
            if (response.url != null) {
                payload = {};
                if (response.sh != null) {
                    payload.httpHeaders = response.sh;
                }
                payload.url = response.url;
                pdfReady(payload);
            }
            if (response.audio != null) {
                return initAudioControl(response.audio, response.timelase);
            }
        }
    });
};

saveDraft = function(holder, payload, fct) {
    var f, fields, id, j, len, method, url, v;
    if (payload == null) {
        payload = {};
    }
    if (fct == null) {
        fct = null;
    }
    id = $(holder).attr("rel");
    fields = ["source", "image", "source_link", "category", "author", "title", "summary", "tags"];
    for (j = 0, len = fields.length; j < len; j++) {
        f = fields[j];
        v = $(holder).find("input[name='" + f + "'], select[name='" + f + "'], textarea[name='" + f + "']").val();
        if (v == null) {
            v = "";
        }
        payload[f] = v;
    }
    payload['text'] = tinymce.editors[0].getContent("");
    if ((payload['title'] == null) || payload['title'].length < 1) {
        $(holder).find(".status-bar").attr("class", "status-bar error").html("Bài viết chưa có tiêu đề");
        return;
    }
    method = (id != null) && id.length > 0 ? 'PUT' : 'POST';
    url = root_api_url + 'news/';
    if ((id != null) && id.length > 0) {
        url = url + id + "/";
    }
    holder.addClass("saving");
    $(holder).find(".status-bar").empty();
    return $.ajax({
        url: url,
        type: method,
        contentType: 'application/json',
        context: {
            holder: holder,
            fct: fct
        },
        dataType: 'json',
        data: JSON.stringify(payload),
        xhrFields: {
            withCredentials: true
        },
        complete: function() {
            return $(holder).removeClass("saving");
        },
        success: function(data) {
            id = data['id'];
            if (id != null) {
                $(this.holder).attr("rel", id);
                $(this.holder).find(".buttons").children("[rel='handover']").removeClass('inactive');
                $(this.holder).find(".status-bar").attr("class", "status-bar success").html("Saved!");
                if (fct != null) {
                    return fct(id);
                }
            } else {
                return $(this.holder).find(".status-bar").attr("class", "status-bar error").html("Failed to save draft!");
            }
        },
        error: function(req, err, stat) {
            return $(this.holder).find(".status-bar").attr("class", "status-bar error").html("Failed to save draft!");
        }
    });
};

loadDrafts = function() {
    var url;
    url = root_api_url + "news/?public=0&owned=yes";
    return $.ajax({
        url: url,
        dataType: "json",
        xhrFields: {
            withCredentials: true
        },
        success: function(data) {
            return parseDrafts(data.results);
        }
    });
};

formatDateTime = function(dt) {
    var d;
    d = new Date(dt);
    if (d == null) {
        return dt;
    }
    return d.getHours() + ":" + d.getMinutes() + ":" + d.getSeconds() + " " + d.getDate() + "/" + d.getMonth() + "/" + d.getFullYear();
};

createDraftListItem = function(draft, removable) {
    var btn, btns, info, j, len, ref1, t, tag, w;
    w = $("<div>", {
        "class": "item news-draft",
        rel: draft.id
    });
    info = $("<div>", {
        "class": "info"
    }).appendTo(w);
    $("<span>", {
        "class": "datetime",
        text: "created: " + formatDateTime(draft.created_date)
    }).appendTo(info);
    $("<span>", {
        "class": "datetime",
        text: "   last updated: " + formatDateTime(draft.modified_date)
    }).appendTo(info);
    $("<div>", {
        "class": "title",
        text: draft.title
    }).appendTo(w);
    $("<div>", {
        "class": "summary",
        text: draft.summary
    }).appendTo(w);
    btns = $("<div>", {
        "class": "buttons"
    }).appendTo(w);
    btns.css({
        margin: '10px'
    });
    if (removable === true) {
        btn = $("<span>", {
            "class": "button red confirmation",
            onclick: "$.Event(event).stopPropagation();"
        }).appendTo(btns);
        btn.html("Gỡ bỏ\n<div class=\"popup-form confirmation center below\" style=\"display:none;\" onclick=\"$.Event(event).stopPropagation();\">\n    <div class=\"header\">Gỡ bỏ bài viết</div>\n    <div class=\"description\">Bạn có chắc muốn xoá bản nháp này không ?</div>\n    <div class=\"buttons\">\n        <span class=\"button blue\" onclick=\"removeDraft($(this).closest('.item.news-draft')); $.Event(event).stopPropagation();\">YES</span>\n        <span class=\"button red\" rel=\"cancel\" onclick=\"$(this).closest('.popup-form').fadeOut('fast');$.Event(event).stopPropagation();\">CANCEL</span>\n    </div>\n</div>");
        btn.click(function(event) {
            if ($(this).hasClass('inactive')) {
                return;
            }
            $.Event(event).stopPropagation();
            return $(this).children('.popup-form').fadeToggle('fast');
        });
    }
    if ((draft.tags != null) && $.trim(draft.tags).length > 0) {
        t = $("<div>", {
            "class": "tag-region"
        }).appendTo(w);
        ref1 = draft.tags.split(",");
        for (j = 0, len = ref1.length; j < len; j++) {
            tag = ref1[j];
            $("<span>", {
                "class": "tag-G",
                text: tag
            }).appendTo(t);
        }
    }
    if (draft.pub_status === 0) {
        w.click(function() {
            return window.location = root_url + "/viet_bai/" + draft.url_id;
        });
        w.css("cursor", "pointer");
    }
    if (draft.pub_status === 1) {
        w.click(function() {
            return window.location = root_url + "/preview/" + draft.url_id;
        });
        w.css("cursor", "pointer");
    }
    return w;
};

parseDrafts = function(data) {
    var d, drafts, handed, j, len, len1, len2, len3, list, q, rejected, results1, u, x;
    list = $("#draft-list");
    list.empty();
    drafts = [];
    handed = [];
    rejected = [];
    for (j = 0, len = data.length; j < len; j++) {
        d = data[j];
        switch (d.pub_status) {
            case 0:
                drafts.push(d);
                break;
            case 5:
                rejected.push(d);
                break;
            default:
                handed.push(d);
        }
    }
    for (q = 0, len1 = drafts.length; q < len1; q++) {
        d = drafts[q];
        createDraftListItem(d, true).appendTo(list);
    }
    if (handed.length > 0) {
        $("<div>", {
            text: handed.length + " Bài đang chờ duyệt",
            "class": "handed header"
        }).appendTo(list);
        for (u = 0, len2 = handed.length; u < len2; u++) {
            d = handed[u];
            createDraftListItem(d, false).appendTo(list);
        }
    }
    if (rejected.length > 0) {
        $("<div>", {
            text: rejected.length + " Bài viết bị từ chối",
            "class": "rejected header"
        }).appendTo(list);
        results1 = [];
        for (x = 0, len3 = rejected.length; x < len3; x++) {
            d = rejected[x];
            results1.push(createDraftListItem(d, false).appendTo(list));
        }
        return results1;
    }
};

openNews = function(id) {
    return window.location = root_url + '/preview/' + encodeURIComponent(id);
};

viewDraft = function(editor) {
    return saveDraft(editor, {}, openNews);
};

handDraft_ = function(id) {
    var payload;
    payload = {
        "pub_status": 1
    };
    alert(JSON.stringify(payload));
    return $.ajax({
        url: root_api_url + "news/" + id,
        type: 'PUT',
        contentType: 'application/json',
        data: JSON.stringify(payload),
        context: {
            draft: id
        },
        xhrFields: {
            withCredentials: true
        },
        complete: function() {
            return $(".news-editor[rel='" + this.draft + "']").removeClass("saving");
        },
        success: function() {
            return openNews(this.draft);
        },
        error: function() {
            return $(".news-editor").find(".status-bar").attr("class", "status-bar error").html("Failed to hand draft!");
        }
    });
};

handDraft = function(holder) {
    holder.addClass("saving");
    return saveDraft(holder, {
        "pub_status": 1
    }, openNews);
};

removeDraft = function(holder, fct) {
    var id;
    $(holder).slideUp('fast');
    id = $(holder).attr("rel");
    return $.ajax({
        url: "/api/v1/news/" + id,
        type: 'DELETE',
        complete: function() {},
        success: function() {},
        error: function(req, error, status) {
            return alert(error + ':' + status + '>' + req.repsonseText);
        }
    });
};

rejectDraft = function(holder) {
    var entity_type, id, payload;
    id = $(holder).attr("rel");
    entity_type = $(holder).attr("rev");
    payload = {
        pub_status: 5
    };
    $(holder).hide('fast');
    return $.ajax({
        url: "/api/v1/" + entity_type + "/" + id,
        type: 'PUT',
        context: {
            holder: holder
        },
        data: payload,
        success: function() {
            return $(this.holder).remove();
        },
        error: function(req, error, status) {
            return $(this.holder).show('fast');
        }
    });
};

approveDraft = function(holder) {
    var entity_type, id, payload;
    id = $(holder).attr("rel");
    entity_type = $(holder).attr("rev");
    payload = {
        "public": 1,
        pub_status: 4
    };
    $(holder).addClass('waiting');
    return $.ajax({
        url: "/api/v1/" + entity_type + "/" + id,
        type: 'PATCH',
        context: {
            holder: holder
        },
        data: payload,
        complete: function() {
            return $(this.holder).removeClass('waiting');
        },
        success: function() {
            return $(this.holder).hide('fast', function() {
                return $(this).remove();
            });
        },
        error: function(req, error, status) {
            return $(this.holder).show('fast');
        }
    });
};

updateNewsCat = function(entity_type, id, cat) {
    var payload;
    if (entity_type == null) {
        entity_type = 'news';
    }
    payload = {
        category: cat
    };
    return $.ajax({
        url: "/api/v1/" + entity_type + "/" + id,
        type: 'PATCH',
        dataType: 'application/json',
        data: payload
    });
};

openNewsCategoryChoice = function(ele_selector) {
    var current, dialog;
    alert(2);
    dialog = $("#cat-choice");
    alert(1);
    current = $(ele_selector).attr("rel");
    if (current == null) {
        current = "";
    }
    dialog.find(".cat-item").removeClass("selected");
    dialog.find(".cat-item[rel='" + current + "']").addClass("selected");
    dialog.find(".assign-button").off().click(function() {
        $(ele_selector).children("span").html($(this).parent().html());
        $(ele_selector).attr("rel", $(this).parent().attr("rel"));
        $("#cat-choice").dialog("close");
        return updateNewsCat('news', $(ele_selector).attr("rev"), $(this).parent().attr("rel"));
    });
    console.log(ele_selector);
    return dialog.dialog();
};

loadPage = function(paginator) {
    var cat, holder, ipp, page, payload, url;
    page = $(paginator).pagination('getCurrentPage');
    cat = $(paginator).attr('cat');
    ipp = $(paginator).attr('ipp');
    url = root_api_url + 'news';
    payload = {
        page: page,
        page_size: ipp
    };
    if ((cat != null) && cat.length > 0) {
        payload['cat'] = cat;
    }
    holder = $(paginator).siblings('.news-list:not(.featured-news)');
    holder.addClass('waiting');
    return $.ajax({
        url: url,
        data: payload,
        context: {
            page: page,
            paginator: paginator,
            holder: holder
        },
        complete: function() {
            return $(this.holder).removeClass('waiting');
        },
        success: function(data) {
            return parseNewsList(data, this.holder, this.paginator, this.page);
        }
    });
};

parseNewsList = function(data, holder, paginator, page) {
    var e, ele, j, len, ref1, results1;
    $(paginator).attr('page', page);
    $(paginator).attr('count', data.count);
    paginate(paginator);
    $(holder).empty();
    ref1 = data.results;
    results1 = [];
    for (j = 0, len = ref1.length; j < len; j++) {
        e = ref1[j];
        ele = createNewsListItem(e);
        results1.push(ele.appendTo($(holder)));
    }
    return results1;
};

parseDate = function(str) {
    var d;
    d = new Date(str);
    return str = d.getDate() + '/' + d.getMonth() + '/' + d.getFullYear();
};

createNewsListItem = function(e) {
    var im;
    if ((e.image != null) && $.trim(e.image).length > 0) {
        im = e.image;
        if (im.indexOf('uploads') === 0) {
            im = '/public/' + im;
        }
        return $("<div>").html("<div class=\"list-item news\">\n    <div class=\"row\">\n        <div class=\"col-lg-3 col-md-3 col-nm-4 col-sm-3 col-xs-3\">\n            <a href=\"/tin_tuc/" + e.url_id + ".html\" class=\"featured-image\">\n                <div><img src=\"" + im + "\" /></div>\n            </a>\n        </div>\n        <div class=\"col-lg-9 col-md-9 col-nm-8 col-sm-9 col-xs-9\">\n          <a href=\"/tin_tuc/" + e.url_id + ".html\"><h4 style=\"line-height: 1.4;\">" + e.title + "</h4></a>\n          <div class=\"text\">" + e.summary + "</div>\n          <div style=\"text-align: right; color: #999; font-size: 10px;\"><i class=\"fa fa-eye\"></i> " + e.read_count + "</div>\n        </div>\n    </div>\n</div>");
    } else {
        return $("<div>").html("<div class=\"list-item news\">\n    <div class=\"row\">\n        <div class=\"col-lg-12 col-md-12 col-nm-12 col-sm-12 col-xs-12\">\n          <a href=\"/tin_tuc/" + e.url_id + ".html\"><h4 style=\"line-height: 1.4;\">" + e.title + "</h4></a>\n          <div class=\"text\">" + e.summary + "</div>\n          <div style=\"text-align: right; color: #999; font-size: 10px;\"><i class=\"fa fa-eye\"></i> " + e.read_count + "</div>\n        </div>\n    </div>\n</div>");
    }
};

processCitation = function() {
    var biblio, holder;
    biblio = {};
    $('ol.biblio li').each(function(i) {
        return biblio[$(this).attr('rel')] = {
            index: i + 1,
            author: $(this).children('.author').html(),
            link: $(this).children('a').attr('href'),
            title: $(this).children('em').html(),
            summary: $(this).children('.summary').html()
        };
    });
    holder = $('.text');
    return holder.find('code').each(function() {
        var author, c, summary, title;
        if ($(this).attr('type') === 'link') {
            $(this).wrap("<a>");
            return;
        }
        c = $(this).text();
        if (!(c.indexOf('[cite:') >= 0)) {
            return;
        }
        c = c.substr(6, c.length - 7);
        if (biblio[c] == null) {
            return;
        }
        $(this).html("[" + biblio[c].index + "]");
        $(this).attr('rel', c);
        $(this).addClass('citation');
        author = biblio[c].author;
        if (author == null) {
            author = "";
        }
        title = biblio[c].title;
        if (title == null) {
            title = "";
        }
        summary = biblio[c].summary;
        if (summary == null) {
            summary = "";
        }
        $(this).attr({
            'href': biblio[c].link
        });
        $(this).attr({
            'title': title
        });
        $(this).attr({
            'author': author
        });
        $(this).tooltip({
            content: "<div class=\"author\">" + author + "</div>\n<div class=\"title\">" + title + "</div>\n<div class=\"summary\">" + summary + "</div>"
        });
        if (biblio[c].link != null) {
            return $(this).click(function() {
                return window.open(biblio[c].link, '_blank');
            });
        }
    });
};

paginate = function(ele) {
    var count, end, holder, ipp, j, len, more_next, more_prev, nbpages, p, pag, page, pages, results1, start;
    ipp = ($(ele).attr('ipp') != null) && $(ele).attr('ipp').length > 0 ? parseInt($(ele).attr('ipp')) : 12;
    page = ($(ele).attr('page') != null) && $(ele).attr('page').length > 0 ? parseInt($(ele).attr('page')) : 0;
    count = ($(ele).attr('count') != null) && $(ele).attr('count').length > 0 ? parseInt($(ele).attr('count')) : 0;
    if ((ipp != null) && (count != null)) {
        nbpages = Math.ceil(count / ipp);
    }
    if (nbpages == null) {
        nbpages = 0;
    }
    if (page == null) {
        page = 1;
    }
    if (nbpages < 2) {
        $(ele).fadeOut('fast');
        return;
    } else {
        $(ele).fadeIn('fast');
    }
    $(ele).pagination({
        items: count,
        itemsOnPage: ipp,
        currentPage: page,
        edges: 1,
        hrefTextPrefix: "#",
        onPageClick: function(page, event) {
            trigger_change($(ele));
            return $.Event(event).stopPropagation();
        }
    });
    return;
    more_prev = nbpages > 7 && page > 5;
    more_next = nbpages > 7 && page < 3;
    start = more_prev ? page - 2 : 1;
    end = more_next ? page + 2 : nbpages;
    pages = (function() {
        var j, ref1, ref2, results1;
        results1 = [];
        for (p = j = ref1 = start, ref2 = end; ref1 <= ref2 ? j <= ref2 : j >= ref2; p = ref1 <= ref2 ? ++j : --j) {
            results1.push(p);
        }
        return results1;
    })();
    $(ele).empty();
    holder = $('<div>', {
        "class": 'wrapper'
    }).appendTo($(ele));
    results1 = [];
    for (j = 0, len = pages.length; j < len; j++) {
        p = pages[j];
        pag = $("<span>", {
            rel: p,
            text: p,
            "class": 'page'
        }).appendTo(holder);
        if (p === page) {
            pag.addClass('selected');
        }
        results1.push(pag.click(function() {
            var paginator;
            paginator = $(this).closest('.paginator');
            paginator.attr('page', $(this).attr('rel'));
            trigger_change(paginator);
            return paginate(paginator);
        }));
    }
    return results1;
};

$(document).ready(function() {
    return $('.paginator').each(function() {
        return paginate(this);
    });
});

simpleRefresh = function(paginator, holder) {
    var ipp, page, payload, url;
    page = $(paginator).pagination('getCurrentPage');
    ipp = $(paginator).attr('ipp');
    url = root_api_url + $(paginator).attr('url');
    payload = {
        page: page,
        page_size: ipp
    };
    if (holder.closest('.full-width-content').size() > 0) {
        holder.closest('.full-width-content').addClass('waiting');
    } else {
        holder.parent().addClass('waiting');
    }
    return $.ajax({
        url: url,
        data: payload,
        context: {
            page: page,
            paginator: paginator,
            holder: holder
        },
        complete: function() {
            if ($(this.holder).closest('.full-width-content').size() > 0) {
                return $(this.holder).closest('.full-width-content').removeClass('waiting');
            } else {
                return $(this.holder).parent().removeClass('waiting');
            }
        },
        success: function(data) {
            return parseSimpleRelated(data, this.holder, this.paginator, this.page);
        }
    });
};

capitalize = function(str) {
    return str.charAt(0).toUpperCase() + str.substring(1).toLowerCase();
};

createSimpleItem = function(item, doc_type, type) {
    var c, composition, i, j, labeler, len, raw, ref1, str, title;
    if (!((type != null) && type === 'full')) {
        title = item.title;
        if (title == null) {
            title = item.title_en;
        }
        return $("<div>", {
            "class": "col-lg-3 col-md-4 col-nm-4 col-sm-6 col-xs-12"
        }).html("<a href=\"" + root_url + "/" + doc_type + "/" + item.id + "\">" + title + "</a>");
    }
    switch (doc_type) {
        case 'biet_duoc':
            composition = [];
            ref1 = item.bietduochoatchat_set;
            for (i = j = 0, len = ref1.length; j < len; i = ++j) {
                c = ref1[i];
                if (!(i < 5)) {
                    continue;
                }
                str = "" + (capitalize(c.hoatchat.PT));
                if (c.ham_luong != null) {
                    str += ": " + c.ham_luong;
                    if (c.don_vi != null) {
                        str += " " + c.don_vi;
                    }
                }
                composition.push(str);
            }
            labeler = '';
            if ((item.cty_dannhan != null) && (item.cty_dannhan.title != null)) {
                labeler = item.cty_dannhan.title;
            } else if (item.raw != null) {
                raw = $.parseJSON(item.raw);
                if (raw.cty_dannhan) {
                    labeler = raw.cty_dannhan;
                }
            }
            return $("<div>", {
                "class": "col-lg-4 col-md-6 col-nm-6 col-sm-6 col-xs-12"
            }).html("<a href=\"/biet_duoc/" + item.id + "\">\n    <div class=\"related-item\">\n        <div class=\"title\">\n            " + (capitalize(item.title)) + "\n            <span class=\"sub-title\">(" + labeler + ")</span>\n        </div>\n        <div class=\"composition\">" + (composition.join('; ')) + "\n        </div>\n    </div>\n</a>");
    }
};

parseSimpleRelated = function(data, holder, paginator, page) {
    var e, ele, i, j, len, ref1, results1;
    $(paginator).attr('page', page);
    $(paginator).attr('count', data.count);
    paginate(paginator);
    $(holder).children().slideUp('fast', function() {
        return $(this).remove();
    });
    ref1 = data.results;
    results1 = [];
    for (i = j = 0, len = ref1.length; j < len; i = ++j) {
        e = ref1[i];
        ele = createSimpleItem(e, $(paginator).attr('doctype'), $(paginator).attr('type'));
        ele.hide().appendTo($(holder));
        ele.slideDown('fast');
        if ($(paginator).attr('type') === 'full') {
            if ((1 + i) % 6 === 0) {
                results1.push($("<div>", {
                    "class": "clearfix"
                }).appendTo($(holder)));
            } else if ((1 + i) % 3 === 0) {
                results1.push($("<div>", {
                    "class": "clearfix hidden-sm hidden-md"
                }).appendTo($(holder)));
            } else if ((1 + i) % 2 === 0) {
                results1.push($("<div>", {
                    "class": "clearfix hidden-lg"
                }).appendTo($(holder)));
            } else {
                results1.push(void 0);
            }
        } else {
            if ((1 + i) % 4 === 0) {
                results1.push($("<div>", {
                    "class": "clearfix hidden-md"
                }).appendTo($(holder)));
            } else if ((1 + i) % 3 === 0) {
                results1.push($("<div>", {
                    "class": "clearfix hidden-sm hidden-lg"
                }).appendTo($(holder)));
            } else if ((1 + i) % 2 === 0) {
                results1.push($("<div>", {
                    "class": "clearfix hidden-md hidden-lg"
                }).appendTo($(holder)));
            } else {
                results1.push(void 0);
            }
        }
    }
    return results1;
};

cookie_getSavedPrescription = function() {
    var pres;
    pres = Cookies.getJSON('prescription');
    if (pres == null) {
        pres = {
            bietduoc: [],
            hoatchat: []
        };
    }
    return pres;
};

cookie_savePres = function(pres) {
    return Cookies.set('prescription', pres, {
        'path': '/'
    });
};

cookie_clearSaved = function() {
    Cookies.remove('prescription', {
        'path': '/'
    });
    cookie_checkSaved();
    return cookie_showSaved();
};

cookie_checkSaved = function() {
    var currents, i, j, len, len1, pres, q, ref1, ref2;
    pres = cookie_getSavedPrescription();
    currents = {
        bietduoc: [],
        hoatchat: []
    };
    ref1 = pres.bietduoc;
    for (j = 0, len = ref1.length; j < len; j++) {
        i = ref1[j];
        currents.bietduoc.push(i.id);
    }
    ref2 = pres.hoatchat;
    for (q = 0, len1 = ref2.length; q < len1; q++) {
        i = ref2[q];
        currents.hoatchat.push(i.id);
    }
    return $(".cookie-enabled").each(function() {
        var t;
        t = $(this).attr('rev');
        i = $(this).attr('rel');
        if (indexOf.call(currents[t], i) >= 0) {
            return $(this).addClass('inactive');
        } else {
            return $(this).removeClass('inactive');
        }
    });
};

cookie_showSaved = function() {
    var bd, holder, j, len, pres, ref1, results1, w;
    holder = $(".modal.prescription .prescription-list");
    holder.empty();
    pres = cookie_getSavedPrescription();
    ref1 = pres.bietduoc;
    results1 = [];
    for (j = 0, len = ref1.length; j < len; j++) {
        bd = ref1[j];
        w = $("<div>").css("padding-right", "30px");
        w.css("position", "relative");
        w.html("<a href=\"/biet_duoc/" + bd.id + "\" class=\"related-item bietduoc\">\n<div class='title' style=\"position: relative;\">\n  " + bd.title + "\n</div>\n</a>\n  <span onclick=\"cookie_delPresItem(this,event)\" class=\"icon cancel clickable\" style=\"position: absolute; right: 2px; top: 6px;\" rel=\"" + bd.id + "\" rev=\"bietduoc\"></span>");
        results1.push(w.appendTo(holder));
    }
    return results1;
};

$(document).ready(function() {
    cookie_checkSaved();
    return cookie_showSaved();
});

cookie_addPresItem = function(ele, event) {
    var currents, i, id, pres, t;
    $.Event(event).stopPropagation();
    if ($(ele).hasClass('inactive')) {
        return;
    }
    t = $(ele).attr('rev');
    id = $(ele).attr('rel');
    if (!((t != null) && (id != null))) {
        return;
    }
    pres = cookie_getSavedPrescription();
    currents = [];
    for (i in pres[t]) {
        currents.push(i.id);
    }
    if (indexOf.call(currents, id) < 0) {
        pres[t].push({
            id: id,
            title: $(ele).siblings('.title').html()
        });
    }
    cookie_savePres(pres);
    $(ele).addClass('inactive');
    cookie_showSaved();
    return showPrescription();
};

cookie_delPresItem = function(ele, event) {
    var b, found, id, j, len, pres, ref1, t;
    $.Event(event).stopPropagation();
    $(ele).parent().hide('fast', function() {
        return $(this).remove();
    });
    t = $(ele).attr('rev');
    id = $(ele).attr('rel');
    pres = cookie_getSavedPrescription();
    ref1 = pres[t];
    for (j = 0, len = ref1.length; j < len; j++) {
        b = ref1[j];
        if (b.id === id) {
            found = b;
        }
    }
    if (found != null) {
        pres[t].pop(found);
    }
    cookie_savePres(pres);
    return cookie_checkSaved();
};

showPrescription = function() {
    return $('.modal.prescription').show().animate({
        right: '0px'
    });
};

cookie_check_interaction = function() {
    var currents, i, j, len, len1, params, pres, q, ref1, ref2, url, url_param;
    pres = cookie_getSavedPrescription();
    currents = {
        bietduoc: [],
        hoatchat: []
    };
    ref1 = pres.bietduoc;
    for (j = 0, len = ref1.length; j < len; j++) {
        i = ref1[j];
        currents.bietduoc.push(i.id);
    }
    ref2 = pres.hoatchat;
    for (q = 0, len1 = ref2.length; q < len1; q++) {
        i = ref2[q];
        currents.hoatchat.push(i.id);
    }
    params = {};
    if (currents.bietduoc.length > 0) {
        params['bd'] = currents.bietduoc.join(',');
    }
    if (currents.hoatchat.length > 0) {
        params['hc'] = currents.hoatchat.join(',');
    }
    url_param = $.param(params);
    url = "/tuong_tac";
    if ((url_param != null) && url_param.length > 0) {
        url += "?" + url_param;
    }
    return window.location.href = url;
};

validateDate = function(str) {
    var current, d, delims, dmy, error1, error2, error3, j, len, m, ret, y;
    str = str.replace(' ', '');
    delims = ['/', '-', ',', ':'];
    d = null;
    for (j = 0, len = delims.length; j < len; j++) {
        d = delims[j];
        if (str.indexOf(d) >= 0) {
            break;
        }
    }
    if (d == null) {
        return null;
    }
    dmy = str.split(d);
    if (dmy.length > 3 || dmy.length < 1) {
        return null;
    }
    d = null;
    m = null;
    if (dmy.length === 3) {
        try {
            d = parseInt(dmy[0]);
            m = parseInt(dmy[1]);
            y = parseInt(dmy[2]);
        } catch (error1) {
            return null;
        }
    }
    if (dmy.length === 2) {
        try {
            m = parseInt(dmy[0]);
            y = parseInt(dmy[1]);
        } catch (error2) {
            return null;
        }
    }
    if (dmy.length === 1) {
        try {
            y = parseInt(dmy[0]);
        } catch (error3) {
            return null;
        }
    }
    if (!((y != null) && y !== NaN)) {
        return null;
    }
    if (dmy.length > 1 && ((m == null) || m === NaN)) {
        return null;
    }
    if (dmy.length > 2 && ((d == null) || d === NaN)) {
        return null;
    }
    if (dmy.length > 2) {
        if (d < 1 || d > 31) {
            return;
        }
    }
    if (dmy.length > 1 && (m < 1 || m > 12)) {
        return null;
    }
    current = new Date();
    if (y < 1 || y > current.getFullYear()) {
        return null;
    }
    if (y > 100 && y < 1900) {
        return null;
    }
    if (y < (current.getFullYear() - 2000)) {
        y = y + 2000;
    } else if (y < 100) {
        y = y + 1900;
    }
    ret = y;
    if (dmy.length > 1) {
        ret = m + '/' + ret;
    }
    if (dmy.length > 2) {
        ret = d + '/' + ret;
    }
    return ret;
};

on_going_prescription = {};

updateDiseaseList = function(ele) {
    var holder, txt;
    if (ele == null) {
        return;
    }
    txt = $.trim($(ele).val());
    holder = $(ele).siblings('#disease-list');
    if (txt.length < 1) {
        holder.empty();
        return;
    }
    if (!(holder.size() > 0)) {
        return;
    }
    $(ele).removeClass('error');
    return $.ajax({
        url: root_api_url + 'diseases/',
        type: 'GET',
        data: {
            txt: txt
        },
        context: {
            txt: txt,
            holder: holder
        },
        success: function(data) {
            var d, j, len, results1, w;
            this.holder.empty();
            results1 = [];
            for (j = 0, len = data.length; j < len; j++) {
                d = data[j];
                w = $("<div>", {
                    rel: d.pk
                }).appendTo(this.holder);
                w.css({
                    'margin-bottom': '8px',
                    'color': '#333'
                });
                results1.push(w.html("<span class=\"icon cancel clickable\" onclick=\"$(this).parent().remove();\"></span><b>" + d.pk + "</b>: <span style=\"color: #844; font-size: 0.8em;\">" + d.title + "</span>"));
            }
            return results1;
        }
    });
};

checkMultiplePrescriptions = function() {
    var holder, pres_ids;
    holder = $('#previous-prescription');
    pres_ids = [];
    holder.find('input:checked').each(function() {
        return pres_ids.push($(this).val());
    });
    if (!(pres_ids.length > 0)) {
        return;
    }
    $('#prescription').children('.simple-form').addClass('waiting');
    return $.ajax({
        url: root_api_url + 'prescriptions/' + pres_ids[0] + '/check/?cross=' + pres_ids.slice(1).join(','),
        cache: false,
        success: function(data) {
            return parseCheckingResult(data);
        }
    });
};

parseCheckingResult = function(data) {
    var aa, ab, ac, ad, ae, af, allergies, c, colors, d, desease, f, general_extra_info, holder, i, interaction, interactions, interactions_number, j, len, len1, len10, len2, len3, len4, len5, len6, len7, len8, len9, list, p, params, pres_ids, q, ref1, ref10, ref11, ref12, ref13, ref14, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, t, u, x, z;
    $('#prescription-progress').children('[href=#prescription]').addClass('done');
    $('#prescription .simple-form').removeClass('waiting');
    $('#result').fadeIn('fast');
    $('#prescription-progress').children().removeClass('selected').filter('[href=#result]').addClass('active').addClass('selected');
    $('#prescription-progress').children('[href=#output]').addClass('active');
    holder = $('#result').empty();
    colors = ['#03a050', '#784ba0', '#f63a48', '#f77800', ''];
    pres_ids = [];
    ref1 = data.prescriptions;
    for (j = 0, len = ref1.length; j < len; j++) {
        p = ref1[j];
        if (parseInt(p.id) !== parseInt(data.id)) {
            pres_ids.push(p.id);
        }
    }
    params = "";
    if (pres_ids.length > 0) {
        params += "?cross=" + pres_ids.join(',');
    }

    /*
    holder.append """
        <div class="section-header allergy inactive">Đơn thuốc (#{data.prescriptions.length})</div>
    """
  
    pres = $("<div>", {class: 'prescription-list related-item-list'}).appendTo holder
    for p in data.prescriptions
        template_previous_prescription(p,false).appendTo pres
     */
    if (data.indications != null) {
        if (data.indications.I != null) {
            c = 0;
            ref2 = data.indications.I;
            for (i in ref2) {
                d = ref2[i];
                c++;
            }
            if (c > 0) {
                holder.append("<div class=\"section-header\" style=\"background-color: darkgreen;\"><span class=\"icon checked-mark\"></span> Phù hợp chẩn đoán</div>");
                list = $("<div>", {
                    "class": 'related-item-list'
                }).appendTo(holder);
                ref3 = data.indications.I;
                for (i in ref3) {
                    d = ref3[i];
                    if (d.diseases != null) {
                        list.append("<div class=\"related-item\"><span class=\"icon pills med\"></span> <span class='title'>" + d.title + "</span> chỉ định cho bệnh <code>" + d.diseases[0].id + "</code> " + d.diseases[0].title + "</div>");
                    }
                }
            }
        }
        if (data.indications.C != null) {
            c = 0;
            ref4 = data.indications.C;
            for (i in ref4) {
                d = ref4[i];
                c++;
            }
            if (c > 0) {
                holder.append("<div class=\"section-header allergy\"><span class=\"icon severe_reaction\"></span> Chống chỉ định</div>");
                list = $("<div>", {
                    "class": 'related-item-list'
                }).appendTo(holder);
                ref5 = data.indications.C;
                for (i in ref5) {
                    d = ref5[i];
                    if (d.diseases != null) {
                        ref6 = d.diseases;
                        for (q = 0, len1 = ref6.length; q < len1; q++) {
                            desease = ref6[q];
                            list.append("<div class=\"related-item\"><span class=\"icon pills med\"></span> <span class='title'>" + d.title + "</span> chống chỉ định bệnh <code>" + desease.id + "</code> " + desease.title + "</div>");
                        }
                    } else if (d.reason != null) {
                        list.append("<div class=\"related-item\"><span class=\"icon pills med\"></span> <span class='title'>" + d.title + "</span> chống chỉ định " + d.reason + "</div>");
                    }
                }
            }
        }
    }
    if (data.drugInducDeseases != null) {
        c = 0;
        ref7 = data.drugInducDeseases;
        for (i in ref7) {
            d = ref7[i];
            c++;
        }
        if (c > 0) {
            holder.append("<div onclick=\"$('#detail-inceduct').toggle('fast'); $(this).toggleClass('detailed');\" class=\"section-header youth clickable\" style=\"background-color: darkgreen;\"><span class=\"icon checked-mark\"></span> Bệnh gây ra bởi thuốc</div>");
            list = $("<div>", {
                id: "detail-inceduct",
                "class": 'related-item-list'
            }).appendTo(holder);
            ref8 = data.drugInducDeseases;
            for (i in ref8) {
                d = ref8[i];
                if (d.diseases != null) {
                    ref9 = d.diseases;
                    for (u = 0, len2 = ref9.length; u < len2; u++) {
                        desease = ref9[u];
                        list.append("<div class=\"related-item\"><span class=\"icon pills med\"></span> <span class='title'>" + d.title + "</span> có thể gây ra bệnh <code>" + desease.idc + "</code> " + desease.title + " với tỉ lệ <code>" + desease.ti_le + "</code></div>");
                    }
                }
            }
        }
    }
    allergies = data.du != null;
    if (!allergies) {
        allergies = data.allergies;
    }
    if ((allergies != null) && allergies.length > 0) {
        holder.append("<div class=\"section-header allergy\">Dị ứng (" + allergies.length + ")</div>");
        list = $("<div>", {
            "class": 'related-item-list'
        }).appendTo(holder);
        for (x = 0, len3 = allergies.length; x < len3; x++) {
            d = allergies[x];
            if (d.a === d.b) {
                list.append("<div class=\"related-item\">\n    <span class=\"icon pills med\"></span> <span class='title'>" + d.title + "</span>\n</div>");
            } else {
                if (d.type === 'bietduoc') {
                    list.append("<div class=\"related-item\">\n    <span class=\"icon pills med\"></span> <span class='title'>" + d.title + " ( " + d.b_unii + " )</span>\n    &nbsp;&nbsp;dị ứng chéo với&nbsp;&nbsp;\n    <span class=\"icon pills med\"></span><span class='title'>" + d.a_name + " ( " + d.a_unii + " ) </span>\n</div>");
                } else {
                    list.append("<div class=\"related-item\">\n    <span class=\"icon pills med\"></span> <span class='title'>" + d.title + "</span>\n    dị ứng chéo với <span class=\"icon unii med\"></span> <span class='title'>" + d.a_name + "</span>\n</div>");
                }
            }
        }
    } else {
        holder.append("<div class=\"section-header allergy inactive\">Dị ứng (0)</div>");
    }
    if (((data.duplications != null) && data.duplications.length > 0) || ((data.group_duplications != null) && data.group_duplications.length > 0)) {
        c = 0;
        if (data.duplications != null) {
            c += data.duplications.length;
        }
        if (data.group_duplications != null) {
            c += data.group_duplications.length;
        }
        holder.append("<div class=\"section-header duplication\">Trùng lặp (" + c + ")</div>");
        list = $("<div>", {
            "class": 'duplication_list'
        }).appendTo(holder);
        ref10 = data.duplications;
        for (z = 0, len4 = ref10.length; z < len4; z++) {
            d = ref10[z];
            list.append(template_duplication(d));
        }
        if ((data.group_duplications != null) && data.group_duplications.length > 0) {
            list.append("<div class=\"header2\">Trùng lặp nhóm hoạt chất</div>");
            ref11 = data.group_duplications;
            for (aa = 0, len5 = ref11.length; aa < len5; aa++) {
                d = ref11[aa];
                list.append(template_duplication(d), data.hoatchat_name);
            }
        }
    } else {
        holder.append("<div class=\"section-header duplication inactive\">Trùng lặp (0)</div>");
    }
    interactions = data.drug_interactions;
    interactions_number = 0;
    if (interactions == null) {
        interactions = data.interactions;
    }
    if ((interactions != null) && interactions.length > 0) {
        for (ab = 0, len6 = interactions.length; ab < len6; ab++) {
            interaction = interactions[ab];
            interactions_number += interaction.reactor_A.length * interaction.reactor_B.length;
        }
        holder.append("<div class=\"section-header interaction\">" + (ttt_nghiem_trong(data.max_interaction, false)) + "Tương tác thuốc - thuốc (" + interactions_number + ")</div>");
        list = $("<div>", {
            "class": "interaction-list"
        }).appendTo(holder);
        list.append("<div class=\"row\" style=\"margin: 10px 0; font-weight: 500;\">\n    <div class=\"col-xs-12 col-sm-6 col-md-6 col-lg-6 name\">Cặp tương tác</div>\n    <div class=\"col-md-2 col-lg-2 hidden-xs hidden-sm\">Nghiêm trọng</div>\n    <div class=\"col-sm-6 col-md-4 col-lg-4 hidden-xs\">Tác động</div>\n</div>");
        for (ac = 0, len7 = interactions.length; ac < len7; ac++) {
            d = interactions[ac];
            list.append(template_drug_interaction(d, data.hoatchat_name));
        }
    } else {
        holder.append("<div class=\"section-header interaction inactive\">Tương tác thuốc - thuốc (0)</div>");
    }
    if ((data.thuocla != null) && data.thuocla.length > 0) {
        holder.append("<div id=\"header-tobaco\" onclick=\"$('#detail-tobaco').toggle('fast'); $(this).toggleClass('detailed');\" class=\"section-header youth clickable\" style=\"background-color: #a43;\">Lưu ý cho người hút thuốc lá </div>");
        list = $("<div>", {
            id: "detail-tobaco",
            "class": 'related-item-list'
        }).appendTo(holder);
        list.hide();
        ref12 = data.thuocla;
        for (ad = 0, len8 = ref12.length; ad < len8; ad++) {
            d = ref12[ad];
            list.append("<div class=\"header1\" style=\"margin-top: 20px;\">Hoạt chất " + (d.title.toUpperCase()) + "</div>");
            if ((d.co_che != null) && d.co_che.length > 0) {
                list.append("<div class=\"header2\">Cơ chế</div><div>" + d.co_che + "</div>");
            }
            if ((d.tac_dong != null) && d.tac_dong.length > 0) {
                list.append("<div class=\"header2\">Tác động</div>\n" + d.tac_dong);
            }
        }
    }
    general_extra_info = {
        tuong_tac_thuc_pham: 'Tương tác thực phẩm',
        tuong_tac_xet_nghiem: 'Tương tác xét nghiệm',
        tre_em: 'Lưu ý cho trẻ em',
        cho_bu: 'Lưu ý cho phụ nữ cho con bú',
        suy_gan: 'Lưu ý cho bệnh nhân suy gan',
        suy_than: 'Lưu ý cho bệnh nhân suy thận'
    };
    for (f in general_extra_info) {
        t = general_extra_info[f];
        if ((data[f] != null) && data[f].length > 0) {
            holder.append("<div id=\"header-" + f + "\" onclick=\"$('#detail-" + f + "').toggle('fast'); $(this).toggleClass('detailed');\" class=\"section-header youth clickable\" style=\"background-color: #2a3;\">" + general_extra_info[f] + "</div>");
            list = $("<div>", {
                id: "detail-" + f,
                "class": 'related-item-list'
            }).appendTo(holder);
            list.hide();
            ref13 = data[f];
            for (ae = 0, len9 = ref13.length; ae < len9; ae++) {
                d = ref13[ae];
                list.append("<div class=\"header1\" style=\"margin-top: 20px;\">Hoạt chất " + (d.title.toUpperCase()) + "</div>\n" + d.info);
            }
        }
    }
    if ((data.mangthai != null) && data.mangthai.length > 0) {
        holder.append("<div id=\"header-mangthai\" onclick=\"$('#detail-mangthai').toggle('fast'); $(this).toggleClass('detailed');\" class=\"section-header youth clickable\" style=\"background-color: #23a;\">Lưu ý cho phụ nữ mang thai</div>");
        list = $("<div>", {
            id: "detail-mangthai",
            "class": 'related-item-list'
        }).appendTo(holder);
        list.hide();
        ref14 = data.mangthai;
        for (af = 0, len10 = ref14.length; af < len10; af++) {
            d = ref14[af];
            list.append("<div class=\"header1\" style=\"margin-top: 20px;\">Hoạt chất " + (d.title.toUpperCase()) + "</div>");
            if ((d.yeu_to_nguy_co != null) && d.yeu_to_nguy_co.length > 0) {
                list.append("<div class=\"header2\">Yếu tố nguy cơ: " + d.yeu_to_nguy_co + "</div>");
            }
            if ((d.khuyencao_mangthai != null) && d.khuyencao_mangthai.length > 0) {
                list.append("<div class=\"header2\">Khuyến cáo mang thai</div>\n" + d.khuyencao_mangthai);
            }
            if ((d.khuyencao_baothai != null) && d.khuyencao_baothai.length > 0) {
                list.append("<div class=\"header2\">Khuyến cáo tác động bào thai</div>\n" + d.khuyencao_baothai);
            }
            if ((d.ba_thang_dau != null) && d.ba_thang_dau.length > 0) {
                list.append("<div class=\"header2\">Lưu ý 3 tháng đầu</div>\n" + d.ba_thang_dau);
            }
            if ((d.ba_thang_giua != null) && d.ba_thang_giua.length > 0) {
                list.append("<div class=\"header2\">Lưu ý 3 tháng giữa</div>\n" + d.ba_thang_giua);
            }
            if ((d.ba_thang_cuoi != null) && d.ba_thang_cuoi.length > 0) {
                list.append("<div class=\"header2\">Lưu ý 3 tháng cuối</div>\n" + d.ba_thang_cuoi);
            }
        }
    }
    return $('body,html').animate({
        scrollTop: $('#result').offset().top
    }, 400);
};

navDrugPresc = function(ele, event) {
    var rel;
    if (event.which === 39) {
        $(ele).parent().next().children().focus();
        $.Event(event).preventDefault();
    }
    if (event.which === 37) {
        $(ele).parent().prev().children().focus();
        $.Event(event).preventDefault();
    }
    if (event.which === 40) {
        rel = $(ele).attr('rel');
        $(ele).closest('.related-item.bietduoc').next().find("input[rel=" + rel + "]").focus();
        $.Event(event).preventDefault();
    }
    if (event.which === 38) {
        rel = $(ele).attr('rel');
        $(ele).closest('.related-item.bietduoc').prev().find("input[rel=" + rel + "]").focus();
        return $.Event(event).preventDefault();
    }
};

exportDataURL = function(holder) {
    var canvas, canvas2, ctx, ctx2, dropper, filetype, h, img, img_orig, l, scale, t, w;
    dropper = holder.children(".user-avatar.uploading").children("div");
    canvas = document.createElement('canvas');
    filetype = holder.attr("file-type");
    canvas.width = 4 * parseInt(dropper.attr("out-width"));
    canvas.height = 4 * parseInt(dropper.attr("out-height"));
    ctx = canvas.getContext("2d");
    img = dropper.find("img");
    if (img.size() < 1) {
        return "";
    }
    img_orig = img.get(0);
    scale = 100 / holder.children().children('.scale-slider').slider('value');
    l = img.position().left * (-scale);
    t = img.position().top * (-scale);
    w = dropper.width() * scale;
    h = dropper.height() * scale;
    t = Math.round(t);
    l = Math.round(l);
    w = Math.round(w);
    h = Math.round(h);
    if (t < 0) {
        t = 0;
    }
    if (l < 0) {
        l = 0;
    }
    if ((w + l) > dropper.attr("orig-width")) {
        w = dropper.attr("orig-width") - l;
    }
    if ((h + t) > dropper.attr("orig-height")) {
        h = dropper.attr("orig-height") - t;
    }
    ctx.drawImage(img_orig, l, t, w, h, 0, 0, canvas.width, canvas.height);
    canvas2 = document.createElement('canvas');
    canvas2.width = 2 * parseInt(dropper.attr("out-width"));
    canvas2.height = 2 * parseInt(dropper.attr("out-height"));
    ctx2 = canvas2.getContext("2d");
    ctx2.drawImage(canvas, 0, 0, canvas.width, canvas.height, 0, 0, canvas2.width, canvas2.height);
    if (filetype != null) {
        return canvas2.toDataURL(filetype);
    } else {
        return canvas2.toDataURL();
    }
};

loadLocalFile = function(holder, file) {
    var reader;
    reader = new FileReader();
    reader.onload = function(event) {
        var bin, img;
        bin = this.result;
        img = new Image();
        img.onload = function(e) {
            var ele, imgholder, sc, sc_h, sc_w, scale;
            if (img.width < holder.width() || img.height < holder.width()) {
                alert('Ảnh gốc phải có kích thước tối thiểu là ' + holder.width() + 'x' + holder.width() + '!');
                return;
            }
            holder.children().hide().filter(".uploading").show();
            imgholder = holder.children(".user-avatar.uploading").children("div");
            imgholder.children("img").remove();
            imgholder.attr("orig-width", img.width);
            imgholder.attr("orig-height", img.height);
            ele = $("<img>", {
                "src": bin
            }).appendTo(imgholder);
            ele.draggable({
                cursor: "pointer",
                stop: function(event, ui) {
                    var left, pull_back, top;
                    top = ui.position.top;
                    left = ui.position.left;
                    pull_back = false;
                    if (ui.position.top > 0) {
                        top = 0;
                        pull_back = true;
                    } else if (ui.position.top + ui.helper.height() < ui.helper.parent().height()) {
                        top = ui.helper.parent().height() - ui.helper.height();
                        pull_back = true;
                    }
                    if (ui.position.left > 0) {
                        left = 0;
                        pull_back = true;
                    } else if (ui.position.left + ui.helper.width() < ui.helper.parent().width()) {
                        left = ui.helper.parent().width() - ui.helper.width();
                        pull_back = true;
                    }
                    if (pull_back) {
                        return ui.helper.animate({
                            top: top,
                            left: left
                        }, 200);
                    }
                }
            });
            sc_w = imgholder.innerWidth() / img.width;
            sc_h = imgholder.innerHeight() / img.height;
            sc = sc_w > sc_h ? sc_w : sc_h;
            ele.width(img.width * sc);
            ele.height(img.height * sc);
            ele.css("max-width", img.width);
            scale = imgholder.closest('.avatar-wrapper').find('.scale-slider');
            scale.slider("option", "max", 100);
            scale.slider("option", "min", sc * 100);
            scale.slider("option", "value", sc * 100);
            return scale.removeClass("ui-corner-all");
        };
        return img.src = bin;
    };
    return reader.readAsDataURL(file);
};

handleOpenAvatarFile = function(event, ele) {
    var file, files, holder;
    holder = $(ele).closest('.avatar-wrapper');
    files = event.target.files;
    if (files.length < 1) {
        return;
    }
    file = files[0];
    return loadLocalFile(holder, file);
};

cancelUploadAvatar = function(holder) {
    var btnholder, imgholder;
    holder.children().show().filter(".uploading").hide();
    imgholder = holder.children(".user-avatar.uploading");
    imgholder.find("img").remove();
    btnholder = holder.find(".btn-add-avatar:not(.uploading)");
    btnholder.children("input").remove();
    return $("<input>", {
        "type": "file",
        "onchange": "handleOpenAvatarFile(event,this)"
    }).hide().appendTo(btnholder);
};

onSaveAvatar = function(holder) {
    var bin, profile;
    profile = $(holder).closest('.form').attr("rel");
    if (profile == null) {
        return;
    }
    bin = exportDataURL(holder);
    if (bin.length < 1) {
        return;
    }
    $.ajax({
        url: root_api_url + "profiles/" + encodeURIComponent(profile) + "/",
        type: "PUT",
        xhrFields: {
            withCredentials: true
        },
        data: {
            avatar: bin
        },
        error: function(req, err, stat) {
            return console.log(err + " : " + stat + " : " + req.responseText);
        }
    });
    $("img.avatar").attr("src", bin);
    $(".user-avatar:not(.uploading)").each(function() {
        $(this).empty();
        return $("<img>", {
            "src": bin,
            "class": "avatar huge"
        }).appendTo($(this));
    });
    return cancelUploadAvatar(holder);
};

$(document).ready(function() {
    return $(".scale-slider").slider({
        change: function(event, ui) {
            var dropper, h, img, l, scale, t, w;
            scale = ui.value;
            dropper = $(this).closest('.avatar-wrapper').children(".user-avatar.uploading").children(".wrapper");
            if (dropper.size() < 1) {
                return;
            }
            img = dropper.children("img");
            if (img.size() < 1) {
                return;
            }
            w = dropper.attr("orig-width") * scale / 100;
            h = dropper.attr("orig-height") * scale / 100;
            l = img.position().left + img.width() / 2 - w / 2;
            t = img.position().top + img.height() / 2 - h / 2;
            if (t > 0) {
                t = 0;
            } else if (t + h < dropper.height()) {
                t = dropper.height() - h;
            }
            if (l > 0) {
                l = 0;
            } else if (l + w < dropper.width()) {
                l = dropper.width() - w;
            }
            return img.animate({
                width: w,
                height: h,
                top: t,
                left: l
            }, 200);
        },
        slide: function(event, ui) {
            var dropper, h, img, l, scale, t, w;
            scale = ui.value;
            dropper = $(this).closest('.avatar-wrapper').children(".user-avatar.uploading").children("div");
            if (dropper.size() < 1) {
                return;
            }
            img = dropper.children("img");
            if (img.size() < 1) {
                return;
            }
            w = dropper.attr("orig-width") * scale / 100;
            h = dropper.attr("orig-height") * scale / 100;
            l = img.position().left + img.width() / 2 - w / 2;
            t = img.position().top + img.height() / 2 - h / 2;
            if (l > 0) {
                l = 0;
            }
            if (t > 0) {
                t = 0;
            }
            return img.css({
                width: w,
                height: h,
                top: t,
                left: l
            });
        }
    });
});

saveProfile = function(form) {
    var f, fields, j, len, payload, profile_id, url, v;
    profile_id = form.attr("rel");
    if (profile_id == null) {
        return;
    }
    form.addClass('waiting');
    url = root_api_url + "profiles/" + profile_id + "/";
    fields = ['lname', 'fname', 'email', 'title', 'mobile', 'occupation', 'company', 'address', 'short_bio'];
    payload = {};
    for (j = 0, len = fields.length; j < len; j++) {
        f = fields[j];
        v = form.find("input[name='" + f + "']").val();
        if (!((v != null) && v.length > 0)) {
            v = "";
        }
        payload[f] = v;
    }
    payload['short_bio'] = tinymce.editors[0].getContent("");
    return $.ajax({
        url: url,
        type: "PATCH",
        data: payload,
        context: {
            form: form
        },
        complete: function() {
            return this.form.removeClass('waiting');
        }
    });
};

changePassword = function(form) {
    var c, data, f, fields, i, is_capital, is_numeric, is_special, j, len, message, q, ref1, special_chars, url, v;
    url = root_api_url + "changePassword";
    fields = ['username', 'password', 'newpassword', 'token', 'repassword'];
    data = {};
    for (j = 0, len = fields.length; j < len; j++) {
        f = fields[j];
        v = form.find("input[name='" + f + "']").val();
        if (!((v != null) && v.length > 0)) {
            v = "";
        }
        data[f] = v;
    }
    message = $(form).find('.error-message');
    message.empty().removeClass('error');
    if (!((data.username != null) && data.username.length > 0)) {
        message.html('Tên đăng nhập chưa có!');
        message.addClass('error');
        return;
    }
    if (!((data.newpassword != null) && data.newpassword.length > 7)) {
        message.html('Mật khẩu phải có ít nhất 8 ký tự!');
        message.addClass('error');
        return;
    }
    if (!((data.repassword != null) && data.newpassword === data.repassword)) {
        message.html('Xác nhận mật khẩu chưa đúng!');
        message.addClass('error');
        return;
    }
    is_capital = false;
    is_numeric = false;
    is_special = false;
    special_chars = '! @ # $ % ^ & * ?';
    for (i = q = 0, ref1 = data.newpassword.length - 1; 0 <= ref1 ? q <= ref1 : q >= ref1; i = 0 <= ref1 ? ++q : --q) {
        c = data.newpassword.charAt(i);
        if ('A' <= c && c <= 'Z') {
            is_capital = true;
        } else if ('0' <= c && c <= '9') {
            is_numeric = true;
        }
    }
    if (!is_capital) {
        message.html('Mật khẩu phải có ít nhất 1 chữ cái viết hoa!');
        message.addClass('error');
        return;
    }
    if (!is_numeric) {
        message.html('Mật khẩu phải có ít nhất 1 chữ số!');
        message.addClass('error');
        return;
    }
    form.addClass('waiting');
    form.find('.error-message').empty();
    return $.ajax({
        url: url,
        type: "POST",
        data: data,
        context: {
            form: form
        },
        complete: function() {
            return this.form.removeClass('waiting');
        },
        success: function() {
            this.form.find('input').val('');
            return this.form.find('.error-message').addClass('success').html("Mật khẩu đã được cập nhật thành công!");
        },
        error: function() {
            return this.form.find('.error-message').html('Tên/mật khẩu không khớp.');
        }
    });
};

clearProfile = function() {
    if (window.localStorage != null) {
        window.localStorage.removeItem('yoauth_profile');
    }
    return Cookies.remove('profile');
};

cacheProfile = function(data) {
    if (window.localStorage != null) {
        return window.localStorage.setItem('yoauth_profile', JSON.stringify(data));
    }
};

loadProfile = function() {
    var txt;
    if (window.localStorage != null) {
        txt = window.localStorage.getItem('yoauth_profile');
        return $.parseJSON(txt);
    }
    return Cookies.getJSON('profile');
};

$(document).ready(function() {
    return initQuagga();
});

initQuagga = function() {
    var holder;
    holder = $('#interactive[rel=quagga]');
    if (holder.size() < 1) {
        return;
    }
    holder.hide();
    $('.quagga-controls').find('#quagga-start').show();
    Quagga.onProcessed(function(result) {
        var drawingCanvas, drawingCtx;
        drawingCtx = Quagga.canvas.ctx.overlay;
        drawingCanvas = Quagga.canvas.dom.overlay;
        if (result) {
            if (result.boxes) {
                drawingCtx.clearRect(0, 0, parseInt(drawingCanvas.getAttribute("width")), parseInt(drawingCanvas.getAttribute("height")));
                result.boxes.filter(function(box) {
                    return box !== result.box;
                }).forEach(function(box) {
                    return Quagga.ImageDebug.drawPath(box, {
                        x: 0,
                        y: 1
                    }, drawingCtx, {
                        color: "green",
                        lineWidth: 2
                    });
                });
            }
            if (result.box) {
                Quagga.ImageDebug.drawPath(result.box, {
                    x: 0,
                    y: 1
                }, drawingCtx, {
                    color: "#00F",
                    lineWidth: 2
                });
            }
            if (result.codeResult && result.codeResult.code) {
                return Quagga.ImageDebug.drawPath(result.line, {
                    x: 'x',
                    y: 'y'
                }, drawingCtx, {
                    color: 'red',
                    lineWidth: 3
                });
            }
        }
    });
    return Quagga.onDetected(function(result) {
        var code;
        code = result.codeResult.code;
        if ($.trim(code).length > 0) {
            stopQuagga();
            $('.barcode-input').val($.trim(code));
            retrievePatientInfo($('.barcode-input'));
            return console.log(result);
        }
    });
};

quagga_inited = false;

startQuagga = function() {
    var drawingCanvas, drawingCtx, readers;
    if (typeof MediaStreamTrack === "undefined" || MediaStreamTrack === null) {
        $('#quagga-rerun').show();
        $('.quagga-controls input').click();
        return;
    }
    $('#interactive[rel=quagga]').show();
    $('.quagga-controls').find('#quagga-start').hide();
    $('.quagga-controls').find('#quagga-stop').show();
    drawingCtx = Quagga.canvas.ctx.overlay;
    drawingCanvas = Quagga.canvas.dom.overlay;
    if ((drawingCtx != null) && (drawingCanvas != null)) {
        drawingCtx.clearRect(0, 0, parseInt(drawingCanvas.getAttribute("width")), parseInt(drawingCanvas.getAttribute("height")));
    }
    if (quagga_inited) {
        Quagga.play();
        setTimeout(function() {
            return Quagga.start();
        }, 100);
        $('#quagga-stop').show();
        return;
    }
    readers = ['code_128_reader', 'ean_reader', 'code_39_reader', 'codabar_reader', 'upc_reader', 'ean_8_reader', 'upc_e_reader'];
    if ((window._config != null) && (window._config.barcode_readers != null)) {
        readers = window._config.barcode_readers;
    }
    return Quagga.init({
        inputStream: {
            type: "LiveStream",
            constraints: {
                width: 640,
                height: 480,
                facing: "environment"
            }
        },
        numOfWorkers: 1,
        decoder: {
            readers: readers
        },
        locator: {
            patchSize: "medium",
            halfSample: true
        },
        locate: true
    }, function() {
        Quagga.start();
        quagga_inited = true;
        return $('#quagga-stop').show();
    });
};

stopQuagga = function() {
    var err, error1;
    try {
        Quagga.pause();
    } catch (error1) {
        err = error1;
    }
    $('.quagga-controls').find('#quagga-start').show();
    return $('.quagga-controls').find('#quagga-stop').hide();
};

handleLoadBarCode = function(event, ele) {
    var file, files, holder, image, readers, url;
    holder = $(ele).siblings('.barcode-image');
    files = event.target.files;
    if (files.length < 1) {
        return;
    }
    file = files[0];
    url = URL.createObjectURL(file);
    startQuagga(url);
    image = new Image();
    readers = ['code_128_reader', 'ean_reader', 'code_39_reader', 'codabar_reader', 'upc_reader', 'ean_8_reader', 'upc_e_reader'];
    if ((window._config != null) && (window._config.barcode_readers != null)) {
        readers = window._config.barcode_readers;
    }
    image.onload = function(e) {
        var img, width;
        width = image.width;
        Quagga.decodeSingle({
            inputStream: {
                size: width
            },
            decoder: {
                readers: readers
            },
            locator: {
                patchSize: "medium",
                halfSample: false
            },
            locate: true,
            src: url
        }, function(result) {});
        holder.find('.image-holder').empty();
        return img = $("<img>", {
            src: url
        }).appendTo(holder.find('.image-holder'));
    };
    return image.src = url;
};

redecode = function() {
    var img;
    img = $('.barcode-image .image-holder img');
    if (img.size() !== 1) {
        return;
    }
    return Quagga.decodeSingle({
        decoder: {
            readers: ['code_128_reader', 'ean_reader', 'code_39_reader', 'codabar_reader', 'upc_reader', 'ean_8_reader', 'upc_e_reader']
        },
        locator: {
            patchSize: "medium",
            halfSample: false
        },
        locate: true,
        src: img.attr('src')
    }, function(result) {});
};

downloadReport = function(ele) {
    var end, id, start, url;
    start = $('#date-range input[name=start]').val();
    end = $('#date-range input[name=end]').val();
    id = $('#date-range').attr('rev');
    url = "/business/" + id + "/report/?start=" + (encodeURIComponent(start)) + "&end=" + (encodeURIComponent(end));
    return window.location.href = url;
};

openReviewerDialog = function(target, action) {
    var holder, overlay;
    if (action == null) {
        action = 'assign';
    }
    overlay = $("<div>", {
        "class": "overlay reviewer-list-dialog"
    }).appendTo($('body'));
    overlay.html("<div class=\"container\">\n  <div class=\"row\">\n  <div class=\"col-lg-3 col-md-2 col-sm-1 col-xs-0\"></div>\n  <div class=\"col-lg-6 col-md-8 col-sm-10 col-xs-12\">\n    <div class=\"dialog\">\n      <div class=\"close-button\" onclick=\"$(this).closest('.overlay').remove()\"></div>\n      <div class=\"title\">Danh sách người phản biện</div>\n      <div class=\"description></div>\n      <div class=\"search\"></div>\n      <div class=\"reviewer-list\"></div>\n    </div>\n  </div>\n  <div class=\"col-lg-3 col-md-2 col-sm-1 col-xs-0\"></div>\n  </div>\n</div>");
    overlay.attr("action", action);
    overlay.find(".reviewer-list").on("select", function() {
        var btns, id, name, o, payload, t, w;
        o = $(this).closest(".reviewer-list");
        id = o.attr("data-id");
        name = o.attr("data");
        $(this).closest(".overlay").remove();
        if ($(target).children("[rel='" + (o.attr("data-id")) + "']").size() > 0) {
            return;
        }
        w = $("<div>", {
            "class": "row reviewer",
            rel: id
        }).appendTo($(target));
        $("<div>", {
            "class": "col-lg-4 col-md-4 col-sm-6 col-xs-12 name"
        }).html(name).appendTo(w);
        $("<div>", {
            "class": "col-lg-4 col-md-4 col-sm-6 col-xs-12"
        }).html('<span class="status pending">(Chờ nhận duyệt bài)</span>').appendTo(w);
        btns = $("<div>", {
            "class": "col-lg-4 col-md-4 col-sm-12 col-xs-12 buttons"
        }).appendTo(w);
        t = $(target).attr("rev");
        if (!((t != null) && t.length > 0)) {
            t = "news";
        }
        payload = {
            entity_type: t,
            entity_id: $(target).attr("rel"),
            reviewer: id
        };
        return $.ajax({
            url: root_api_url + "reviews/",
            type: "POST",
            dataType: "application/json",
            data: payload
        });
    });
    if (action === 'assign') {
        overlay.find(".description").html("Chọn người phản biện trong danh sách dưới đây");
    }
    holder = overlay.find(".reviewer-list");
    return loadReviewers(holder);
};

createReviewerListItem = function(reviewer) {
    var a, name, w;
    w = $("<a>", {
        rel: reviewer.user
    });
    name = "";
    if (reviewer.fname != null) {
        name = name + reviewer.fname;
    }
    if (reviewer.lname != null) {
        name = name + " " + reviewer.lname;
    }
    a = $("<div>").appendTo(w);
    $("<div>", {
        "class": "name",
        rel: reviewer.user
    }).html(name).appendTo(a);
    return w;
};

loadReviewers = function(holder, refresh) {
    if (refresh == null) {
        refresh = false;
    }
    holder.addClass("loading");
    return $.ajax({
        url: root_api_url + "reviewers/",
        context: {
            holder: holder,
            refresh: refresh
        },
        complete: function() {
            return this.holder.removeClass("loading");
        },
        error: function(req, err, st) {
            return this.holder.find(".status-bar").attr("class", "error").html("Có lỗi trong quá trình truy cập server");
        },
        success: function(data) {
            var j, len, r, ref1, results1, w;
            if (this.refresh) {
                this.holder.empty();
            }
            ref1 = data.results;
            results1 = [];
            for (j = 0, len = ref1.length; j < len; j++) {
                r = ref1[j];
                w = createReviewerListItem(r).appendTo(this.holder);
                results1.push(w.click(function() {
                    return $(this).closest(".reviewer-list").attr("data-id", $(this).attr("rel")).attr("data", $(this).find(".name").html()).trigger("select");
                }));
            }
            return results1;
        }
    });
};

updateReviewRequest = function(btn, status) {
    var id, item, url;
    item = $(btn).closest('.item');
    $(btn).closest('.confirmation').hide('fast');
    id = item.attr("rel");
    url = root_api_url + "reviews/" + id + "/";
    item.addClass("waiting");
    return $.ajax({
        url: url,
        context: {
            holder: item,
            status: status,
            item: id
        },
        dataType: 'json',
        type: 'PATCH',
        data: {
            progress: status
        },
        error: function(req, sta, err) {
            return console.log(sta + " " + err);
        },
        success: function(data) {
            var btns;
            if (this.status === 4) {
                $(this.holder).hide('fast', function() {
                    return $(this).remove();
                });
                return;
            }
            if (this.status === 1) {
                btns = $(this.holder).find(".buttons");
                btns.find("[rel='reject']").remove();
                btns.find("[rel='accept']").remove();
                return btns.append("<a class=\"button blue\" href=\"" + root_url + "/duyet_bai/" + this.item + "\">Phản biện</a>");
            }
        }
    });
};

saveReview = function(btn, finished) {
    var form, id, payload, rate, url;
    form = $(btn).closest('.form');
    id = form.attr("rel");
    payload = {};
    rate = form.find("select[name='rate']").val();
    if ((finished != null) && finished) {
        payload['progress'] = 5;
    }
    if ((rate != null) && rate.length > 0) {
        payload['rate'] = rate;
    }
    payload['review'] = tinymce.editors[0].getContent("");
    url = root_api_url + "reviews/" + id + "/";
    form.find('.message').attr("class", "message saving").html("saving ...");
    form.addClass('waiting');
    form.find('.pop-up.confirmation').hide('fast');
    return $.ajax({
        url: url,
        context: {
            holder: form,
            item: id,
            finished: finished,
            data: payload
        },
        dataType: 'json',
        type: 'PATCH',
        data: payload,
        error: function(req, sta, err) {
            return console.log(sta + " " + err);
        },
        complete: function() {
            return $(this.holder).removeClass("waiting");
        },
        success: function(data) {
            var r, rev, v;
            $(this.holder).find('.message').attr("class", "message success").html("Saved!");
            if (this.finished) {
                $(this.holder).find('.message').attr("class", "message success").html("Handed over!");
                $(this.holder).find('.buttons').find('span').remove();
                r = $(this.holder).find("select[name='rate']");
                v = r.val();
                $("<span>", {
                    text: this.data.rate
                }).insertAfter(r);
                r.remove();
                rev = $(this.holder).find('textarea').parent();
                rev.empty();
                return rev.html(this.data.review);
            }
        }
    });
};

search_results = {};

trigger_change = function(search_form) {
    if (search_form == null) {
        return;
    }
    return search_form.each(function() {
        var change_handler;
        change_handler = $(this).attr('fire');
        if ((change_handler != null) && change_handler.length > 0) {
            return eval(change_handler);
        } else {
            return $(this).trigger('change');
        }
    });
};

openTopSearch = function(event, wrapper) {
    var header;
    if (event != null) {
        wrapper = $(event.target).closest('.search-wrapper');
    }
    header = wrapper.closest('.page-header');
    wrapper.parent().addClass('searching');
    return $.Event(event).stopPropagation();
};

closeTopSearch = function() {
    var header;
    header = $('.search-wrapper').closest('.searching').removeClass('searching');
    header.find('.search-wrapper span.search input').blur();
    return header.find('.search-wrapper .category-select').hide();
};

onSearchNavigate = function(event) {
    var current_ind, result_list, wrapper;
    if (event == null) {
        return;
    }
    wrapper = $(event.target).closest('.search-wrapper, .search-filter-wrapper');
    result_list = wrapper.find('.search-result');
    if (event.which === 27) {
        if ($(event.target).val().length === 0) {
            $(event.target).blur();
            wrapper.parent().removeClass('searching');
            wrapper.closest('.page-header').removeClass('searching');
            return;
        }
        $(event.target).val('');
        wrapper.attr('ind', 0);
        result_list.children('.item').removeClass('selected');
        result_list.children('.item:first').addClass('selected');
        return;
    }
    if (event.which === 13) {
        result_list.children('.selected').trigger('click');
        $.Event(event).stopPropagation();
        $.Event(event).preventDefault();
        if (wrapper.hasClass('inline-search')) {
            $(event.target).val('');
            wrapper.attr('term', '');
        }
        return;
    }
    if (!(event.which === 40 || event.which === 38)) {
        return;
    }
    $.Event(event).stopPropagation();
    $.Event(event).preventDefault();
    if (result_list.children('.item:visible').size() < 1) {
        return;
    }
    current_ind = wrapper.attr('ind');
    if (current_ind == null) {
        current_ind = -1;
    }
    current_ind = parseInt(current_ind);
    if (current_ind >= 0) {
        $(result_list).children('.item').removeClass('selected');
    }
    current_ind += event.which - 39;
    if (current_ind >= result_list.children('.item:visible').size()) {
        current_ind = 0;
    }
    if (current_ind < 0) {
        current_ind = result_list.children('.item:visible').size() - 1;
    }
    wrapper.attr('ind', current_ind);
    return $(result_list.children('.item:visible').get(current_ind)).addClass('selected');
};

onInlineSearch = function(input, wrapper) {
    var a, results, v;
    results = $(wrapper).find('.search-result');
    results.show();
    v = $.trim($(input).val()).toLowerCase();
    if (v.length < 1) {
        results.children('.item').show();
        return;
    }
    a = normalizeString(v);
    results.children('.item').each(function() {
        var alt;
        alt = $(this).attr('alt');
        if (!((alt != null) && alt.length > 0)) {
            alt = normalizeString($(this).attr('title'));
        }
        $(this).attr('alt', alt);
        if (alt.indexOf(a) >= 0) {
            return $(this).show();
        } else if ($(this).attr('title').indexOf(v) >= 0) {
            return $(this).show();
        } else {
            return $(this).hide();
        }
    });
    if (results.children('.item:visible').size() < 1) {
        a = unicode2ascii(a);
        results.children('.item').each(function() {
            var alt;
            alt = $(this).attr('altascii');
            if (!((alt != null) && alt.length > 0)) {
                alt = unicode2ascii(normalizeString($(this).attr('title')));
            }
            $(this).attr('altascii', alt);
            if (alt.indexOf(a) >= 0) {
                return $(this).show();
            } else if ($(this).attr('title').indexOf(v) >= 0) {
                return $(this).show();
            } else {
                return $(this).hide();
            }
        });
    }
    wrapper.attr('ind', 0);
    results.children('.item').removeClass('selected');
    results.children('.item:visible').first().addClass('selected');
};

saved_search_event = {};

onSearch = function(input, event) {
    var results, txt, wrapper;
    txt = $(input).val();
    if (txt == null) {
        txt = '';
    }
    txt = $.trim(txt);
    wrapper = $(input).closest('.search-wrapper, .search-filter-wrapper');
    wrapper.parent().addClass('searching');
    if (wrapper.hasClass('inline-search')) {
        if (wrapper.attr('term') === txt) {
            return;
        }
        wrapper.attr('term', txt);
        return onInlineSearch(input, wrapper);
    }
    results = wrapper.find('.search-result');
    if (results.size() < 1) {
        results = $('<div>', {
            "class": 'search-result'
        }).appendTo(wrapper);
    }
    if ($.trim(results.html()).length < 10) {
        results.html("<div style='padding: 20px; color: #aaa;'>Chức năng tìm kiếm nhanh cho phép tìm kiếm tất cả các đối tượng một cách nhanh chóng ...</div>");
    }
    results.show();
    if (wrapper.attr('term') === txt) {
        return;
    }
    wrapper.attr('term', txt);
    wrapper.attr('ind', null);
    if ((txt == null) || txt.length < 1) {
        results.empty();
        return;
    }
    results.addClass('waiting');
    if (saved_search_event.timeoutID != null) {
        clearTimeout(saved_search_event.timeoutID);
    }
    saved_search_event.input = input;
    saved_search_event.event = event;
    if (wrapper.hasClass('inline-search')) {
        onSearch_();
        return;
    }
    saved_search_event.input = input;
    saved_search_event.event = event;
    saved_search_event.timeoutID = setTimeout(onSearch_, 250);
};

onSearch_ = function() {
    var entities, event, filter, header, input, results, txt, url, url_param, wrapper;
    input = saved_search_event.input;
    event = saved_search_event.event;
    txt = $(input).val();
    if (txt == null) {
        txt = '';
    }
    txt = $.trim(txt);
    wrapper = $(input).closest('.search-wrapper, .search-filter-wrapper');
    header = wrapper.closest('.page-header');
    wrapper.parent().addClass('searching');
    wrapper.attr('term', txt);
    wrapper.attr('ind', null);
    if (txt.length > 128) {
        return;
    }
    if (wrapper.hasClass('inline-search')) {
        return onInlineSearch(input, wrapper);
    }
    results = wrapper.find('.search-result');
    if (header.size() === 0 && txt.length === 0) {
        results.empty();
        if (wrapper.closest('.hover-search').size() > 0) {
            results.html("<div style='padding: 20px; color: #aaa;'>Chức năng tìm kiếm nhanh cho phép tìm kiếm tất cả các đối tượng một cách nhanh chóng ...</div>");
        }
        return;
    }
    if (wrapper.attr('full') === 'yes') {
        url = root_api_url + 'search/';
    } else {
        url = root_api_url + 'simple_search/';
    }
    url_param = '';
    if (txt.length > 0) {
        url_param = 's=' + txt;
    }
    entities = wrapper.attr('doctype');
    if ((entities != null) && entities.length > 0) {
        if (url_param.length > 0) {
            url_param += "&";
        }
        url_param = url_param + 'entities=' + entities;
    }
    filter = wrapper.attr('filter');
    if ((filter != null) && filter.length > 0) {
        if (url_param.length > 0) {
            url_param += "&";
        }
        url_param += 'filters=' + encodeURIComponent(filter);
    }
    if (url_param.length > 0) {
        url += "?" + url_param;
    }
    if (results.size() < 1) {
        results = $('<div>', {
            "class": 'search-result'
        }).appendTo(wrapper);
        results.html("<div style='padding: 20px; color: #aaa;'>Chức năng tìm kiếm nhanh cho phép tìm kiếm tất cả các đối tượng một cách nhanh chóng ...</div>");
        results.show();
    }
    results.addClass('waiting');
    return $.ajax({
        url: url,
        context: {
            term: txt,
            holder: wrapper,
            param: url_param
        },
        success: function(data) {
            if ($(this.holder).attr('term') !== this.term) {
                return;
            }
            return parseSearchResult(data, this);
        }
    });
};

changeSearchCat = function(ele) {
    var b, cat, i, s, w;
    cat = $(ele).attr('rel');
    w = $(ele).closest('.search-wrapper');
    s = $(ele).closest('.category-select');
    b = w.find('.search .button.category');
    if (cat === 'all') {
        w.attr('doctype', '');
        b.attr('class', 'button category');
    } else if (cat.split(',').length > 1) {
        w.attr('doctype', cat);
        b.attr('class', 'button category');
    } else {
        w.attr('doctype', cat);
        b.attr('class', 'button category ' + cat);
    }
    s.hide();
    i = $('.page-header .search-wrapper span.search input');
    openTopSearch(null, i.closest('.search-wrapper'));
    i.focus();
    onSearch(i);
};

matchAccent = function(wo_accent, w_accent) {
    var ind, str;
    str = "";
    ind = wo_accent.indexOf('<em>');
    while (ind >= 0) {
        wo_accent = wo_accent.substring(ind + 4);
        str += w_accent.substring(0, ind) + '<em>';
        w_accent = w_accent.substring(ind);
        ind = wo_accent.indexOf('</em>');
        wo_accent = wo_accent.substring(ind + 5);
        str += w_accent.substring(0, ind) + '</em>';
        w_accent = w_accent.substring(ind);
        ind = wo_accent.indexOf('<em>');
    }
    return str + w_accent;
};

openCategoryChoice = function(ele) {
    return $(ele).parent().siblings('.category-select').toggle();
};

parseSearchResult = function(data, context) {
    var aa, addr, base_url, cd, comp, d, dd, detail, e, ele, etypes, f, hc, holder, href, html, i, id, info, j, l, len, len1, len2, len3, len4, len5, list, name, q, ref1, ref2, ref3, ref4, results1, salt, subtitle, title, u, w, x, z;
    holder = $(context.holder);
    if (context.term !== holder.attr('term')) {
        return;
    }
    id = holder.attr('id');
    if (id != null) {
        search_results[id] = data;
    }
    list = holder.find('.search-result');
    if (list.size() < 1) {
        list = $('<div>', {
            "class": 'search-result'
        }).appendTo(holder);
    }
    list.empty();
    list.removeClass('waiting');
    if (data.data.length < 1) {
        list.html("<div class=\"no-result\">Không tìm thấy kết quả phù hợp nào. Vui lòng thử tìm kiếm với từ khoá khác.</div>");
        return;
    }
    ref1 = data.data;
    for (i = j = 0, len = ref1.length; j < len; i = ++j) {
        e = ref1[i];
        if (!(i < 11)) {
            continue;
        }
        base_url = '';
        switch (e._type) {
            case 'hoatchat':
                base_url = 'hoat_chat';
                break;
            case 'bietduoc':
                base_url = 'biet_duoc';
                break;
            case 'doanhnghiep':
                base_url = 'doanh_nghiep';
                break;
            case 'news':
                base_url = 'tin_tuc';
                break;
            case 'duoclieu':
                base_url = 'duoc_lieu';
                break;
            case 'xetnghiem':
                base_url = 'xet_nghiem';
                break;
            case 'patientedu':
                base_url = 'giao_duc_benh_nhan';
                break;
            case 'unii':
                if (e.substance_type === 1) {
                    base_url = 'hoat_chat';
                    e._type = 'hoatchat';
                } else {
                    base_url = 'unii';
                }
                break;
            default:
                base_url = e._type;
        }
        id = e.id;
        if (e.url_id != null) {
            id = e.url_id;
        }
        title = e.title;
        if (title == null) {
            title = e.title_en;
        }
        if (e._type === 'benh') {
            title = title + " (" + e.id + ")";
        }
        ele = $("<div>", {
            "class": "item " + e._type,
            rel: id,
            rev: base_url,
            title: title
        }).appendTo(list);
        if (e._type === 'unii' || e._type === 'hoatchat') {
            if (e.has_salts) {
                ele.attr('extra', 'has_salts');
            }
        }
        title = null;
        subtitle = null;
        if ((e.highlighted_title != null) || (e.highlighted_title_en != null) || (e.highlighted_title_wo_accent != null)) {
            title = e.highlighted_title;
            if ((title == null) && (e.highlighted_title_wo_accent != null)) {
                title = matchAccent(e.highlighted_title_wo_accent, e.title);
            }
            if (title == null) {
                title = e.highlighted_title_en;
            }
            if (title == null) {
                title = e.title;
            }
            if (title == null) {
                title = e.title_en;
            }
        } else {
            title = e.title;
            if (!((title != null) && title.length > 0)) {
                title = e.title_en;
            }
            if ((e.highlighted_title_en != null) && (e.title != null)) {
                subtitle = e.highlighted_title_en;
            } else if ((e.highlighted_alt_title != null) && (e.highlighted_title_en == null)) {
                subtitle = e.highlighted_alt_title;
            } else if ((e.highlighted_alt_titles_name != null) && (e.highlighted_title_en == null) && e.highlighted_alt_titles_name !== e.title) {
                subtitle = e.highlighted_alt_titles_name;
            }
        }
        if (e._type === 'benh') {
            title = title + " (" + e.id + ")";
        }
        if (e._type === 'bietduoc') {
            if (e.cty_dannhan_name != null) {
                title += ' <span class="subtitle"> - ' + e.cty_dannhan_name + '</span>';
            } else if (e.ctysx_name != null) {
                title += ' <span class="subtitle"> - ' + e.ctysx_name + '</span>';
            }
        }
        if (subtitle != null) {
            ele.html("<span>" + title + "</span>\n<div class=\"alt\">" + subtitle + "</div>");
        } else {
            ele.html(title);
        }
        if (e._type === 'doanhnghiep') {
            if (e.dia_chi != null) {
                $("<div>", {
                    "class": 'detail small cyan'
                }).html(e.dia_chi).appendTo(ele);
            } else {
                addr = [];
                info = ['so_nha', 'duong', 'phuong_xa', 'quan_huyen', 'thanh_pho', 'tinh', 'quoc_gia'];
                for (q = 0, len1 = info.length; q < len1; q++) {
                    f = info[q];
                    if ((e[f] != null) && $.trim(e[f].length) > 0) {
                        if (f === 'so_nha') {
                            e[f] = $.trim(e[f]);
                            l = e[f].length;
                            if (l > 2 && e[f].charAt(l - 1) === '0' && e[f].charAt(l - 2) === '.') {
                                e[f] = e[f].substring(0, l - 2);
                            }
                            if (e[f].length > 0) {
                                e[f] = 'Số nhà ' + e[f];
                            }
                        }
                        addr.push(e[f]);
                    }
                }
                if (addr.length > 0) {
                    $("<div>", {
                        "class": 'detail small cyan'
                    }).html(addr.join(', ')).appendTo(ele);
                }
            }
        }
        if (e._type === 'bietduoc') {
            comp = [];
            ref2 = e.bietduochoatchat_set;
            for (i = u = 0, len2 = ref2.length; u < len2; i = ++u) {
                hc = ref2[i];
                if (i < 3) {
                    if (hc.ham_luong != null) {
                        comp.push(hc.hoatchat_name + ': ' + hc.ham_luong + hc.don_vi);
                    } else {
                        comp.push(hc.hoatchat_name);
                    }
                }
            }
            detail = comp.join('; ');
            $('<div>', {
                "class": 'detail small cyan'
            }).html(detail).appendTo(ele);
        }
        ele.click(function(event) {
            var obj, w;
            obj = $(event.target).closest('.item');
            $.Event(event).stopPropagation();
            $.Event(event).preventDefault();
            w = obj.closest('.search-wrapper');
            w.attr('rev', obj.attr('rev'));
            w.attr('rel', obj.attr('rel'));
            w.attr('extra', obj.attr('extra'));
            w.attr('title', obj.attr('title'));
            trigger_change(w);
            return w.closest('.searching').removeClass('searching');
        });
        ele.hover(function() {
            return $(this).addClass('hovered');
        }, function() {
            return $(this).removeClass('hovered');
        });
        if ((e._type === 'unii' || e._type === 'hoatchat') && list.attr('extra') === 'yes') {
            if ((e.flag % 2) === 1) {
                cd = $("<div>", {
                    "class": "item extra-info",
                    rel: e.id
                }).appendTo(list);
                cd.html("<span>Chỉ định</span> " + title);
                cd.click(function() {
                    return window.location.href = "/hoat_chat/" + ($(this).attr('rel')) + "/#chi_dinh";
                });
                cd.hover(function() {
                    return $(this).addClass('hovered');
                }, function() {
                    return $(this).removeClass('hovered');
                });
            }
            e.flag -= e.flag % 2;
            e.flag = e.flag / 2;
            if ((e.flag % 2) === 1) {
                cd = $("<div>", {
                    "class": "item extra-info",
                    rel: e.id
                }).appendTo(list);
                cd.html("<span>Chống chỉ định</span> " + title);
                cd.click(function() {
                    return window.location.href = "/hoat_chat/" + ($(this).attr('rel')) + "/#chong_chi_dinh";
                });
                cd.hover(function() {
                    return $(this).addClass('hovered');
                }, function() {
                    return $(this).removeClass('hovered');
                });
            }
            e.flag -= e.flag % 2;
            e.flag = e.flag / 2;
            if ((e.flag % 2) === 1) {
                cd = $("<div>", {
                    "class": "item extra-info",
                    rel: e.id
                }).appendTo(list);
                cd.html("<span>Tương tác</span> " + title);
                cd.click(function() {
                    return window.location.href = "/hoat_chat/" + ($(this).attr('rel')) + "/?tab=tuong_tac";
                });
                cd.hover(function() {
                    return $(this).addClass('hovered');
                }, function() {
                    return $(this).removeClass('hovered');
                });
            }
            if (e.derivatives_name != null) {
                ref3 = e.derivatives_name;
                for (x = 0, len3 = ref3.length; x < len3; x++) {
                    d = ref3[x];
                    dd = d.split(':');
                    salt = $("<div>", {
                        "class": "item",
                        rel: dd[0],
                        rev: 'hoat_chat',
                        title: dd[1]
                    }).appendTo(list);
                    salt.html(dd[1]);
                    salt.hover(function() {
                        return $(this).addClass('hovered');
                    }, function() {
                        return $(this).removeClass('hovered');
                    });
                    salt.click(function(event) {
                        var obj, w;
                        obj = $(event.target).closest('.item');
                        $.Event(event).stopPropagation();
                        $.Event(event).preventDefault();
                        w = obj.closest('.search-wrapper');
                        w.attr('rev', obj.attr('rev'));
                        w.attr('rel', obj.attr('rel'));
                        w.attr('extra', obj.attr('extra'));
                        w.attr('title', obj.attr('title'));
                        trigger_change(w);
                        return w.closest('.searching').removeClass('searching');
                    });
                }
            }
        }
    }
    list.append("<a href=\"" + root_url + "/search.html" + (context.param != null ? '?' + context.param : '') + "\" class=\"see-all-btn\" onclick=\"gotoAdvanced()\">Xem toàn bộ " + data.total + " kết quả tìm kiếm</a>");
    holder.attr('ind', 0);
    list.children('.item:first').addClass('selected');
    if ((data.facets != null) && (data.facets.etypes != null)) {
        etypes = [];
        ref4 = data.facets.etypes.terms;
        for (z = 0, len4 = ref4.length; z < len4; z++) {
            d = ref4[z];
            name = d.term;
            html = d.count + d.term;
            switch (d.term) {
                case 'bietduoc':
                    html = "<span class='icon pills small'>" + d.count + "</span>";
                    break;
                case 'duoclieu':
                    html = "<span class='icon leaf med'>" + d.count + "</span>";
                    break;
                case 'xetnghiem':
                    html = "<span class='icon lab-test'>" + d.count + "</span>";
                    break;
                case 'benh':
                    html = "<span class='icon health-record'>" + d.count + "</span>";
                    break;
                case 'doanhnghiep':
                    html = "<span class='icon shop'>" + d.count + "</span>";
                    break;
                case 'hoatchat':
                    html = "<span class='icon test-tube'>" + d.count + "</span>";
                    break;
                case 'unii':
                    html = "<span class='icon unii_code small'>" + d.count + "</span>";
                    break;
                case 'patientedu':
                    html = "<span class='icon doctor'>" + d.count + "</span>";
                    break;
                case 'news':
                    html = "<span class='icon document med'>" + d.count + "</span>";
            }
            href = '/search.html?entities=' + d.term + '&' + context.param;
            ele = $("<a>", {
                "class": 'facet-link',
                href: href
            }).html(html);
            etypes.push(ele);
        }
        if (etypes.length > 1) {
            w = $("<div>", {
                "class": 'facets'
            }).prependTo(list);
            results1 = [];
            for (aa = 0, len5 = etypes.length; aa < len5; aa++) {
                ele = etypes[aa];
                results1.push(w.append(ele));
            }
            return results1;
        }
    }
};

gotoEntity = function(ele) {
    var id, rev, txt, type;
    rev = $(ele).attr('rev');
    id = $(ele).attr('rel');
    if (!((id != null) && (rev != null))) {
        return;
    }
    type = $(ele).attr('doctype');
    if (!((type != null) && type.length > 0)) {
        type = 'all';
    }
    txt = $(ele).attr('term');
    if (!((txt != null) && txt.length > 0)) {
        txt = '_';
    }
    ga('send', 'event', 'global-search:' + type, 'goto', rev + ':' + id);
    return window.location.href = root_url + '/' + $(ele).attr('rev') + '/' + id;
};

extractFilter = function(filter) {
    var data, entities;
    data = {};
    entities = [];
    if (filter.find('.entity-type:not(.selected)').size() > 0) {
        filter.find('.entity-type.selected').each(function() {
            return entities.push($(this).attr("val"));
        });
    }
    if (entities.length > 0) {
        data['entities'] = entities.join(',');
    }
    return data;
};

onAdvancedSearch = function(event) {
    var input, result, txt;
    input = $('.advanced-search-wrapper .keyword input');
    txt = input.val();
    if (txt == null) {
        txt = '';
    }
    txt = $.trim(txt);
    result = $('.advanced-search-result');
    if (txt.length < 1) {
        return;
    }
    if (txt === result.attr('term')) {
        return;
    }
    input.addClass("searching");
    result.attr('term', txt);
    return refreshAdvancedSearch(event);
};

refreshAdvancedSearch = function(event, page) {
    var data, filter, input, result, txt, url, url_params, wrapper;
    if (page == null) {
        page = 1;
    }
    input = $('.advanced-search-wrapper .keyword input');
    result = $('.advanced-search-result');
    txt = result.attr('term');
    if (txt == null) {
        txt = '';
    }
    txt = $.trim(txt);
    if (txt.length < 1) {
        return;
    }
    url = root_api_url + 'search';
    url_params = "";
    if (txt.length > 0) {
        url_params = 's=' + txt;
    }
    page = parseInt(page);
    if (page > 1) {
        if (url_params.length > 0) {
            url_params += "&";
        }
        url_params += "page=" + page;
    }
    wrapper = input.closest('.advanced-search-wrapper');
    filter = wrapper.find('.filter');
    data = extractFilter(filter);
    if (data.entities != null) {
        if (url_params.length > 0) {
            url_params += "&";
        }
        url_params += "entities=" + data.entities;
    }
    if (url_params.length > 0) {
        url += "?" + url_params;
    }
    if ($(event).which === 13) {
        updateAddressbar(url_params);
    }
    return $.ajax({
        url: url,
        context: {
            term: txt,
            holder: result,
            input: input,
            page: page
        },
        success: function(data) {
            if ($(this.holder).attr('term') !== this.term) {
                return;
            }
            this.input.removeClass('searching');
            return parseAdvancedSearchResult(data, this.holder, this.page);
        },
        error: function(req, stat, err) {
            return this.input.removeClass('searching');
        }
    });
};

createResultItem = function(e) {
    var alt_title, base_url, ele, id, image, short_desc, thumb, title;
    base_url = '';
    switch (e._type) {
        case 'hoatchat':
            base_url = 'hoat_chat';
            break;
        case 'bietduoc':
            return template_bietduoc_list(e);
        case 'interimdrug':
            return template_interim_drug_list(e);
        case 'doanhnghiep':
            base_url = 'doanh_nghiep';
            break;
        case 'news':
            base_url = 'tin_tuc';
            break;
        case 'duoclieu':
            base_url = 'duoc_lieu';
            break;
        case 'patientedu':
            base_url = 'giao_duc_benh_nhan';
            break;
        case 'unii':
            if (e.substance_type === 1) {
                base_url = 'hoat_chat';
                e._type = 'hoatchat';
            } else {
                base_url = 'unii';
            }
            break;
        default:
            base_url = e._type;
    }
    id = e.id;
    if (e.url_id != null) {
        id = e.url_id;
    }
    ele = $("<div>", {
        "class": "item " + e._type,
        rel: id,
        rev: base_url
    });
    title = e.title;
    if (!((title != null) && title.length > 0)) {
        title = e.title_en;
    } else {
        alt_title = e.title_en;
    }
    if (title == null) {
        title = "";
    }
    if (alt_title == null) {
        alt_title = "";
    }
    if (alt_title.length > 0) {
        alt_title = "(" + alt_title + ")";
    }
    image = e.image;
    thumb = e.thumbnail;
    short_desc = e.summary;
    if (short_desc == null) {
        short_desc = "";
    }
    if ((e.dia_chi != null) && e.dia_chi.length > 0) {
        if ((short_desc != null) && short_desc.length > 0) {
            short_desc += '<br>';
        }
        short_desc += e.dia_chi;
    }
    ele.html("<div class=\"title\">" + title + " <div class=\"alt\">" + alt_title + "</div></div>\n<div class=\"summary\">" + short_desc + "</div>");
    if ((image != null) && image.length > 0) {
        if (image.indexOf('http') < 0 && image.charAt(0) !== '/') {
            image = '/' + image;
        }
        ele.addClass('with-image');
        ele.prepend($("<div class=\"thumbnail\"><img src=\"" + image + "\" /></div>"));
    }
    ele.click(function() {
        window.location.href = root_url + '/' + $(this).attr('rev') + '/' + $(this).attr('rel');
        return $.Event(event).stopPropagation();
    });
    if (e._type === 'unii' || e._type === 'hoatchat') {
        if (e.bietduoc_cnt != null) {
            ele.append("<div><a href=\"/biet_duoc/?ingredients=" + e.id + "\">" + e.total_cnt + " biệt dược có sử dụng hoạt chất</a></div>");
        }
    }
    return ele;
};

parseAdvancedSearchResult = function(data, holder, page) {
    var e, ele, end, heading, ipp, j, len, list, pager, ref1, start;
    if (page == null) {
        page = 1;
    }
    ipp = 10;
    start = 1 + (page - 1) * ipp;
    end = page * ipp;
    if (end > data.total) {
        end = data.total;
    }
    heading = $('.search-result-heading');
    heading.empty();
    if (data.data.length < 1) {
        heading.html("<div class='empty'>Không tìm thấy kết quả phù hợp!</div>");
        return;
    }
    heading.html("Hiển thị kết quả từ " + start + "-" + end + " trong tổng số " + data.total);
    list = $("<div>");
    ref1 = data.data;
    for (j = 0, len = ref1.length; j < len; j++) {
        e = ref1[j];
        ele = createResultItem(e);
        ele.appendTo(list);
    }
    holder.empty();
    list.hide();
    holder.append(list);
    list.fadeIn('fast');
    pager = $('.paginator');
    if (data.total <= ipp) {
        pager.hide();
    } else {
        pager.show();
    }
    pager.pagination({
        items: data.total,
        itemsOnPage: ipp,
        currentPage: page,
        hrefTextPrefix: "#",
        onPageClick: function(page, event) {
            trigger_change(pager);
            return $.Event(event).stopPropagation();
        }
    });
    return $.Event(event).stopPropagation();
};

updateAddressbar = function(param) {
    var addr_url, ind, old_params;
    addr_url = window.location + "";
    ind = addr_url.indexOf('#');
    if (ind > 0) {
        addr_url = addr_url.substring(0, ind);
    }
    old_params = "";
    ind = addr_url.indexOf('?');
    if (ind > 0) {
        old_params = addr_url.substring(ind);
        addr_url = addr_url.substring(0, ind);
    }
    if (old_params !== param) {
        if ((param != null) && param.length > 0) {
            addr_url = addr_url + '?' + param;
        }
        return window.history.pushState('', '', addr_url);
    }
};

onToggleSaltDeriv = function(ele) {
    var filter, v;
    filter = $(ele).closest('.filter-option');
    v = filter.attr('rel');
    if ($(ele).is(':checked')) {
        v += '--';
    } else {
        while (v.charAt(v.length - 1) === '-') {
            v = v.substring(0, v.length - 1);
        }
    }
    filter.attr('rel', v);
    return trigger_change($(ele).closest('.search-form'));
};

addSearchFilter = function(filter_form, search_form, option_holder, reset, extend) {
    var eid, ename, etype, extra, filter, input, main;
    if (reset == null) {
        reset = true;
    }
    if (extend == null) {
        extend = true;
    }
    etype = filter_form.attr('rev');
    eid = filter_form.attr('rel');
    main = filter_form.attr('main');
    extra = filter_form.attr('extra');
    if (!((eid != null) && (etype != null) && eid.length > 0 && etype.length > 0)) {
        return;
    }
    if (main == null) {
        main = '_';
    }
    ga('send', 'event', 'search-filter:' + main, etype, eid);
    input = filter_form.find('input');
    ename = filter_form.attr('title');
    if (ename == null) {
        ename = input.val();
    }
    if (reset) {
        input.val('');
        filter_form.attr('rev', '');
        filter_form.attr('rel', '');
        filter_form.attr('extra', '');
    }
    if ((etype === 'unii' || etype === 'hoatchat' || etype === 'hoat_chat') && (extra != null) && extra.length > 0) {
        eid += '--';
    }
    filter = $("<div>", {
        "class": "filter-option",
        rev: etype,
        rel: eid
    }).appendTo(option_holder);
    filter.append("<span class=\"icon cancel clickable effect-fade\" onclick=\"$(this).parent().fadeOut(function(){var f=$(this).closest('.search-form'); $(this).remove(); trigger_change(f);})\"></span>");
    if (etype === 'unii' || etype === 'hoatchat' || etype === 'hoat_chat') {
        filter.append("<span class='icon test-tube med'></span>");
    } else if (etype === 'bietduoc' || etype === 'biet_duoc') {
        filter.append("<span class='icon pills med'></span>");
    }
    filter.append("<span class=\"title\">" + ename + "</span>");
    if (extend && (etype === 'unii' || etype === 'hoatchat' || etype === 'hoat_chat') && (extra != null) && extra.indexOf('has_salt') >= 0) {
        filter.append("<span style=\"display: inline-block; float: right; color: #888; padding-right: 4px;\">\n  <input type=\"checkbox\" checked='checked' value=\"\" onchange=\"onToggleSaltDeriv(this)\" /> Muối\n</span>");
    }
    if (extend && (etype === 'unii' || etype === 'hoatchat' || etype === 'hoat_chat')) {
        filter.append("<span class=\"icon balance tiny clickable inactive\" title=\"Hàm lượng\" onclick=\"$(this).toggleClass('inactive'); $(this).siblings('.hamluong_input').slideToggle()\"></span>\n<div class=\"extra-filter-option hamluong_input\">\n  <label>Hàm lượng</label>\n  <input onchange=\"trigger_change($(this).closest('.search-form'))\" type=\"text\">\n</div>");
        filter.css('padding-right', '20px');
    }

    /*
    option_holder.append """
      <div class="filter-option" rev="#{etype}" rel="#{eid}">
        <span class="icon cancel clickable effect-fade" onclick="$(this).parent().fadeOut(function(){var f=$(this).closest('.search-form'); $(this).remove(); trigger_change(f);})"></span>
        <span class="title">#{ename}</span>
      </div>
    """
     */
    return trigger_change(search_form);
};

capitalize = function(str) {
    if (!((str != null) && str.length > 0)) {
        return str;
    }
    return str = str.charAt(0).toUpperCase() + str.substr(1);
};

createBietDuocTile = function(data) {
    var wrapper;
    wrapper = $("<div>", {
        "class": "col-lg-3 col-md-4 col-sm-6 col-xs-12"
    });
    return wrapper.append(template_bietduoc_tile(data));
};

getSubTitle = function(e) {
    var subtitle, title;
    subtitle = null;
    if ((e.highlighted_title != null) || (e.highlighted_title_en != null) || (e.highlighted_title_wo_accent != null)) {
        title = e.highlighted_title;
        if ((title == null) && (e.highlighted_title_wo_accent != null)) {
            title = matchAccent(e.highlighted_title_wo_accent, e.title);
        }
        if (title == null) {
            title = e.highlighted_title_en;
        }
        if (title == null) {
            title = e.title;
        }
        if (title == null) {
            title = e.title_en;
        }
    } else {
        title = e.title;
        if (!((title != null) && title.length > 0)) {
            title = e.title_en;
        }
        if ((e.highlighted_title_en != null) && (e.title != null)) {
            subtitle = e.highlighted_title_en;
        } else if ((e.highlighted_alt_title != null) && (e.highlighted_title_en == null)) {
            subtitle = e.highlighted_alt_title;
        } else if ((e.highlighted_alt_titles_name != null) && (e.highlighted_title_en == null) && e.highlighted_alt_titles_name !== e.title) {
            subtitle = e.highlighted_alt_titles_name;
        }
    }
    return subtitle;
};

createHoatChatTile = function(data) {
    var wrapper;
    wrapper = $("<div>", {
        "class": "col-lg-3 col-md-4 col-sm-6 col-xs-12"
    });
    return wrapper.append(template_hoatchat_tile(data));
};

parseSearchData = function(data, context) {
    var body, content_type, d, dd, e, ele, f, header, i, j, len, len1, paginator, q, ref1, ref2, results, results_list, salt, suggestions, top_result, top_result_holder;
    top_result_holder = $("#top_result");
    if (top_result_holder.attr('rev') === 'unii' && ((context.page == null) || context.page < 2)) {
        f = data.data[0];
        if ((f == null) || top_result_holder.attr('rel') !== f.id) {
            top_result_holder.empty();
            top_result_holder.attr('rel', '');
        }
        if ((f != null) && top_result_holder.attr('rel') !== f.id && (f._type === 'unii' || f._type === 'hoatchat') && ((f.chi_dinh != null) || (f.chong_chi_dinh != null) || (f.tuong_tac_thuoc != null))) {
            top_result_holder.attr('rel', f.id);
            top_result = $("<div>", {
                "class": "top_result " + f._type
            }).hide();
            top_result.appendTo(top_result_holder);
            top_result.append("<div class=\"title\">" + f.title + " <a href=\"/hoat_chat/" + f.id + "\">Xem thông tin chi tiết <span class=\"icon go-button\"></span></a></div>");
            if (f.derivatives_name != null) {
                salt = $("<div>").appendTo(top_result);
                salt.append("<label>Muối dẫn xuất: </label>");
                ref1 = f.derivatives_name;
                for (j = 0, len = ref1.length; j < len; j++) {
                    d = ref1[j];
                    dd = d.split(':');
                    salt.append("<a class=\"button\" style=\"min-width: auto; padding-right: 6px;\" href=\"/hoat_chat/" + dd[0] + "\">" + dd[1] + "</a>");
                }
            }
            if (f.chi_dinh != null) {
                top_result.append("<div class=\"header2\">Chỉ định</div>\n<div>" + f.chi_dinh + "</div>");
            }
            if (f.chong_chi_dinh != null) {
                top_result.append("<div class=\"header2\">Chống Chỉ định</div>\n<div>" + f.chong_chi_dinh + "</div>");
            }
            if (f.tuong_tac_thuoc != null) {
                top_result.append("<div class=\"header2\">Tương tác thuốc</div>\n<div>" + f.tuong_tac_thuoc + "</div>");
            }
            top_result.fadeIn('fast');
        }
    }
    if (top_result_holder.attr('rev') === 'duoclieu' && ((context.page == null) || context.page < 2)) {
        f = data.data[0];
        if ((f == null) || top_result_holder.attr('rel') !== f.id) {
            top_result_holder.empty();
            top_result_holder.attr('rel', '');
        }
    }
    results = $('.related-item-list[rel=tile]');
    results_list = $('.related-item-list[rel=list]');
    header = $('.related-item-header');
    results.parent().removeClass('waiting');
    results_list.parent().removeClass('waiting');
    results.empty();
    results_list.empty();
    header.html("<h4>Tổng số " + data.total + " kết quả</h4>");
    if (data.total > 0) {
        header.show();
    } else {
        header.hide();
        content_type = '';
        suggestions = '';
        switch (context.e) {
            case 'unii':
                content_type = 'hoạt chất';
                suggestions = '<div class="instructions" style="text-align:left; font-style: italic; font-size:0.9em;color: #888;">Bật chế độ &ldquo;Tra cứu hoạt chất chưa có dữ liệu&rdquo; trong tìm kiếm nâng cao để mở rộng tìm kiếm.</div>';
                break;
            case 'bietduoc':
                content_type = 'biệt dược';
                suggestions = '<div class="instructions" style="text-align:left; font-style: italic; font-size:0.9em;color: #888;">Dùng chức năng &ldquo;Tìm kiếm nâng cao&rdquo; để mở rộng tìm kiếm.</div>';
                break;
            case 'duoclieu':
                content_type = 'dược liệu';
                break;
            case 'doanhnghiep':
                content_type = 'doanh_nghiệp';
        }
        body = "<div class=\"top_result\" style=\"padding-bottom: 40px; padding-top: 40px; text-align: center;\">\n  <div class=\"title\" style=\"text-align: center;\">Không tìm thấy kết quả!</div>\n  <div class=\"instructions\">Xin vui lòng liên hệ với chúng tôi để bổ sung dữ liệu.</div>\n  <div class=\"instructions\">Rất mong nhận được sự đóng góp và hỗ trợ của quí vị để hoàn thiện hệ thống!</div>\n  <div style=\"text-align: center; padding: 20px;\">\n    <a href=\"mailto:yduoc360dev@gmail.com?subject=Yêu%20cầu%20bổ%20sung%20dữ%20liệu%20" + content_type + "&body=Cần%20bổ%20sung%20dữ%20liệu%20về%20" + content_type + ":%20" + context.term + "\" class=\"button large blue\">GỬI YÊU CẦU</a>\n  </div>\n  " + suggestions + "\n</div>";
        if (top_result_holder.size() > 0) {
            top_result_holder.html(body);
        } else {
            results.append(body);
            results_list.append(body);
        }
    }
    ref2 = data.data;
    for (i = q = 0, len1 = ref2.length; q < len1; i = ++q) {
        e = ref2[i];
        if (results_list.size() > 0) {
            results_list.append(createResultItem(e));
        }
        ele = $("<div>", {
            "class": "col-lg-3 col-md-4 col-sm-6 col-xs-12"
        });
        if (context.e === 'bietduoc') {
            ele.append(template_bietduoc_tile(e));
        } else if (context.e === 'hoatchat' || context.e === 'unii') {
            ele.append(template_hoatchat_tile(e));
        } else if (context.e === 'duoclieu') {
            ele.append(template_duoclieu_tile(e));
        } else {
            ele.html("<div>" + e.title + "</div>");
        }
        ele.hide().appendTo(results);
        ele.fadeIn('fast');
        if ((1 + i) % 6 === 0) {
            results.append('<div class="clearfix hidden-lg"></div>');
        } else if ((1 + i) % 4 === 0) {
            results.append('<div class="clearfix hidden-md"></div>');
        } else if ((1 + i) % 3 === 0) {
            results.append('<div class="clearfix hidden-lg hidden-sm"></div>');
        } else if ((1 + i) % 2 === 0) {
            results.append('<div class="clearfix hidden-lg hidden-md"></div>');
        }
    }
    paginator = $('.related-item-pagination');
    if (data.total <= 12) {
        paginator.slideUp('fast');
    } else {
        paginator.slideDown('fast');
    }
    paginator.attr('page', context.page);
    paginator.attr('count', data.total);
    paginate(paginator);
    cookie_checkSaved();
    if (data.facets != null) {
        return processFacetData(data.facets);
    }
};

processFacetData = function(facets) {
    var c, d, h, holder, i, j, len, ref1, results1;
    if (facets.patientedu_cat != null) {
        holder = $(".search-form[rev='patientedu']");
        holder.find(".filter-toggle .icon .counter").remove();
        ref1 = facets.patientedu_cat.terms;
        results1 = [];
        for (j = 0, len = ref1.length; j < len; j++) {
            d = ref1[j];
            h = holder.find(".filter-toggle[rel='" + d.term + "']");
            i = h.children(".icon");
            c = $("<span>", {
                "class": "counter sub-title",
                text: " (" + d.count + ")"
            }).hide().appendTo(i).fadeIn();
            results1.push(c.css("font-size", "0.9em"));
        }
        return results1;
    }
};

saved_advanced_search_timeout = {};

onSearchInputChange = function(event, element) {
    var txt;
    txt = $(element).val();
    if (txt == null) {
        return;
    }
    txt = $.trim(txt).toLowerCase();
    $(element).attr('data', txt);
    return trigger_change($(element).closest('.search-form'));
};

onSearchFormChange = function(form, page) {
    var c, direction, e, filters, k, payload, s, sort_by, sort_wrapper, urlparams, v;
    if (page == null) {
        page = 1;
    }
    form = $(form);
    filters = {};
    payload = {
        page: page,
        e: e,
        size: 12
    };
    sort_wrapper = $('.search-sort-direction');
    sort_by = sort_wrapper.find('.sort-by');
    if (sort_by.size() > 0 && sort_by.attr('rel').length > 0) {
        payload['sort'] = sort_by.attr('rel');
        direction = sort_wrapper.find('.sort-direction');
        if (direction.hasClass('up')) {
            payload['sort'] += ':asc';
        } else {
            payload['sort'] += ':desc';
        }
    }
    form.find('.simple-form-input[type=checkbox]:checked, .simple-form-input[type=radio]:checked').each(function() {
        if (($(this).val() != null) && $(this).val().length > 0) {
            if (payload[$(this).attr('name')] != null) {
                return payload[$(this).attr('name')] += ';' + $(this).val();
            } else {
                return payload[$(this).attr('name')] = $(this).val();
            }
        }
    });
    form.find('.simple-form-input[type=hidden]').each(function() {
        return payload[$(this).attr('name')] = $(this).val();
    });
    form.find('.search-filter').each(function() {
        var name, op, vals;
        name = $(this).attr('name');
        op = $(this).attr('rel');
        vals = [];
        $(this).find('.filter-option').each(function() {
            var extra, val;
            val = $(this).attr('rel');
            extra = $(this).find('.extra-filter-option:visible');
            extra.each(function() {
                var extra_info;
                extra_info = $(this).find('input').val();
                if ((extra_info != null) && extra_info.length > 0) {
                    return val += ':' + extra_info;
                }
            });
            return vals.push(val);
        });
        $(this).find('.filter-toggle:not(.inactive)').each(function() {
            return vals.push($(this).attr('rel'));
        });
        $(this).find('.filter-checkbox.selected').each(function() {
            if (($(this).attr('rel') != null) && $(this).attr('rel').length > 0) {
                return vals.push($(this).attr('rel'));
            }
        });
        $(this).find('input[type=checkbox]:checked, input[type=radio]:checked, select').each(function() {
            if ($(this).val() && $(this).val().length > 0) {
                return vals.push($(this).val());
            }
        });
        if (vals.length > 0) {
            return filters[name] = {
                operator: op,
                vals: vals
            };
        }
    });
    s = form.find("input[name='name']").val();
    e = form.attr('rev');
    if ((s != null) && s.length > 0) {
        payload['s'] = s;
    }
    c = 0;
    for (k in filters) {
        v = filters[k];
        c++;
    }
    if (c > 0) {
        payload['filters'] = JSON.stringify(filters);
    }
    urlparams = JSON.stringify(payload);
    if (urlparams === form.attr('urlparams')) {
        return;
    }
    form.attr('urlparams', urlparams);
    if (saved_advanced_search_timeout.timeoutID != null) {
        clearTimeout(saved_advanced_search_timeout.timeoutID);
    }
    saved_advanced_search_timeout.context = {
        page: page,
        form: form,
        e: e,
        term: s
    };
    saved_advanced_search_timeout.payload = payload;
    saved_advanced_search_timeout.timeoutID = setTimeout(search_form_ajax, 300);
    return $('.related-item-list').parent().addClass('waiting');
};

search_form_ajax = function() {
    return $.ajax({
        url: root_api_url + 'search/',
        data: saved_advanced_search_timeout.payload,
        contentType: 'application/json',
        context: saved_advanced_search_timeout.context,
        success: function(data) {
            return parseSearchData(data, this);
        }
    });
};


/*
"""
parseSearchData = (data, context) ->
  if context.e is 'bietduoc'
    return parseBietDuocSearch(data, context)
  if context.e is 'hoatchat'
    return parseHoatChatSearch(data, context)
"""
 */

openSearchFilterSelector = function(ele) {
    var filter, selector;
    selector = $(ele).closest('.search-filter-wrapper').children('.search-filter-selector');
    filter = $(ele).closest('.search-filter-wrapper').children('.search-filter');
    selector.children().slideToggle('fast');
    selector.children().children().show();
    return filter.children().each(function() {
        return selector.find('[rel=' + $(this).attr('rel') + ']').hide();
    });
};

addSearchFilterSelection = function(ele) {
    addSearchFilter($(ele), $(ele).closest('.search-form'), $(ele).closest('.search-filter-selector').siblings('.search-filter'), false);
    return $(ele).parent().slideUp('fast');
};

changeSort = function(element) {
    var label, rel, title;
    rel = $(element).attr('rel');
    title = $(element).text();
    label = $(element).closest('.dropdown').find('.sort-by');
    label.html(title);
    label.attr('rel', rel);
    return trigger_change($('.search-form'));
};

selectTab = function(ele) {
    $(ele).siblings().removeClass('selected');
    return $(ele).addClass('selected');
};

$(document).ready(function() {
    return $(".tab-selector span").each(function() {
        return $(this).off().click(function() {
            selectTab(this);
            return trigger_change($(this).parent());
        });
    });
});

template_allergy = function(d) {
    var t, w;
    w = $("<span>", {
        "class": 'allergy ' + d.type
    });
    if (d.type === 'hoatchat' || d.type === 'hoat_chat' || d.type === 'unii') {
        w.html(d.name);
        return w.click(function() {
            return window.location.href = root_url + '/unii/' + d.id;
        });
    } else {
        t = d.title;
        if (t == null) {
            t = d.name.title;
        }
        if (t == null) {
            t = d.name.title_en;
        }
        w.html(t);
        return w.click(function() {
            return window.location.href = root_url + '/biet_duoc/' + d.id;
        });
    }
};

template_bietduoc_list = function(e) {
    var alt_title, base_url, comp, ct, cty, cty_ele, d, dbc, dbc2, dbc3, dd, ele, hc, hce, i, id, j, len, len1, names, q, ref1, ref2, short_desc, thumb, title, title_ele;
    base_url = 'biet_duoc';
    if (e._type === 'interimdrug') {
        return template_interim_drug_list(e);
    }
    id = e.id;
    if (e.url_id != null) {
        id = e.url_id;
    }
    ele = $("<div>", {
        "class": "item row " + e._type,
        rel: id,
        rev: base_url
    });
    cty_ele = $("<div>");
    if (e.ctysx_id != null) {
        cty_ele.html("<a href=\"/doanh_nghiep/" + e.ctysx_id + "\">" + e.ctysx_name[0] + "</a>");
    } else if (e.ctysx_name != null) {
        cty_ele.html("" + e.ctysx_name[0]);
    } else if (e.cty_dannhan_id != null) {
        cty_ele.html("<a href=\"/doanh_nghiep/" + e.cty_dannhan_id + "\">" + e.cty_dannhan_name[0] + "</a>");
    } else if (e.cty_dannhan_name != null) {
        cty_ele.html("" + e.cty_dannhan_name[0]);
    }
    ele.append("<div class=\"clearfix\"></div>");
    dd = $("<div>");
    if ((e.dang_bao_che_name != null) && e.dang_bao_che_name.length > 1) {
        dd.append("<span>" + e.dang_bao_che_name[1] + "</span>");
    }
    if (e.duong_dung_raw != null) {
        names = [];
        ref1 = e.duong_dung_raw;
        for (j = 0, len = ref1.length; j < len; j++) {
            d = ref1[j];
            names.push(d.name);
        }
        if ((e.dang_bao_che_name != null) && e.dang_bao_che_name.length > 1) {
            dd.append(", ");
        }
        dd.append("<span>" + (names.join(', ')) + "</span>");
    } else if ((e.duong_dung_name != null) && e.duong_dung_name.length > 1) {
        if ((e.dang_bao_che_name != null) && e.dang_bao_che_name.length > 1) {
            dd.append(", ");
        }
        dd.append("<span>" + e.duong_dung_name[1] + "</span>");
    }
    title = e.title;
    if (!((title != null) && title.length > 0)) {
        title = e.title_en;
    } else {
        alt_title = e.title_en;
    }
    if (title == null) {
        title = "";
    }
    if (alt_title == null) {
        alt_title = "";
    }
    if (alt_title.length > 0) {
        alt_title = "(" + alt_title + ")";
    }
    thumb = e.thumbnail;
    if (thumb == null) {
        thumb = e.image;
    }
    if ((thumb != null) && thumb.length > 0) {
        thumb = $.trim(thumb);
        if (thumb.indexOf('http') < 0 && thumb.charAt(0) !== '/') {
            thumb = '/' + thumb;
        }
        ele.append("<div class=\"col-xs-3 col-sm-3 col-md-2 col-lg-1\">\n  <img src=\"" + thumb + "\" />\n</div>    ");
    } else {
        ele.append("<div class=\"col-xs-3 col-sm-3 col-md-2 col-lg-1\" style=\"text-align: center;\"><span class=\"icon camera huge\" style=\"opacity: 0.3\"></span></div>");
    }
    short_desc = e.summary;
    if (short_desc == null) {
        short_desc = "";
    }
    if ((e.dia_chi != null) && e.dia_chi.length > 0) {
        if ((short_desc != null) && short_desc.length > 0) {
            short_desc += '<br>';
        }
        short_desc += e.dia_chi;
    }
    title_ele = $("<div>", {
        "class": "col-xs-9 col-sm-4 col-md-4 col-lg-3"
    }).html("<div class=\"title\">" + title + " <div class=\"alt\">" + alt_title + "</div></div>");
    dbc3 = dd.clone();
    dbc3.addClass("hidden-lg hidden-md hidden-sm");
    dbc3.appendTo(title_ele);
    ct = cty_ele.clone();
    ct.addClass("hidden-lg");
    ct.appendTo(title_ele);
    title_ele.appendTo(ele);
    dbc = $("<div>", {
        "class": "col-lg-2 hidden-md hidden-sm hidden-xs"
    }).appendTo(ele);
    dbc.append(dd.clone());
    comp = $("<div>", {
        "class": "composition col-lg-3 col-md-6 col-sm-5"
    });
    dbc2 = $("<div>", {
        "class": "hidden-lg hidden-xs"
    }).appendTo(comp);
    dbc2.append(dd);
    ref2 = e.bietduochoatchat_set;
    for (i = q = 0, len1 = ref2.length; q < len1; i = ++q) {
        hc = ref2[i];
        hce = $("<div>").appendTo(comp);
        hce.append("<a class=\"link-yduoc\" href=\"/unii/" + hc.hoatchat_id + "\">" + hc.hoatchat_name + "</span>");
        if (hc.ham_luong != null) {
            hce.append("<span style=\"padding: 0px 4px;\">: " + hc.ham_luong + hc.don_vi + "</span>");
        }
    }
    comp.appendTo(ele);
    ele.click(function() {
        window.location.href = root_url + '/' + $(this).attr('rev') + '/' + $(this).attr('rel');
        return $.Event(event).stopPropagation();
    });
    cty = $("<div>", {
        "class": "col-lg-3 hidden-md hidden-xs hidden-sm"
    }).appendTo(ele);
    cty.append(cty_ele.clone());
    return ele;
};

template_bietduoc_tile = function(data) {
    var c, comp, i, j, len, ref1, thum, tile, title;
    if (data._type === 'interimdrug') {
        return template_interim_drug_tile(data);
    }
    tile = $("<div>", {
        "class": "tile clickable bietduoc",
        onclick: "window.location.href='/biet_duoc/" + data.id + "'"
    });
    title = data.title;
    if (title == null) {
        title = data.title_en;
    }
    if (title == null) {
        title = "";
    }
    tile.append("<div class=\"title\">\n    " + (capitalize(title.toLowerCase())) + "\n</div>");
    if ((data.thumbnail != null) && data.thumbnail.length > 0) {
        thum = data.thumbnail;
        if (thum.indexOf('http') < 0 && thum.charAt(0) !== '/') {
            thum = '/' + thum;
        }
        tile.append("<div class=\"thumbnail\">\n  <img src=\"" + thum + "\" />\n</div>");
    }
    if (data.ctysx_id != null) {
        tile.append("<div class=\"subtitle\">\n    <a href=\"/doanh_nghiep/" + data.ctysx_id + "\">" + data.ctysx_name[0] + "</a>\n</div>");
    } else if (data.ctysx_name != null) {
        tile.append("<div class=\"subtitle\">\n    " + data.ctysx_name[0] + "\n</div>");
    } else if (data.cty_dannhan_id) {
        tile.append("<div class=\"subtitle\">\n    <a href=\"/doanh_nghiep/" + data.cty_dannhan_id + "\">" + data.cty_dannhan_name[0] + "</a>\n</div>");
    } else {
        tile.append("<div class=\"subtitle\">\n    " + data.cty_dannhan_name[0] + "\n</div>");
    }
    comp = $("<div>", {
        "class": "composition"
    }).appendTo(tile);
    if (data.bietduochoatchat_set != null) {
        ref1 = data.bietduochoatchat_set;
        for (i = j = 0, len = ref1.length; j < len; i = ++j) {
            c = ref1[i];
            if (i < 5) {
                comp.append("<a href=\"/unii/" + c.hoatchat_id + "\">" + (capitalize(c.hoatchat_name.toLowerCase())) + "</a><span class=\"quantity\"> " + (c.ham_luong != null ? ':' + c.ham_luong : '') + " " + (c.don_vi != null ? c.don_vi : '') + " </span>");
            }
        }
    }
    tile.append("<div class=\"bottom-buttons\">\n  <span onclick=\"cookie_addPresItem(this, event)\" class=\"button full-width cookie-enabled\" rev=\"bietduoc\" rel=\"" + data.id + "\"><span class=\"icon prescription\">Kiểm tra đơn thuốc</span></span>\n  <div class=\"title\" style=\"display: none;\">" + title + " <span class=\"sub-title\">(" + data.cty_dannhan_name + ")</span></div>\n</div>");
    return tile;
};

template_drug_interaction = function(ttt, apinames) {
    var a, b, detail, f, infos, j, len, len1, len2, nhom_a, nhom_b, q, ref1, ref2, u, wrapper;
    if (apinames == null) {
        apinames = {};
    }
    wrapper = $("<div>", {
        "class": "med-interaction"
    });
    nhom_a = "";
    ref1 = ttt.reactor_A;
    for (j = 0, len = ref1.length; j < len; j++) {
        a = ref1[j];
        if (a.type === 'bietduoc') {
            nhom_a += "<span class='biet_duoc'><span class='icon pills med'></span> ";
            nhom_a += capitalize(a.title.toLowerCase());
            if ((a.reactor != null) && a.reactor.length > 0 && (apinames != null)) {
                if (apinames[a.reactor[0]] != null) {
                    nhom_a += "<span class='bietduoc-composition'><span class='icon test-tube small'>" + apinames[a.reactor[0]] + "</span></span>";
                }
            }
            nhom_a += " (" + a.reactor_name + ") ";
            nhom_a += "</span> ";
        }
        if (a.type === 'unii') {
            nhom_a += "<span class='icon test-tube small'></span> " + a.title + "";
        }
        if (ttt.reactor_A.length > 1) {
            nhom_a += "<br />";
        }
    }
    if (ttt.group_A != null) {
        nhom_a += "<span class='group_name'> (" + ttt.group_A + ")</span>";
    }
    nhom_b = "";
    ref2 = ttt.reactor_B;
    for (q = 0, len1 = ref2.length; q < len1; q++) {
        b = ref2[q];
        if (b.type === 'bietduoc') {
            nhom_b += " <span class='biet_duoc'><span class='icon pills med'></span> ";
            nhom_b += capitalize(b.title.toLowerCase());
            if ((a.reactor != null) && a.reactor.length > 0 && (apinames != null)) {
                if (apinames[a.reactor[0]] != null) {
                    nhom_b += "<span class='bietduoc-composition'><span class='icon test-tube small'>" + apinames[a.reactor[0]] + "</span></span>";
                }
            }
            nhom_b += " (" + b.reactor_name + ") ";
            nhom_b += "</span>";
        }
        if (b.type === 'unii') {
            nhom_b += "<span class='icon test-tube small'></span> " + b.title + "";
        }
        if (ttt.reactor_B.length > 1) {
            nhom_b += "<br />";
        }
    }
    if (ttt.group_B != null) {
        nhom_b += "<span class='group_name'> (" + ttt.group_B + ")</span>";
    }
    if (ttt.tuongtacthuoc != null) {
        if (ttt.muc_do_nghiem_trong == null) {
            ttt.muc_do_nghiem_trong = ttt.tuongtacthuoc.muc_do_nghiem_trong;
        }
        if (ttt.tom_tat == null) {
            ttt.tom_tat = ttt.tuongtacthuoc.tom_tat;
        }
        if (ttt.co_che == null) {
            ttt.co_che = ttt.tuongtacthuoc.co_che;
        }
        if (ttt.muc_do_y_nghia == null) {
            ttt.muc_do_y_nghia = ttt.tuongtacthuoc.muc_do_y_nghia;
        }
        if (ttt.thoi_gian_khoi_phat == null) {
            ttt.thoi_gian_khoi_phat = ttt.tuongtacthuoc.thoi_gian_khoi_phat;
        }
    }
    if (ttt.tom_tat == null) {
        ttt.tom_tat = '';
    }
    if (ttt.ket_qua == null) {
        ttt.ket_qua = '';
    }
    wrapper.html("<div class=\"summary\" onclick=\"$(this).siblings('.detail').slideToggle()\" style=\"cursor: pointer;padding-top: 10px; \">\n    <div class=\"row\">\n        <div class=\"col-md-6 col-sm-6\">\n            <span class=\"hidden-md hidden-lg\" style='margin-right: 2px;'>\n                " + (ttt_nghiem_trong(ttt.muc_do_nghiem_trong)) + "\n            </span>\n            <div><div class=\"col-md-6 col-sm-6\"><span class=\"group_A\">" + nhom_a + "</span></div><div class=\"col-md-6 col-sm-6\"> <span class=\"group_B\">" + nhom_b + "</span></div></div>\n        </div>\n        <div class=\"hidden-xs hidden-sm col-md-2\">\n            " + (ttt_nghiem_trong(ttt.muc_do_nghiem_trong)) + "\n        </div>\n        <div class=\"col-md-4 col-sm-6 hidden-xs co_che\">" + ttt.ket_qua + "</div>\n    </div>\n</div>");
    detail = $("<div>", {
        "class": "detail"
    }).hide().appendTo(wrapper);
    infos = [{
        field: 'co_che',
        title: 'Cơ chế'
    }, {
        field: 'canh_bao',
        title: 'Cảnh báo'
    }, {
        field: 'xu_ly',
        title: 'Quản lý lâm sàng'
    }, {
        field: 'ban_luan',
        title: 'Y văn'
    }, {
        field: 'tai_lieu_tham_khao',
        title: 'Tài liệu tham khảo'
    }];
    if (ttt.thoi_gian_khoi_phat != null) {
        detail.append("<div style=\"margin-top:5px;\">\n<span style=\"font-weight: bold; display: inline-block; min-width: 120px;\">Khởi phát:</span>  " + (ttt_khoi_phat(ttt.thoi_gian_khoi_phat)) + "</div>");
    }
    if (ttt.muc_do_y_nghia != null) {
        detail.append("<div style=\"margin-top:5px;\">\n    <span style=\"font-weight: bold; display: inline-block; min-width: 120px;\">Mức độ ý nghĩa:</span>  " + (ttt_y_nghia(ttt.muc_do_y_nghia)) + "</div>");
    }
    for (u = 0, len2 = infos.length; u < len2; u++) {
        f = infos[u];
        if (ttt[f.field] != null) {
            detail.append("<div class=\"header1\">" + f.title + ":</div>\n" + (ttt[f.field].replace("&nbsp;", "")));
        } else if ((ttt.tuongtacthuoc != null) && (ttt.tuongtacthuoc[f.field] != null)) {
            detail.append("<div class=\"header1\">" + f.title + ":</div>\n" + (ttt.tuongtacthuoc[f.field].replace("&nbsp;", "")));
        }
    }
    return wrapper;
};

ttt_y_nghia = function(lvl) {
    return "<div class=\"y-nghia level-" + lvl + "\"><div class=\"inner-bar\"></div></div> " + lvl + "/5";
};

ttt_khoi_phat = function(lvl) {
    switch (lvl) {
        case 1:
            return "<span class='icon speed_slow large' title='Chậm'></span><span class='hidden-sm hidden-xs'>Chậm</span>";
        case 2:
            return "<span class='icon speed_fast large' title='Nhanh'></span><span class='hidden-sm hidden-xs'>Nhanh</span>";
        default:
            return "";
    }
};

ttt_nghiem_trong = function(lvl, withtitle) {
    var str;
    if (withtitle == null) {
        withtitle = true;
    }
    str = "";
    switch (lvl) {
        case 1:
            str = "<span class='icon mild_reaction' title='Tương tác có tác động trên lâm sàng hạn chế. Có thể bao gồm sự tăng tần suất hoặc mức độ của các tác động phụ nhưng nhìn chung không cần phải thay đổi gì lớn trong trị liệu.'></span>";
            if (withtitle) {
                str += " <span class='hidden-sm hidden-xs'>Nhẹ</span>";
            }
            break;
        case 2:
            str = "<span class='icon middle_reaction' title='Tương tác có thể làm trầm trọng thêm tình trạng của bệnh nhân và/hoặc cần thay đổi trị liệu.'></span>";
            if (withtitle) {
                str += " <span class='hidden-sm hidden-xs'>Vừa phải</span>";
            }
            break;
        case 3:
            str = "<span class='icon serious_reaction' title='Tương tác có thể đe dọa tính mạng và/hoặc cần can thiệp y học để giảm thiểu hoặc ngăn chặn các tác động có hại nghiêm trọng.'></span>";
            if (withtitle) {
                str += " <span class='hidden-sm hidden-xs'>Nặng</span>";
            }
            break;
        case 4:
            str = "<span class='icon severe_reaction' title='Chống chỉ định sử dụng chung.'></span>";
            if (withtitle) {
                str += " <span class='hidden-sm hidden-xs'>Chống chỉ định</span>";
            }
            break;
        default:
            str = "<span class='' title='N/A'></span>";
            if (withtitle) {
                str += " <span class='hidden-sm hidden-xs'></span>";
            }
    }
    return str;
};

ttt_tai_lieu = function(lvl) {
    if (!((lvl != null) && lvl > 0 && lvl < 5)) {
        return "";
    }
    switch (lvl) {
        case 1:
            return "Khá";
        case 2:
            return "Tốt";
        case 3:
            return "Rất Tốt";
        default:
            return "";
    }
    return "<span style='color: #722; font-weight: bold;'>" + lvl + "</span>";
};

template_duoclieu_tile = function(data) {
    var c, comp, i, j, len, ref1, thum, tile, title;
    tile = $("<div>", {
        "class": "tile clickable bietduoc",
        onclick: "window.location.href='/duoc_lieu/" + data.id + "'"
    });
    title = data.title;
    if (title == null) {
        title = data.title_en;
    }
    if (title == null) {
        title = "";
    }
    tile.append("<div class=\"title\">\n    " + (capitalize(title.toLowerCase())) + "\n</div>");
    if ((data.thumbnail != null) && data.thumbnail.length > 0) {
        thum = data.thumbnail;
        if (thum.indexOf('http') < 0 && thum.charAt(0) !== '/') {
            thum = '/' + thum;
        }
        tile.append("<div class=\"thumbnail\">\n  <img src=\"" + thum + "\" />\n</div>");
    }
    comp = $("<div>", {
        "class": "composition"
    }).appendTo(tile);
    if (data.duoclieuhoatchat_set != null) {
        ref1 = data.duoclieuhoatchat_set;
        for (i = j = 0, len = ref1.length; j < len; i = ++j) {
            c = ref1[i];
            if (i < 5) {
                comp.append("<a href=\"/unii/" + c.hoatchat_id + "\">" + (capitalize(c.hoatchat_name.toLowerCase())) + "</a><span class=\"quantity\"> " + (c.ham_luong != null ? ':' + c.ham_luong : '') + " " + (c.don_vi != null ? c.don_vi : '') + " </span>");
            }
        }
    }
    return tile;
};

template_duplication = function(data, api_names) {
    var base_urls, dv, f, h, hc, hl, hls, info, is_group, j, l, len, len1, len2, q, quantity, ref1, ref2, ref3, u, w;
    if (api_names == null) {
        api_names = {};
    }
    base_urls = {
        'bietduoc': 'biet_duoc',
        'hoatchat': 'hoat_chat'
    };
    w = $("<div>", {
        "class": "duplication item",
        rel: "" + data.id
    });
    w.css({
        'margin-bottom': '8px'
    });
    is_group = false;
    h = $("<div>").appendTo(w);
    if ((data.group != null) && (data.members != null)) {
        h.append("<span style=\"font-weight: 400\">" + data.group.title + ":</span>");
        is_group = true;
    } else {
        h.append("<span class=\"unii\">" + data.title + ": </span>");
    }
    l = $("<span>", {
        "class": ""
    }).appendTo(w);
    ref1 = data.hc;
    for (j = 0, len = ref1.length; j < len; j++) {
        hc = ref1[j];
        h.append("<span class='bietduoc-composition related-item unii'>\n  <a class=\"title\" href=\"/hoat_chat/" + hc.id + "\" target=\"_blank\">" + hc.title + "</a>\n</span><span class=\"liason\">vs</span>");
    }
    ref2 = data.bd;
    for (q = 0, len1 = ref2.length; q < len1; q++) {
        hc = ref2[q];
        h.append("<span class='bietduoc-composition related-item bietduoc'>\n  <a class=\"title\" href=\"/biet_duoc/" + hc.id + "\" target=\"_blank\">" + hc.title + "</a>\n</span>\n<span class=\"liason\">vs</span>");
    }
    if (is_group) {
        return w;
    }
    quantity = $("<div>", {
        "class": "row"
    }).appendTo(w);
    quantity.css("padding-top", "8px");
    info = [{
        field: 'total',
        name: 'Tổng'
    }, {
        field: 'day',
        name: '1 ngày'
    }, {
        field: 'morning',
        name: 'Sáng'
    }, {
        field: 'lunch',
        name: 'Trưa'
    }, {
        field: 'afternoon',
        name: 'Chiều'
    }, {
        field: 'evening',
        name: 'Tối'
    }];
    for (u = 0, len2 = info.length; u < len2; u++) {
        f = info[u];
        if (data[f.field] != null) {
            hls = [];
            ref3 = data[f.field];
            for (dv in ref3) {
                hl = ref3[dv];
                if (hl > 1000) {
                    hl = Math.round(hl);
                } else if (hl > 100) {
                    hl = Math.round(hl * 10) / 10;
                } else if (hl > 1) {
                    hl = Math.round(hl * 100) / 100;
                }
                hls.push(hl + dv);
            }
            quantity.append("<div class=\"col-lg-2 col-md-3 col-sm-4 col-xs-6\">" + f.name + ": " + (hls.join(' + ')) + " </div>");
        }
    }

    /*
    if data.day?
        w.append "<div>Tổng hàm lượng theo liều:</div>"
        l = $("<ul>").appendTo w
        hls = []
        for dv,hl of data.day
            hls.push(hl + dv)
        l.append """
        <li>1 ngày: #{hls.join(' + ')} </li>
        """
        if data.morning?
            hls = []
            for dv,hl of data.morning
                hls.push(hl + dv)
            l.append """
            <li>Sáng: #{hls.join(' + ')} </li>
            """
        if data.lunch?
            hls = []
            for dv,hl of data.lunch
                hls.push(hl + dv)
            l.append """
            <li>Trưa: #{hls.join(' + ')} </li>
            """
        if data.afternoon?
            hls = []
            for dv,hl of data.afternoon
                hls.push(hl + dv)
            l.append """
            <li>Chiều: #{hls.join(' + ')} </li>
            """
        if data.evening?
            hls = []
            for dv,hl of data.evening
                hls.push(hl + dv)
            l.append """
            <li>Tối: #{hls.join(' + ')} </li>
            """
     */
    if (data.id != null) {
        w.click(function() {
            return window.location.href = "/hoat_chat/" + data.id;
        });
    }
    return w;
};


/*
template_duplication = (data) ->
  base_urls = {
  	'bietduoc': 'biet_duoc',
  	'hoatchat': 'hoat_chat'
  }

  w = $("<div>", {class: "row item", rel: "#{data.A.id}-#{data.B.id}", relA: data.A.id, relB: data.B.id})
  w.append """
    <div class="col-lg-offset-1 col-lg-4 col-md-5 col-sm-12 col-xs-12">
      <span class="related-item #{data.A.type}"><a class="title" href="/#{base_urls[data.A.type]}/#{data.A.id}">#{data.A.title}</a></span>
      <span style="color: #aaa; font-size: 0.8em;">vs.</span>
      <span class="related-item #{data.B.type}"><a class="title" href="/#{base_urls[data.B.type]}/#{data.B.id}">#{data.B.title}</a></span>
    </div>
  """
  l = $("<div>", {class: "col-lg-6 col-md-6 col-sm-12 col-sm-offset-1 col-xs-offset-1 col-xs-12"}).appendTo w
  for hc in data.dup
    l.append """
      <span class='bietduoc-composition related-item unii'>
        <a class="title" href="/hoat_chat/#{hc.id}">#{hc.title}</a>
      </span>
    """

  w
 */

template_hoatchat_tile = function(data) {
    var cnt, duoclieu_cnt, s, tile, title;
    tile = $("<div>", {
        "class": "tile clickable hoatchat",
        onclick: "window.location.href='/unii/" + data.id + "'"
    });
    title = data.title;
    if (title == null) {
        title = data.title_en;
    }
    if (title == null) {
        title = "";
    }
    cnt = data.total_cnt;
    if (cnt == null) {
        cnt = "0";
    }
    tile.append("<div class=\"title\">\n    " + (capitalize(title.toLowerCase())) + "\n</div>");
    s = getSubTitle(data);
    if ((s != null) && s.length > 0) {
        tile.append("<div class=\"subtitle\">\n    " + (capitalize(s)) + "\n</div>");
    }
    if (data.total_cnt > data.bietduoc_cnt) {
        data.id += '--';
    }
    duoclieu_cnt = data.duoclieu_cnt;
    if (cnt == null) {
        duoclieu_cnt = 0;
    }
    if (duoclieu_cnt > 0) {
        tile.append("<div class=\"gauge\">\n  <div class=\"row\">\n    <div class=\"col-sm-6\">\n      <div class=\"indicator\">" + cnt + "</div>\n      <div class=\"sub-title\"><a href=\"/biet_duoc/?ingredients=" + data.id + "\">Biệt Dược <img width=\"16\" height=\"16\" src=\"" + root_url + "/static/images/icons/circle_arrow_next.svg\"\"></a></div>\n    </div>\n    <div class=\"col-sm-6\">\n      <div class=\"indicator\">" + duoclieu_cnt + "</div>\n      <div class=\"sub-title\"><a href=\"/duoc_lieu/?ingredients=" + data.id + "\">Dược Liệu <img width=\"16\" height=\"16\" src=\"" + root_url + "/static/images/icons/circle_arrow_next.svg\"\"></a></div>\n    </div>\n  </div>\n</div>");
    } else {
        tile.append("<div class=\"gauge\">\n  <div class=\"indicator\">" + cnt + "</div>\n  <div class=\"sub-title\"><a href=\"/biet_duoc/?ingredients=" + data.id + "\">Biệt Dược <img width=\"16\" height=\"16\" src=\"" + root_url + "/static/images/icons/circle_arrow_next.svg\"\"></a></div>\n</div>");
    }
    tile.append("<div class=\"quick-links\" style=\"padding: 4px 30px 2px; border-top: solid 1px #f4f4f4; background-color: #fcfcfc;\">\n    <div class=\"row\">\n        <div class=\"col-xs-6\"><a style=\"color: #686;\" href=\"/hoat_chat/" + data.id + "/#chi_dinh\">Chỉ định</a></div>\n        <div class=\"col-xs-6\" style=\"text-align: right;\"><a style=\"color: #666;\" href=\"/hoat_chat/" + data.id + "?tab=tuong_tac\">Tương tác</a></div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-xs-7\"><a style=\"color: #866;\" href=\"/hoat_chat/" + data.id + "/#chong_chi_dinh\">Chống chỉ định</a></div>\n        <div class=\"col-xs-5\" style=\"text-align: right;\"><a style=\"color: #668;\" href=\"/hoat_chat/" + data.id + "?tab=tu_van\">Tư vấn</a></div>\n    </div>\n</div>\n");
    return tile;
};

template_interim_drug_list = function(e) {
    var alt_title, base_url, comp, ct, cty, cty_ele, dbc, dbc2, dbc3, dd, dd_list, ele, hc, hce, i, id, j, len, ref1, short_desc, thumb, title, title_ele;
    base_url = 'thuoc-doanh-nghiep';
    id = e.id;
    if (e.url_id != null) {
        id = e.url_id;
    }
    ele = $("<div>", {
        "class": "item row bietduoc",
        rel: id,
        rev: base_url
    });
    cty_ele = $("<div>");
    if (e.label_owner_name != null) {
        cty_ele.html("<a href=\"/doanh_nghiep/" + e.label_owner_id + "\">" + e.label_owner_name + "</a>");
    } else if (e.labeler_name != null) {
        cty_ele.html("<a href=\"/doanh_nghiep/" + e.labeler_id + "\">" + e.labeler_name + "</a>");
    } else if (e.producer_name != null) {
        cty_ele.html("<a href=\"/doanh_nghiep/" + e.producer_id + "\">" + e.producer_name + "</a>");
    }
    ele.append("<div class=\"clearfix\"></div>");
    dd = $("<div>");
    dd_list = [];
    if ((e.dong_goi_id != null) && e.dong_goi_id.length > 0) {
        dd_list = dd_list.concat(e.dong_goi_name.slice(0, e.dong_goi_id.length));
    }
    if ((e.bao_che_id != null) && e.bao_che_id.length > 0) {
        dd_list = dd_list.concat(e.dang_bao_che_name.slice(0, e.bao_che_id.length));
    }
    if ((e.duong_dung_id != null) && e.duong_dung_id.length > 0) {
        dd_list = dd_list.concat(e.duong_dung_name.slice(0, e.duong_dung_id.length));
    }
    dd.html(dd_list.join(', '));
    title = e.title;
    if (!((title != null) && title.length > 0)) {
        title = e.title_en;
    } else {
        alt_title = e.title_en;
    }
    if (title == null) {
        title = "";
    }
    if (alt_title == null) {
        alt_title = "";
    }
    if (alt_title.length > 0) {
        alt_title = "(" + alt_title + ")";
    }
    thumb = e.thumbnail;
    if (thumb == null) {
        thumb = e.image;
    }
    if ((thumb != null) && thumb.length > 0) {
        ele.append("<div class=\"col-xs-3 col-sm-3 col-md-2 col-lg-1\">\n  <img src=\"" + thumb + "\" />\n</div>");
    } else {
        ele.append("<div class=\"col-xs-3 col-sm-3 col-md-2 col-lg-1\" style=\"text-align: center;\"><span class=\"icon camera huge\" style=\"opacity: 0.3\"></span></div>");
    }
    short_desc = e.summary;
    if (short_desc == null) {
        short_desc = "";
    }
    if ((e.dia_chi != null) && e.dia_chi.length > 0) {
        if ((short_desc != null) && short_desc.length > 0) {
            short_desc += '<br>';
        }
        short_desc += e.dia_chi;
    }
    title_ele = $("<div>", {
        "class": "col-xs-9 col-sm-4 col-md-4 col-lg-3"
    }).html("<div class=\"title\">" + title + " <div class=\"alt\">" + alt_title + "</div></div>");
    dbc3 = dd.clone();
    dbc3.addClass("hidden-lg hidden-md hidden-sm");
    dbc3.appendTo(title_ele);
    ct = cty_ele.clone();
    ct.addClass("hidden-lg");
    ct.appendTo(title_ele);
    title_ele.appendTo(ele);
    dbc = $("<div>", {
        "class": "col-lg-2 hidden-md hidden-sm hidden-xs"
    }).appendTo(ele);
    dbc.append(dd.clone());
    comp = $("<div>", {
        "class": "composition col-lg-3 col-md-6 col-sm-5"
    });
    dbc2 = $("<div>", {
        "class": "hidden-lg hidden-xs"
    }).appendTo(comp);
    dbc2.append(dd);
    ref1 = e.interimdrugingredient_set;
    for (i = j = 0, len = ref1.length; j < len; i = ++j) {
        hc = ref1[i];
        hce = $("<div>").appendTo(comp);
        hce.append("<a class=\"link-yduoc\" href=\"/unii/" + hc.unii_id + "\">" + hc.name + "</span>");
        if (hc.quantity != null) {
            hce.append("<span style=\"padding: 0px 4px;\">: " + hc.quantity + hc.unit + "</span>");
        }
        comp.appendTo(ele);
    }
    ele.click(function() {
        window.location.href = root_url + '/' + $(this).attr('rev') + '/' + $(this).attr('rel');
        return $.Event(event).stopPropagation();
    });
    cty = $("<div>", {
        "class": "col-lg-3 hidden-md hidden-xs hidden-sm"
    }).appendTo(ele);
    cty.append(cty_ele.clone());
    return ele;
};

template_interim_drug_tile = function(data) {
    var c, comp, i, j, len, ref1, thum, tile, title;
    tile = $("<div>", {
        "class": "tile clickable bietduoc",
        onclick: "window.location.href='/biet_duoc/" + data.id + "'"
    });
    title = data.title;
    if (title == null) {
        title = data.title_en;
    }
    if (title == null) {
        title = "";
    }
    tile.append("<div class=\"title\">\n    " + (capitalize(title.toLowerCase())) + "\n</div>");
    if ((data.thumbnail != null) && data.thumbnail.length > 0) {
        thum = data.thumbnail;
        if (thum.indexOf('http') < 0 && thum.charAt(0) !== '/') {
            thum = '/' + thum;
        }
        tile.append("<div class=\"thumbnail\">\n  <img src=\"" + thum + "\" />\n  </div>");
    }
    if (data.label_owner_name != null) {
        tile.append("<div class=\"subtitle\">\n    <a href=\"/doanh_nghiep/" + data.label_owner_id + "\">" + data.label_owner_name + "</a>\n</div>");
    } else if (data.labeler_name != null) {
        tile.append("<div class=\"subtitle\">\n    <a href=\"/doanh_nghiep/" + data.labeler_id + "\">" + data.labeler_name + "</a>\n</div>");
    } else if (data.producer_name) {
        tile.append("<div class=\"subtitle\">\n    <a href=\"/doanh_nghiep/" + data.producer_id + "\">" + data.producer_name + "</a>\n</div>");
    }
    return tile;
    comp = $("<div>", {
        "class": "composition"
    }).appendTo(tile);
    if (data.bietduochoatchat_set != null) {
        ref1 = data.bietduochoatchat_set;
        for (i = j = 0, len = ref1.length; j < len; i = ++j) {
            c = ref1[i];
            if (i < 5) {
                comp.append("<a href=\"/unii/" + c.hoatchat_id + "\">" + (capitalize(c.hoatchat_name.toLowerCase())) + "</a><span class=\"quantity\"> " + (c.ham_luong != null ? ':' + c.ham_luong : '') + " " + (c.don_vi != null ? c.don_vi : '') + " </span>");
            }
        }
    }
    tile.append("<div class=\"bottom-buttons\">\n  <span onclick=\"cookie_addPresItem(this, event)\" class=\"button full-width cookie-enabled\" rev=\"bietduoc\" rel=\"" + data.id + "\"><span class=\"icon prescription\">Kiểm tra đơn thuốc</span></span>\n  <div class=\"title\" style=\"display: none;\">" + title + " <span class=\"sub-title\">(" + data.cty_dannhan_name + ")</span></div>\n</div>");
    return tile;
};

ttmt_ynghia = function(lvl) {
    switch (lvl) {
        case 1:
            return 'Thông tin tham khảo';
        case 2:
            return 'Sử dụng thận trọng';
        case 3:
            return 'Thận trọng  tối đa';
        case 4:
            return 'Khuyến cáo không dùng';
        case 5:
            return 'Chống chỉ định';
        default:
            return 'Chưa xác định';
    }
};

ttmt_qua_nhau_thai = function(lvl) {
    switch (lvl) {
        case 'M':
            return 'Có thể';
        case 'U':
            return 'Chưa biết';
        case 'N':
            return 'Không';
        case 'Y':
            return 'Có';
        default:
            return 'Chưa có dữ liệu';
    }
};

template_mangthai = function(ttt) {
    var detail, f, icon_name, infos, j, len, title, wrapper;
    wrapper = $("<div>", {
        "class": "med-interaction"
    });
    wrapper.css({
        'margin-bottom': '10px',
        'border-top': 'dotted 1px #aaa'
    });
    if (ttt.type === 'bietduoc') {
        title = ttt.name.title;
        if (title == null) {
            title = ttt.name.title_en;
        }
    } else {
        title = ttt.title;
    }
    if (title == null) {
        title = "";
    }
    if (ttt.yeu_to_nguy_co != null) {
        ttt.yeu_to_nguy_co = '<b>' + ttt.yeu_to_nguy_co + '</b>';
    } else {
        ttt.yeu_to_nguy_co = 'Chưa có dữ liệu';
    }
    if (ttt.khuyencao_mangthai_tomtat == null) {
        ttt.khuyencao_mangthai_tomtat = "";
    }
    icon_name = 'test-tube';
    if (ttt.type === 'bietduoc') {
        icon_name = 'pills';
    }
    wrapper.html("<div class=\"summary\" onclick=\"$(this).siblings('.detail').slideToggle()\" style=\"cursor: pointer;padding-top: 10px; \">\n    <div class=\"row\">\n        <div class=\"col-md-2 col-sm-3 col-xs-9\"><span class=\"" + icon_name + " icon\">" + title + "</span></div>\n        <div class=\"col-sm-3 col-md-2 hidden-xs\">\n            " + (ttmt_ynghia(ttt.muc_do_y_nghia)) + "\n        </div>\n        <div class=\"col-sm-3 col-md-2 col-xs-3\">\n            <span class=\"hidden-lg hidden-md hidden-sm\" style=\"font-size: 0.8em; color: #888;\">Nguy cơ: </span>" + ttt.yeu_to_nguy_co + "\n        </div>\n        <div class=\"col-xs-2 col-sm-3 col-md-2 hidden-xs\">\n            " + (ttmt_qua_nhau_thai(ttt.qua_nhau_thai)) + "\n        </div>\n        <div class=\"col-md-4 hidden-sm hidden-xs\">\n            " + ttt.khuyencao_mangthai_tomtat + "\n        </div>\n    </div>\n</div>");
    detail = $("<div>", {
        "class": "detail"
    }).hide().appendTo(wrapper);
    infos = [{
        field: 'ba_thang_dau',
        title: '3 tháng đầu thai kỳ'
    }, {
        field: 'ba_thang_giua',
        title: '3 tháng giữa thai kỳ'
    }, {
        field: 'ba_thang_cuoi',
        title: '3 tháng cuối thai kỳ'
    }, {
        field: 'khuyencao_mangthai',
        title: 'Khuyến cáo nguy hại cho phụ nữ mang thai'
    }, {
        field: 'khuyencao_baothai',
        title: 'Khuyến cáo nguy hại cho bào thai'
    }, {
        field: 'tai_lieu_tham_khao',
        title: 'Tài liệu tham khảo'
    }];
    detail.append("<div class=\"row\">\n  <div class=\"hidden-lg hidden-md hidden-sm col-xs-6\">Ý nghĩa</div>\n  <div class=\"hidden-lg hidden-md hidden-sm col-xs-6\">" + (ttmt_ynghia(ttt.muc_do_y_nghia)) + "</div>\n</div>\n<div class=\"row\">\n  <div class=\"hidden-lg hidden-md hidden-sm col-xs-6\">Qua nhau thai</div>\n  <div class=\"hidden-lg hidden-md hidden-sm col-xs-6\">" + (ttmt_qua_nhau_thai(ttt.qua_nhau_thai)) + "</div>\n</div>");
    for (j = 0, len = infos.length; j < len; j++) {
        f = infos[j];
        if ((ttt[f.field] != null) && ttt[f.field].length > 0) {
            detail.append("<div>\n    <h5>" + f.title + ":</h5>\n    " + ttt[f.field] + "\n</div>");
        }
    }
    return wrapper;

    /*
    console.log ttt
    for i in ttt.info
        if i.yeu_to_nguy_co?
            i.yeu_to_nguy_co = '<b>' + i.yeu_to_nguy_co + '</b>'
        else
            i.yeu_to_nguy_co = 'Chưa có dữ liệu'
        #i.khuyencao_mangthai_tomtat = i.khuyencao_mangthai unless i.khuyencao_mangthai_tomtat?
        i.khuyencao_mangthai_tomtat = "" unless i.khuyencao_mangthai_tomtat
  
    icon_name = ttt.type
    icon_name = 'pills' if ttt.type is 'bietduoc'
    icon_name = 'test-tube' if ttt.type is 'unii'
    wrapper.html """
    <div class="summary" onclick="$(this).siblings('.detail').slideToggle()" style="cursor: pointer;padding-top: 10px; ">
        <div class="row">
            <div class="col-md-2 col-sm-3 col-xs-9"><span class="#{icon_name} icon">#{ title }</span></div>
            <div class="col-sm-3 col-md-2 hidden-xs">
                #{ ttmt_ynghia(ttt.info[0].muc_do_y_nghia) }
            </div>
            <div class="col-sm-3 col-md-2 col-xs-3">
                <span class="hidden-lg hidden-md hidden-sm" style="font-size: 0.8em; color: #888;">Nguy cơ: </span>#{ ttt.info[0].yeu_to_nguy_co }
            </div>
            <div class="col-xs-2 col-sm-3 col-md-2 hidden-xs">
                #{ ttmt_qua_nhau_thai(ttt.info[0].qua_nhau_thai) }
            </div>
            <div class="col-md-4 hidden-sm hidden-xs">
                #{ ttt.info[0].khuyencao_mangthai_tomtat }
            </div>
        </div>
    </div>
      """
    detail = $("<div>", {class: "detail"}).hide().appendTo wrapper
  
    infos = [
        {
            field: 'ba_thang_dau'
            title: '3 tháng đầu thai kỳ'
        }
        {
            field: 'ba_thang_giua'
            title: '3 tháng giữa thai kỳ'
        }
        {
            field: 'ba_thang_cuoi'
            title: '3 tháng cuối thai kỳ'
        }
        {
            field: 'khuyencao_mangthai'
            title: 'Khuyến cáo nguy hại cho phụ nữ mang thai'
        }
        {
            field: 'khuyencao_baothai'
            title: 'Khuyến cáo nguy hại cho bào thai'
        }
        {
            field: 'tai_lieu_tham_khao'
            title: 'Tài liệu tham khảo'
        }
    ]
    return wrapper unless ttt.info? and ttt.info.length > 0
  
     * TODO multiple infos
    detail.append """
    <div class="row">
      <div class="hidden-lg hidden-md hidden-sm col-xs-6">Ý nghĩa</div>
      <div class="hidden-lg hidden-md hidden-sm col-xs-6">#{ ttmt_ynghia(ttt.info[0].muc_do_y_nghia) }</div>
    </div>
    <div class="row">
      <div class="hidden-lg hidden-md hidden-sm col-xs-6">Qua nhau thai</div>
      <div class="hidden-lg hidden-md hidden-sm col-xs-6">#{ ttmt_qua_nhau_thai(ttt.info[0].qua_nhau_thai) }</div>
    </div>
      """
  
    for f in infos
        if ttt.info[0][f.field]?
            detail.append """
        <div>
        <h5>#{f.title}:</h5>
        #{ ttt.info[0][f.field] }
        </div>
      """
  
    wrapper
     */
};

sex_name = function(v) {
    if (v === 'F') {
        return "Nữ";
    }
    if (v === 'M') {
        return "Nam";
    }
    return "Chưa xác định";
};

template_patient_info = function(data) {
    var di, dir, hc, hc_name, info, infor, ref1, ref2, ref3, ref4, w;
    w = $("<div>", {
        "class": 'patient-info',
        rel: data.pk
    });
    w.append("<div class=\"row\">\n    <div class=\"col-lg-2 col-lg-offset-3 col-md-2 col-md-offset-3 col-sm-3 col-xs-4\">\n        <label>Mã số bệnh nhân</label>\n    </div>\n    <div class=\"col-lg-4 col-md-4 col-sm-9 col-xs-8\">\n        <b class=\"info\" rel=\"id\">" + data.code + "</b>\n    </div>\n</div>\n<div class=\"row\">\n    <div class=\"col-lg-2 col-lg-offset-3 col-md-2 col-md-offset-3 col-sm-3 col-xs-4\">\n        <label>Tên bệnh nhân</label>\n    </div>\n    <div class=\"col-lg-4 col-md-4 col-sm-9 col-xs-8\">\n        <b class=\"info\" rel=\"name\">" + data.name + "</b>\n    </div>\n</div>\n<div class=\"row\">\n    <div class=\"col-lg-2 col-lg-offset-3 col-md-2 col-md-offset-3 col-sm-3 col-xs-4\">\n        <label>Ngày sinh</label>\n    </div>\n    <div class=\"col-lg-4 col-md-4 col-sm-9 col-xs-8 info\" rel=\"birthday\">\n        " + data.birthday + "\n    </div>\n</div>\n<div class=\"row\">\n    <div class=\"col-lg-2 col-lg-offset-3 col-md-2 col-md-offset-3 col-sm-3 col-xs-4\">\n        <label>Giới tính</label>\n    </div>\n    <div class=\"col-lg-4 col-md-4 col-sm-9 col-xs-8 info\" rel=\"sex\" value=\"" + data.sex + "\">" + (sex_name(data.sex)) + "</div>\n</div>");
    if (data.smoking || data.alcohol || data.liver_failure || data.kidney_failure || data.pregnant || data.breeding) {
        infor = $("<div>", {
            "class": "row"
        }).appendTo(w);
        infor.append("<div class='col-lg-2 col-lg-offset-3 col-md-2 col-md-offset-3 col-sm-3'><label>Thông tin khác</label></div>");
        info = $("<div>", {
            "class": "col-lg-4 col-md-4 col-sm-9"
        }).appendTo(infor);
        if (data.smoking) {
            info.append("<div class='info' rel='smoking'>Hút thuốc</div>");
        }
        if (data.alcohol) {
            info.append("<div class='info' rel='alcohol'>Uống rượu</div>");
        }
        if (data.liver_failure) {
            info.append("<div class='info' rel='liver_failure'>Suy gan</div>");
        }
        if (data.kidney_failure) {
            info.append("<div class='info' rel='kidney_failure'>Suy thận</div>");
        }
        if (data.pregnant) {
            info.append("<div class='info' rel='pregnant'>Mang thai</div>");
        }
        if (data.breeding) {
            info.append("<div class='info' rel='breeding'>Cho con bú</div>");
        }
    }
    if ((data.hcdu != null) || (data.bddu != null)) {
        dir = $("<div>", {
            "class": "row"
        }).appendTo(w);
        dir.append("<div class=\"col-lg-2 col-lg-offset-3 col-md-2 col-md-offset-3 col-sm-3\">\n    <label>Dị ứng thuốc</label>\n</div>");
        di = $("<div>", {
            "class": "col-lg-4 col-md-4 col-sm-9 filter-options",
            rel: 'drug_allergy'
        }).appendTo(dir);
    }
    if (data.hcdu != null) {
        ref1 = data.hcdu;
        for (hc in ref1) {
            hc_name = ref1[hc];
            di.append("<div class=\"filter-option\" rev=\"unii\" rel=\"" + hc + "\">\n    <span class=\"icon test-tube small\"></span> <span class=\"title\">" + hc_name + "</span>\n</div>");
        }
    }
    if (data.bddu != null) {
        ref2 = data.bddu;
        for (hc in ref2) {
            hc_name = ref2[hc];
            di.append("<div class=\"filter-option\" rev=\"bietduoc\" rel=\"" + hc + "\">\n    <span class=\"icon pills small\"></span> <span class=\"title\">" + hc_name + "</span>\n</div>");
        }
    }
    if ((data.base_disease != null) && data.base_disease.length > 0) {
        dir = $("<div>", {
            "class": "row"
        }).appendTo(w);
        dir.append("<div class=\"col-lg-2 col-lg-offset-3 col-md-2 col-md-offset-3 col-sm-3\">\n    <label>Bệnh nền</label>\n</div>");
        di = $("<div>", {
            "class": "col-lg-4 col-md-4 col-sm-9 filter-options",
            rel: 'base_disease'
        }).appendTo(dir);
        ref3 = data.base_disease;
        for (hc in ref3) {
            hc_name = ref3[hc];
            di.append("<div class=\"filter-option\" rev=\"benh\" rel=\"" + hc + ">\n    <span class=\"icon health-record\"></span> <span class=\"title\">" + hc_name + "</span>\n</div>");
        }
    }
    if ((data.family_disease != null) && data.family_disease.length > 0) {
        dir = $("<div>", {
            "class": "row"
        }).appendTo(w);
        dir.append("<div class=\"col-lg-2 col-lg-offset-3 col-md-2 col-md-offset-3 col-sm-3\">\n    <label>Lịch sử bệnh gia đình</label>\n</div>");
        di = $("<div>", {
            "class": "col-lg-4 col-md-4 col-sm-9 filter-options",
            rel: 'family_disease'
        }).appendTo(dir);
        ref4 = data.family_disease;
        for (hc in ref4) {
            hc_name = ref4[hc];
            di.append("<div class=\"filter-option\" rev=\"benh\" rel=\"" + hc + "\">\n    <span class=\"icon health-record\"></span> <span class=\"title\">" + hc_name + "</span>\n</div>");
        }
    }
    if (data.food != null) {
        w.append("<div class=\"row\">\n    <div class=\"col-lg-2 col-lg-offset-3 col-md-2 col-md-offset-3 col-sm-3 col-xs-4\">\n        <label>Chế độ ăn</label>\n    </div>\n    <div class=\"col-lg-4 col-md-4 col-sm-9 col-xs-8 info\" rel=\"food\">" + data.food + "</div>\n</div>");
    }
    if (data.food_allergy != null) {
        w.append("<div class=\"row\">\n    <div class=\"col-lg-2 col-lg-offset-3 col-md-2 col-md-offset-3 col-sm-3 col-xs-4\">\n        <label>Dị ứng độ ăn</label>\n    </div>\n    <div class=\"col-lg-4 col-md-4 col-sm-9 col-xs-8 info\" rel=\"food_allergy\">" + data.food_allergy + "</div>\n</div>");
    }
    w.append("<div class=\"row\" style=\"margin-top: 20px;\">\n    <div class=\"col-lg-3 col-lg-offset-3 col-md-4 col-md-offset-2 col-xs-6\">\n        <span class=\"button full-width red\" onclick=\"resetPrescription()\">BỆNH NHÂN KHÁC</span>\n    </div>\n    <div class=\"col-lg-3 col-md-4 col-xs-6\">\n        <span class=\"button full-width blue\" onclick=\"onUpdatePatientInfo($(this).closest('.patient-info'))\">CẬP NHẬT</span>\n    </div>\n</div>");
    return w;
};

onUpdatePatientInfo = function(wrapper) {
    var checkboxes, form;
    resetPrescription();
    form = $('#new-patient-form');
    form.attr('type', 'PUT');
    wrapper.find('.filter-options').each(function() {
        var counter_part, icon, id, name, results1, v, vals;
        name = $(this).attr('rel');
        vals = {};
        $(this).children('.filter-option').each(function() {
            return vals[$(this).attr('rel')] = $(this).find('.title').text();
        });
        counter_part = form.find(".filter-options[rel=" + name + "]");
        icon = "";
        switch (name) {
            case 'drug_allergy':
                icon = "<span class='icon pills small'></span>";
                break;
            case 'api_allergy':
                icon = "<span class='icon test-tube small'></span>";
        }
        results1 = [];
        for (id in vals) {
            v = vals[id];
            results1.push(counter_part.append("<div class=\"filter-option\" rel=\"" + id + "\">\n    " + icon + "<span class=\"title\">" + v + "</span>\n</div>"));
        }
        return results1;
    });
    checkboxes = ['smoking', 'alcohol', 'pregnant', 'breeding', 'liver_failure', 'kidney_failure'];
    wrapper.find('.info').each(function() {
        var name, v;
        name = $(this).attr('rel');
        if (name === 'sex') {
            v = $(this).attr('value');
            if (v != null) {
                return form.find("input[type=radio][name=sex][value='" + v + "']").attr('checked', 'checked');
            }
        } else if (checkboxes.indexOf(name) >= 0) {
            return form.find("input[type=checkbox][name=" + name + "]").prop('checked', true);
        } else {
            return form.find("input[type=text][name=" + name + "], textarea[name=" + name + "]").val($.trim($(this).text()));
        }
    });
    form.find("input[type=text][name=id]").attr('readonly', 'readonly');
    $('#retrieve-patient-form').hide();
    return form.fadeIn('fast');
};


/*
delDiUng = (ele) ->
    type = $(ele).attr 'rev'
    id = $(ele).attr 'rel'
    patient = $(ele).closest('.patient-info').attr 'rel'
    $.ajax({
        url: root_api_url + 'patients/' + patient + '/di_ung/'
        type: 'PUT'
        data: {type: type, id: id}
    })
    $(ele).parent().fadeOut 'fast', () ->
        $(this).remove()

addDiUng = (form) ->
    id = form.attr 'rel'
    type = form.attr 'rev'
    name = form.attr 'title'
    icon = ''
    if type is 'unii' or type is 'hoatchat' or type is 'hoat_chat'
        icon = 'test-tube'
    else if type is 'bietduoc' or type is 'biet_duoc'
        icon = 'pills'

    patient = form.closest('.patient-info').attr 'rel'
    $.ajax({
        url: root_api_url + 'patients/' + patient + '/di_ung/'
        type: 'POST'
        data: {type: type, id: id}
    })

    $(form).find('input').val ''
    $(form).find('.search-result').hide()
    $(form).parent().append """
        <div class="allergy #{type}" rel="#{type}" style="margin-top: 10px;">
            <span class="icon cancel clickable" rev="#{type}" rel="#{id}" onclick="delDiUng(this)"></span>
            <span class="icon #{icon}">#{name}</span>
        </div>
    """
 */

template_thuocla = function(ttt) {
    var co_che, detail, f, i, infos, j, len, len1, len2, q, ref1, title, u, wrapper;
    wrapper = $("<div>");
    wrapper.css({
        'margin-bottom': '10px',
        'border-top': 'dotted 1px #aaa'
    });
    console.log(ttt);
    if (ttt.type === 'bietduoc') {
        title = ttt.name.title;
        if (title == null) {
            title = ttt.name.title_en;
        }
    } else {
        title = ttt.name;
    }
    if (title == null) {
        title = ttt.title;
    }
    if (title == null) {
        title = "";
    }
    if (ttt.info != null) {
        ref1 = ttt.info;
        for (j = 0, len = ref1.length; j < len; j++) {
            i = ref1[j];
            if (!i.co_che) {
                i.co_che = "";
            }
        }
    }
    co_che = "";
    if (ttt.co_che != null) {
        co_che = ttt.co_che;
    } else if ((ttt.info != null) && ttt.info.length > 0) {
        co_che = ttt.info[0].co_che;
    }
    wrapper.html("<div class=\"summary\" onclick=\"$(this).siblings('.detail').slideToggle()\" style=\"cursor: pointer;padding-top: 10px; \">\n    <div class=\"row\">\n        <div class=\"col-md-3 col-sm-3 col-xs-12\"><span class=\"" + ttt.type + " button\">" + title + "</span></div>\n        <div class=\"col-md-9 col-sm-9 hidden-xs\">\n            " + co_che + "\n        </div>\n    </div>\n</div>");
    detail = $("<div>", {
        "class": "detail"
    }).hide().appendTo(wrapper);
    infos = [{
        field: 'tac_dong',
        title: 'Tác động'
    }, {
        field: 'tai_lieu_tham_khao',
        title: 'Tài liệu tham khảo'
    }];
    detail.append("<div class=\"hidden-lg hidden-md hidden-sm\">\n  <h5>Cơ chế</h5>\n  <div>" + co_che + "</div>\n</div>");
    for (q = 0, len1 = infos.length; q < len1; q++) {
        f = infos[q];
        if (ttt[f.field] != null) {
            detail.append("<div>\n<h5>" + f.title + ":</h5>\n" + ttt[f.field] + "\n</div>");
        }
    }
    if (!((ttt.info != null) && ttt.info.length > 0)) {
        return wrapper;
    }
    for (u = 0, len2 = infos.length; u < len2; u++) {
        f = infos[u];
        if (ttt.info[0][f.field] != null) {
            detail.append("<div>\n<h5>" + f.title + ":</h5>\n" + ttt.info[0][f.field] + "\n</div>");
        }
    }
    return wrapper;
};

template_tuongtacthuoc = function(ttt) {
    var detail, f, infos, j, len, nhom_a, nhom_b, t, wrapper;
    wrapper = $("<div>", {
        "class": "med-interaction"
    });
    wrapper.css({
        'margin-bottom': '10px',
        'border-top': 'dotted 1px #aaa'
    });
    nhom_a = "";
    if (ttt.bd_A) {
        t = ttt.bd_A.title;
        if (t == null) {
            t = ttt.bd_A.title_en;
        }
        nhom_a = "<span class='biet_duoc'><span class='icon pills med'></span> " + t + "</span>";
    } else {
        nhom_a = "<span class='icon test-tube small'> " + ttt.hc_A_name + "</span>";
    }
    nhom_b = "";
    if (ttt.bd_B) {
        t = ttt.bd_B.title;
        if (t == null) {
            t = ttt.bd_B.title_en;
        }
        nhom_b = "<span class='biet_duoc'><span class='icon pills med'></span> " + t + "</span>";
    } else {
        nhom_b = "<span class='icon test-tube small'> " + ttt.hc_B_name + "</span>";
    }
    if (ttt.tuongtacthuoc != null) {
        if (ttt.muc_do_nghiem_trong == null) {
            ttt.muc_do_nghiem_trong = ttt.tuongtacthuoc.muc_do_nghiem_trong;
        }
        if (ttt.tom_tat == null) {
            ttt.tom_tat = ttt.tuongtacthuoc.tom_tat;
        }
        if (ttt.co_che == null) {
            ttt.co_che = ttt.tuongtacthuoc.co_che;
        }
        if (ttt.muc_do_y_nghia == null) {
            ttt.muc_do_y_nghia = ttt.tuongtacthuoc.muc_do_y_nghia;
        }
        if (ttt.thoi_gian_khoi_phat == null) {
            ttt.thoi_gian_khoi_phat = ttt.tuongtacthuoc.thoi_gian_khoi_phat;
        }
        if (ttt.muc_do_chung_cu_lam_sang == null) {
            ttt.muc_do_chung_cu_lam_sang = ttt.tuongtacthuoc.chung_cu_lam_sang;
        }
    }
    if (ttt.tom_tat == null) {
        ttt.tom_tat = '';
    }
    wrapper.html("<div class=\"summary\" onclick=\"$(this).siblings('.detail').slideToggle()\" style=\"cursor: pointer;padding-top: 10px; \">\n    <div class=\"row\">\n        <div class=\"col-md-3 col-sm-4\"><b>" + (nhom_a + ' - ' + nhom_b) + "</b></div>\n        <div class=\"col-xs-2 col-sm-1 col-md-1\">\n            " + (ttt_nghiem_trong(ttt.muc_do_nghiem_trong)) + "\n        </div>\n        <div class=\"col-xs-2 col-sm-1 col-md-1\">\n            " + (ttt_y_nghia(ttt.muc_do_y_nghia)) + "\n        </div>\n        <div class=\"col-xs-2 col-sm-1 col-md-1\">\n            " + (ttt_khoi_phat(ttt.thoi_gian_khoi_phat)) + "\n        </div>\n        <div class=\"col-xs-4 col-sm-1 col-md-1\">\n            " + (ttt_tai_lieu(ttt.muc_do_chung_cu_lam_sang)) + "</p>\n        </div>\n        <div class=\"col-md-5 col-sm-4 hidden-xs co_che\">" + ttt.tom_tat + "</div>\n    </div>\n</div>");
    detail = $("<div>", {
        "class": "detail"
    }).hide().appendTo(wrapper);
    infos = [{
        field: 'co_che',
        title: 'Cơ chế'
    }, {
        field: 'ket_qua',
        title: 'Tác động'
    }, {
        field: 'canh_bao',
        title: 'Cảnh báo'
    }, {
        field: 'xu_ly',
        title: 'Quản lý lâm sàng'
    }, {
        field: 'ban_luan',
        title: 'Y văn'
    }, {
        field: 'tai_lieu_tham_khao',
        title: 'Tài liệu tham khảo'
    }];
    for (j = 0, len = infos.length; j < len; j++) {
        f = infos[j];
        if (ttt[f.field] != null) {
            detail.append("<div>\n<h4>" + f.title + ":</h4>\n" + ttt[f.field] + "\n</div>");
        } else if ((ttt.tuongtacthuoc != null) && (ttt.tuongtacthuoc[f.field] != null)) {
            detail.append("<div>\n<h4>" + f.title + ":</h4>\n" + ttt.tuongtacthuoc[f.field] + "\n</div>");
        }
    }
    return wrapper;
};

ttt_data = {
    hoatchat: {},
    bietduoc: {}
};

goto_reaction = function() {
    var allergy_hoder, bds, du_bds, du_hcs, hcs, holder, payload;
    holder = $('.reactor_list');
    bds = [];
    hcs = [];
    holder.children().each(function() {
        var i, t;
        t = $(this).attr('rev');
        i = $(this).attr('rel');
        if (t === 'bietduoc') {
            return bds.push(i);
        } else {
            return hcs.push(i);
        }
    });
    allergy_hoder = $('.allergy_list');
    du_bds = [];
    du_hcs = [];
    allergy_hoder.children().each(function() {
        var i, t;
        t = $(this).attr('rev');
        i = $(this).attr('rel');
        if (t === 'bietduoc' || t === 'biet_duoc') {
            return du_bds.push(i);
        } else {
            return du_hcs.push(i);
        }
    });
    payload = {};
    if (bds.length > 0) {
        payload.bd = bds.join(',');
    }
    if (hcs.length > 0) {
        payload.hc = hcs.join(',');
    }
    if (du_bds.length > 0) {
        payload.bddu = du_bds.join(',');
    }
    if (du_hcs.length > 0) {
        payload.hcdu = du_hcs.join(',');
    }
    return window.location.href = "/tuong_tac/?" + $.param(payload);
};

check_reaction = function() {
    var allergy_hoder, bds, du_bds, du_hcs, hcs, holder, payload;
    holder = $('.reactor_list');
    bds = [];
    hcs = [];
    holder.children().each(function() {
        var i, t;
        t = $(this).attr('rev');
        i = $(this).attr('rel');
        if (t === 'bietduoc') {
            return bds.push(i);
        } else {
            return hcs.push(i);
        }
    });
    allergy_hoder = $('.allergy_list');
    du_bds = [];
    du_hcs = [];
    allergy_hoder.children().each(function() {
        var i, t;
        t = $(this).attr('rev');
        i = $(this).attr('rel');
        if (t === 'bietduoc' || t === 'biet_duoc') {
            return du_bds.push(i);
        } else {
            return du_hcs.push(i);
        }
    });
    payload = {
        bd: bds.join(','),
        hc: hcs.join(','),
        bddu: du_bds.join(','),
        hcdu: du_hcs.join(',')
    };
    ga('send', 'event', 'tuongtac', 'submit', JSON.stringify(payload));
    $('.reaction_results').closest('.full-width-content').addClass('waiting');
    $('#error-messages').empty();
    return $.ajax({
        url: root_api_url + 'tuong_tac_thuoc/',
        data: payload,
        success: function(data) {
            return parseReactionResult(data);
        },
        error: function(response) {
            $('.reaction_results').closest('.full-width-content').removeClass('waiting');
            if (response.status === 406 && (response.responseJSON != null) && (response.responseJSON.message != null)) {
                return $('#error-messages').append("<div style=\"margin-top: 20px;\" class=\"alert alert-danger alert-dismissible\" role=\"alert\">\n<button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n" + response.responseJSON.message + "\n</div>");
            } else {
                return $('#error-messages').append("<div style=\"margin-top: 20px;\" class=\"alert alert-danger alert-dismissible\" role=\"alert\">\n<button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\nCó lỗi xảy ra trong quá trình kiểm tra tương tác!</div>");
            }
        }
    });
};

parseReactionResult = function(data) {
    var count, d, f, h, holder, infos, j, len, len1, q, ref1, section, w;
    $('.reaction_results').closest('.full-width-content').removeClass('waiting');
    if (data.group_duplications != null) {
        if (data.duplications == null) {
            data.duplications = [];
        }
        data.duplications = data.duplications.concat(data.group_duplications);
    }
    infos = [{
        field: 'du',
        rel: 'allergy',
        selector: '.allergy_results',
        template: template_allergy
    }, {
        field: 'drug_interaction',
        rel: 'interaction',
        selector: '.reaction_results',
        template: template_drug_interaction
    }, {
        field: 'mangthai',
        rel: 'mang_thai',
        selector: '.mang_thai_list',
        template: template_mangthai
    }, {
        field: 'thuocla',
        rel: 'thuoc_la',
        selector: '.thuoc_la_list',
        template: template_thuocla
    }, {
        field: 'duplications',
        rel: 'duplication',
        selector: '.duplication_list',
        template: template_duplication
    }];
    for (j = 0, len = infos.length; j < len; j++) {
        f = infos[j];
        holder = $(f.selector);
        section = holder.parent();
        section.parent().removeClass('waiting');
        holder.children(':not(.no-result)').remove();
        h = $(".full-width-content.statistic span[rel='" + f.rel + "']");
        count = 0;
        if (data[f.field] != null) {
            count = data[f.field].length;
        }
        $(".counter[rel='" + f.rel + "']").html(count);
        if ((data[f.field] != null) && data[f.field].length > 0) {
            holder.children('.no-result').hide();
            section.children('.header').fadeIn('fast');
            section.children('h4').removeClass('inactive');
            h.removeClass('inactive').children('.counter').html(data[f.field].length);
            ref1 = data[f.field];
            for (q = 0, len1 = ref1.length; q < len1; q++) {
                d = ref1[q];
                w = f.template(d, data.hoatchat_name);
                w.hide().appendTo(holder);
                w.fadeIn('fast');
            }
        } else {
            h.addClass('inactive').children('.counter').html(0);
            section.children('.header').fadeOut('fast');
            section.children('h4').addClass('inactive');
            holder.children('.no-result').fadeIn('fast');
        }
    }
    return parseTTT(data);
};

ttt_add_hc = function(ele) {
    var d, data, id, input, j, len, me, obj, ref1, rev;
    me = $(ele);
    rev = me.attr('rev');
    id = me.attr('rel');
    if (!((id != null) && id.length > 1)) {
        return;
    }
    ga('send', 'event', 'ttt', rev, id);
    rev = rev.replace('_', '');
    data = search_results[me.closest('.search-wrapper').attr('id')];
    input = me.find('input');
    me.attr('rev', '');
    me.attr('rel', '');
    ref1 = data.data;
    for (j = 0, len = ref1.length; j < len; j++) {
        d = ref1[j];
        if (d._type === rev && d.id === id) {
            obj = d;
            break;
        }
    }
    input.val('');
    return ttt_add_reactor(obj);
};

ttt_add_reactor = function(obj) {
    var base_type, cc, exist, existed, existing, h, hc, hcs, holder, id, j, k, len, len1, len2, name, o, q, ref1, ref2, ref3, ref4, ref5, rev, ttt_holder, u, w;
    if (obj == null) {
        return;
    }
    existed = false;
    cc = 0;
    ref1 = ttt_data.bietduoc;
    for (o in ref1) {
        k = ref1[o];
        cc += 1;
    }
    ref2 = ttt_data.hoatchat;
    for (o in ref2) {
        k = ref2[o];
        cc += 1;
    }
    if (cc >= 30) {
        return;
    }
    id = obj.id;
    rev = obj._type;
    base_type = 'unii';
    switch (rev) {
        case 'bietduoc':
            base_type = 'biet_duoc';
            break;
        case 'hoatchat':
            base_type = 'hoat_chat';
    }
    if (obj._type === 'bietduoc') {
        ref3 = ttt_data.bietduoc;
        for (k = j = 0, len = ref3.length; j < len; k = ++j) {
            o = ref3[k];
            if (obj.id === o) {
                existed = true;
                break;
            }
        }
        if (!existed) {
            ttt_data.bietduoc[obj.id] = obj;
        }
    }
    if (obj._type === 'unii' || obj._type === 'hoatchat') {
        ref4 = ttt_data.hoatchat;
        for (k = q = 0, len1 = ref4.length; q < len1; k = ++q) {
            o = ref4[k];
            if (obj.id === o) {
                existed = true;
                break;
            }
        }
        if (!existed) {
            ttt_data.hoatchat[obj.id] = obj;
        }
    }
    name = obj.title;
    if (name == null) {
        name = obj.alt_title;
    }
    if (name == null) {
        name = obj.title_en;
    }
    holder = $('.reactor_list');
    ttt_holder = $('.reaction_list');
    exist = holder.children("[rel='" + id + "']");
    if (exist.size() > 0) {
        exist.animate({
            opacity: 0.5
        }, 200, function() {
            return $(this).animate({
                opacity: 1
            }, 200);
        });
        return;
    }
    if (existed) {
        return;
    }
    existing = [];
    holder.find("[rev='unii'], [rev='hoatchat']").each(function() {
        return existing.push($(this).attr('rel'));
    });
    hc = $("<div>", {
        "class": "related-item " + rev,
        rev: rev,
        rel: id
    }).hide().appendTo(holder);
    hc.html("<span class=\"icon cancel clickable effect-fade\" onclick=\"ttt_del_hc(this)\"></span>\n<a class=\"title\" href=\"/" + base_type + "/" + id + "\">" + name + "</a>");
    hcs = [id];
    if (rev === 'bietduoc' && (obj.bietduochoatchat_set != null) && obj.bietduochoatchat_set.length > 0) {
        hcs = [];
        ref5 = obj.bietduochoatchat_set;
        for (u = 0, len2 = ref5.length; u < len2; u++) {
            h = ref5[u];
            hcs.push(h.hoatchat_id);
            w = $("<span>", {
                "class": 'bietduoc-composition related-item unii',
                rev: 'unii',
                rel: h.hoatchat_id
            }).appendTo(hc);
            if (h.ham_luong != null) {
                w.html("<a class='title' href=\"/unii/" + h.hoatchat_id + "\">" + h.hoatchat_name + "</a>: " + h.ham_luong + " " + h.don_vi);
            } else {
                w.html(h.hoatchat_name);
            }
        }
    }
    return hc.fadeIn('fast');
};

openReactionDetail = function(ele) {
    var el, modal, wrapper;
    modal = $("<div>", {
        "class": 'modal-layer gray'
    }).hide().appendTo($('body'));
    modal.click(function() {
        return $(this).fadeOut('fast', function() {
            return $(this).remove();
        });
    });
    wrapper = $("<div>", {
        "class": 'reaction'
    }).appendTo(modal);
    wrapper.css({
        'overflow-y': 'scroll',
        position: 'absolute',
        top: '10px',
        bottom: '10px',
        left: '10px',
        right: '10px'
    });
    el = $("[rev='reaction'][rel='" + ($(ele).attr('rela')) + "-" + ($(ele).attr('relb')) + "']").clone().appendTo(wrapper);
    el.click(function(event) {
        return $.Event(event).stopPropagation();
    });
    return modal.fadeIn('fast');
};

parseTTT = function(data, holder, results) {
    var detail_holder, food_holder, hc, j, l, len, len1, list, q, reactors, ref1, ref2, sp, special_holder, t, test_holder, ttt, w;
    reactors = {};
    $('.reactor_list').find("[rev='unii'],[rev='hoatchat']").each(function() {
        return reactors[$(this).attr('rel')] = $(this).children('.title').html();
    });
    ttt = data.ttt;
    if (ttt == null) {
        ttt = [];
    }
    food_holder = $('.food-reaction-list');
    test_holder = $('.lab-test-reaction-list');
    special_holder = $('.special-reaction-list');
    detail_holder = $('.ingredient-reaction-list');
    if (data.hoat_chat != null) {
        ref1 = data.hoat_chat;
        for (j = 0, len = ref1.length; j < len; j++) {
            hc = ref1[j];
            if (detail_holder.find("div[rel='" + hc.id + "']").size() < 1) {
                w = $("<div>", {
                    rel: hc.id,
                    "class": 'ingredient-reaction'
                }).appendTo(detail_holder).html("<h4>" + hc.title + "</h4>\n<div>" + hc.tuong_tac_thuoc + "</div>");
                w.css({
                    'padding-top': '20px'
                });
                if ((hc.ttt != null) && hc.ttt.length > 0) {
                    list = $("<div>").appendTo(w);
                    list.css("padding-left", "30px");
                    list.append("<h4 onclick=\"$(this).toggleClass('expanded'); $(this).siblings().slideToggle()\" style=\"cursor:pointer; color: #732;\">Thông tin chi tiết <span style=\"font-size: 0.8em;font-weight: 300; color: #666;\">(" + hc.ttt.length + " tương tác)</span> <span class='icon arrow-expand'></span></h4>");
                    l = $("<div>").appendTo(list);
                    l.css('display', 'none');
                    ref2 = hc.ttt;
                    for (q = 0, len1 = ref2.length; q < len1; q++) {
                        t = ref2[q];
                        l.append(ttt_create_element(t));
                    }
                }
            }
            if (hc.tuong_tac_thuc_pham != null) {
                if (food_holder.find("div[rel='" + hc.id + "']").size() < 1) {
                    $("<div>", {
                        rel: hc.id,
                        "class": 'food-reaction'
                    }).appendTo(food_holder).html("<h4>" + hc.title + "</h4>\n<div>" + hc.tuong_tac_thuc_pham + "</div>");
                }
            }
            if (hc.tuong_tac_xet_nghiem != null) {
                if (test_holder.find("div[rel='" + hc.id + "']").size() < 1) {
                    $("<div>", {
                        rel: hc.id,
                        "class": 'lab-test-reaction'
                    }).appendTo(test_holder).html("<h4>" + hc.title + "</h4>\n<div>" + hc.tuong_tac_xet_nghiem + "</div>");
                }
            }
            if ((hc.co_thai == null) && (hc.tre_em == null) && (hc.suy_gan == null) && !hc.suy_than && !hc.cho_bu) {
                continue;
            }
            if (special_holder.find("[rel='" + hc.id + "']").size() > 0) {
                continue;
            }
            sp = $("<div>", {
                rel: hc.id
            }).appendTo(special_holder);
            sp.css({
                'margin-top': '20px',
                'margin-bottom': '20px'
            });
            sp.append("<h4  style=\"border-bottom: solid 1px #eee;\">" + hc.title + "</h4>");
            ttt_hc_info(hc, 'co_thai', 'Phụ nữ có thai', sp);
            ttt_hc_info(hc, 'cho_bu', 'Phụ nữ cho con bú', sp);
            ttt_hc_info(hc, 'tre_em', 'Trẻ em', sp);
            ttt_hc_info(hc, 'suy_gan', 'Bệnh nhân suy gan', sp);
            ttt_hc_info(hc, 'suy_than', 'Bệnh nhân suy thận', sp);
        }
    }
    $(".full-width-content.statistic span[rel='detail'] .counter").html(detail_holder.children(':not(.no-result)').size());
    $(".full-width-content.statistic span[rel='special'] .counter").html(special_holder.children(':not(.no-result)').size());
    $(".full-width-content.statistic span[rel='xet_nghiem'] .counter").html(test_holder.children(':not(.no-result)').size());
    $(".full-width-content.statistic span[rel='thuc_pham'] .counter").html(food_holder.children(':not(.no-result)').size());
    detail_holder.siblings('.title').find('.counter').html(detail_holder.children(':not(.no-result)').size());
    if (detail_holder.children(':not(.no-result)').size() < 1) {
        $(".full-width-content.statistic span[rel='detail']").addClass('inactive');
        detail_holder.siblings('.title').addClass('inactive');
    } else {
        $(".full-width-content.statistic span[rel='detail']").removeClass('inactive');
        detail_holder.siblings('.title').addClass('inactive');
    }
    special_holder.siblings('.title').find('.counter').html(special_holder.children(':not(.no-result)').size());
    if (special_holder.children(':not(.no-result)').size() < 1) {
        $(".full-width-content.statistic span[rel='special']").addClass('inactive');
        special_holder.siblings('.title').addClass('inactive');
    } else {
        $(".full-width-content.statistic span[rel='special']").removeClass('inactive');
        special_holder.siblings('.title').removeClass('inactive');
    }
    test_holder.siblings('.title').find('.counter').html(test_holder.children(':not(.no-result)').size());
    if (test_holder.children(':not(.no-result)').size() < 1) {
        $(".full-width-content.statistic span[rel='xet_nghiem']").addClass('inactive');
        test_holder.siblings('.title').addClass('inactive');
    } else {
        $(".full-width-content.statistic span[rel='xet_nghiem']").removeClass('inactive');
        test_holder.siblings('.title').removeClass('inactive');
    }
    food_holder.siblings('.title').find('.counter').html(food_holder.children(':not(.no-result)').size());
    if (food_holder.children(':not(.no-result)').size() < 1) {
        $(".full-width-content.statistic span[rel='thuc_pham']").addClass('inactive');
        food_holder.siblings('.title').addClass('inactive');
    } else {
        $(".full-width-content.statistic span[rel='thuc_pham']").removeClass('inactive');
        food_holder.siblings('.title').removeClass('inactive');
    }
    if (detail_holder.children(':not(.no-result)').size() === 1) {
        return detail_holder.children().children(':last').children('h4').trigger('click');
    }
};

ttt_create_element = function(ttt) {
    var wrapper;
    wrapper = $("<div>", {
        "class": "med-interaction"
    });
    wrapper.css({
        'margin-bottom': '10px',
        'border-top': 'dotted 1px #aaa'
    });
    return wrapper.html("<div class=\"summary\" onclick=\"$(this).siblings('.detail').slideToggle()\" style=\"cursor: pointer;padding-top: 10px; \">\n    <div class=\"row\">\n        <div class=\"col-md-4\"><b>" + (ttt.nhom_A + ' - ' + ttt.nhom_B) + "</b></div>\n        <div class=\"col-xs-2 col-sm-3 col-md-2\">\n            <b class=\"hidden-xs\">Nghiêm trọng:</b> " + (ttt_nghiem_trong(ttt.muc_do_nghiem_trong)) + "\n        </div>\n        <div class=\"col-xs-2 col-sm-3 col-md-2\">\n            <b class=\"hidden-xs\">Ý nghĩa:</b> " + (ttt_y_nghia(ttt.muc_do_y_nghia)) + "\n        </div>\n        <div class=\"col-xs-2 col-sm-3 col-md-2\">\n            <b class=\"hidden-xs\">Khởi phát:</b> " + (ttt_khoi_phat(ttt.thoi_gian_khoi_phat)) + "\n        </div>\n        <div class=\"col-xs-4 col-sm-3 col-md-2\">\n            <p><b>Tài liệu:</b> " + ttt.muc_do_chung_cu_lam_sang + "</p>\n        </div>\n    </div>\n</div>\n<div class=\"detail\" style=\"display: none;\">\n    <div>\n    <h4>Cơ chế:</h4>\n    " + ttt.co_che + "\n    </div>\n\n    <h4>Kết quả:</h4>\n    " + ttt.ket_qua + "\n\n    <h4>Xử trí:</h4>\n    " + ttt.xu_ly + "\n\n    <h4>Bàn luận:</h4>\n    " + ttt.ban_luan + "\n\n    <h4>Tài liệu tham khảo:</h4>\n    <div>" + ttt.tai_lieu_tham_khao + "</div>\n</div>");
};

gotoResultSection = function(ele, r) {
    var section;
    if (r == null) {
        r = $(ele).attr('rel');
    }
    section = $(".full-width-content[rel='" + r + "']");
    return $('body,html').animate({
        scrollTop: section.offset().top
    }, 400);
};

ttt_del_hc = function(ele) {
    var error1, etype, hc_ids, hcs, id, j, l, left, len, len1, q, results1;
    id = $(ele).parent().attr('rel');
    etype = $(ele).parent().attr('rev');
    if (etype === 'unii') {
        etype = 'hoatchat';
    }
    try {
        delete ttt_data[etype][id];
    } catch (error1) {

    }
    left = [];
    $('.reactor_list').find("[rev='unii']").each(function() {
        var e;
        e = $(this).attr('rel');
        if (left[e] == null) {
            return left[e] = 1;
        } else {
            return left[e] += 1;
        }
    });
    $('.reactor_list').find("[rev='hoatchat']").each(function() {
        var e;
        e = $(this).attr('rel');
        if (left[e] == null) {
            return left[e] = 1;
        } else {
            return left[e] += 1;
        }
    });
    hcs = [id];
    if ($(ele).parent().attr('rev') === 'bietduoc') {
        hcs = [];
        $(ele).parent().children("[rev='unii']").each(function() {
            return hcs.push($(this).attr('rel'));
        });
        $(".duplication_list .item").filter("[relA='" + id + "'],[relB='" + id + "']").fadeOut('fast', function() {
            $(this).remove();
            return $(".full-width-content.statistic span[rel='duplication'] .counter").html($(".duplication_list").children(':not(.no-result)').size());
        });
    }
    hc_ids = [];
    for (j = 0, len = hcs.length; j < len; j++) {
        l = hcs[j];
        left[l] -= 1;
        if (left[l] === 0) {
            hc_ids.push(l);
        }
    }
    $(ele).parent().fadeOut('fast', function() {
        return $(this).remove();
    });
    results1 = [];
    for (q = 0, len1 = hc_ids.length; q < len1; q++) {
        id = hc_ids[q];
        $(".food-reaction-list > [rel='" + id + "'], .lab-test-reaction-list > [rel='" + id + "'], .ingredient-reaction-list > [rel='" + id + "']").each(function() {
            return $(this).fadeOut('fast', function() {
                $(this).remove();
                $(".full-width-content.statistic span[rel='thuc_pham'] .counter").html($(".food-reaction-list").children(':not(.no-result)').size());
                $(".full-width-content.statistic span[rel='detail'] .counter").html($(".ingredient-reaction-list").children(':not(.no-result)').size());
                $(".full-width-content.statistic span[rel='xet_nghiem'] .counter").html($(".lab-test-reaction-list").children(':not(.no-result)').size());
                return $(".full-width-content.statistic span .counter").each(function() {
                    if (parseInt($(this).html()) === 0) {
                        return $(this).parent().addClass('inactive');
                    }
                });
            });
        });
        $('.reaction_results').children("[rela='" + id + "'],[relb='" + id + "']").each(function() {
            $(".reaction[rel='" + ($(this).attr('rela')) + "-" + ($(this).attr('relb')) + "']").fadeOut('fast', function() {
                $(this).remove();
                if ($('.reaction_list').children('.reaction').size() < 1) {
                    $('.reaction_list').children('.no-result').fadeIn('fast');
                    return $('.reaction_results_header').fadeOut('fast');
                }
            });
            return $(this).fadeOut('fast', function() {
                $(this).remove();
                if ($('.reaction_list').children('.reaction').size() < 1) {
                    $('.reaction_list').children('.no-result').fadeIn('fast');
                    return $('.reaction_results_header').fadeOut('fast');
                }
            });
        });
        results1.push($(".special-reaction-list [rel='" + id + "']").fadeOut('fast', function() {
            $(this).remove();
            $(".full-width-content.statistic span[rel='special'] .counter").html($(".special-reaction-list").children(':not(.no-result)').size());
            return $(".full-width-content.statistic span .counter").each(function() {
                if (parseInt($(this).html()) === 0) {
                    return $(this).parent().addClass('inactive');
                }
            });
        }));
    }
    return results1;
};

ttt_hc_info = function(hc, name, title, holder) {
    var wrapper;
    if (hc[name] == null) {
        return;
    }
    wrapper = $("<div>").html("<h4 style=\"padding-left: 8px; color: #555;\" onclick=\"$(this).siblings('[rel=" + name + "]').slideToggle('fast'); $(this).toggleClass('expanded')\" class=\"clickable\">" + title + " <span class=\"icon arrow-expand\"></span></h4>\n<div rel='" + name + "' style=\"display: none; padding-left: 16px;\">" + hc[name] + "</div>");
    return wrapper.appendTo(holder);
};

parseUniiRelated = function(data) {
    if (data.equivalent_filters != null) {
        equi_load_filters(data.equivalent_filters);
    }
    if (!isNonAuthenticated() && (data.interactions != null)) {
        return parseTopReaction(data);
    }
};

parseTopReaction = function(data) {
    var list_fields;
    list_fields = {
        'tom_tat': 'Tóm tắt',
        'canh_bao': 'Cảnh báo',
        'ban_luan': 'Y văn',
        'xu_ly': 'Quản lý lâm sàng',
        'ket_qua': 'Tác động',
        'co_che': 'Cơ chế',
        'tai_lieu_tham_khao': 'Tài liệu tham khảo'
    };
    $(".compact-reaction-list").each(function() {
        var detail, f, has_info, i, interaction, j, len, link, n, ref1, results1;
        $(this).empty();
        if ((data.interactions == null) || data.interactions.length < 1) {
            $(this).append("Chưa có thông tin về tương tác!");
            return;
        }
        ref1 = data.interactions;
        results1 = [];
        for (i = j = 0, len = ref1.length; j < len; i = ++j) {
            interaction = ref1[i];
            link = $("<a>", {
                href: "#grpttt" + i,
                "class": "related-item popup-with-zoom-anim"
            }).appendTo($(this));
            link.append(ttt_nghiem_trong(interaction.muc_do_nghiem_trong, false));
            link.append("<span class=\"title\">" + interaction.reactor + "</span>");
            detail = $("<div>", {
                id: "grpttt" + i,
                "class": "detail-popup zoom-anim-dialog mfp-hide"
            }).appendTo(this);
            detail.append("<h4>Tương tác với " + interaction.reactor + "</h4>");
            has_info = false;
            for (f in list_fields) {
                n = list_fields[f];
                if (interaction[f] != null) {
                    detail.append("<p><b>" + n + "</b>: " + interaction[f] + "</p>");
                    has_info = true;
                }
            }
            if (!has_info) {
                results1.push(detail.append("<p>Chưa có thông tin</p>"));
            } else {
                results1.push(void 0);
            }
        }
        return results1;
    });
    $(".full-reaction-list").each(function() {
        var detail, f, has_info, i, interaction, j, len, link, n, ref1, w;
        $(this).empty();
        if ((data.interactions == null) || data.interactions.length < 1) {
            $(this).append("Chưa có thông tin về tương tác!");
            return;
        }
        ref1 = data.interactions;
        for (i = j = 0, len = ref1.length; j < len; i = ++j) {
            interaction = ref1[i];
            w = $("<div>", {
                "class": "related-item"
            }).appendTo($(this));
            link = $("<div>", {
                "class": "title clickable"
            }).appendTo(w);
            link.click(function() {
                $(this).siblings('.detail').slideToggle();
                return $(this).toggleClass('expanded');
            });
            link.html("<div class=\"row\">\n    <div class=\"col-xs-8\">\n      " + (ttt_nghiem_trong(interaction.muc_do_nghiem_trong, false)) + "\n      " + interaction.reactor + "\n    </div>\n    <div class=\"col-xs-4\" style=\"text-align: right;\">\n       " + (ttt_khoi_phat(interaction.thoi_gian_khoi_phat)) + "\n       <span class=\"icon arrow-expand\" style=\"float:right;\"></span>\n    </div>\n</div>");
            detail = $("<div>", {
                "class": "detail"
            }).hide().appendTo(w);
            if (interaction.muc_do_chung_cu_lam_sang != null) {
                switch (interaction.muc_do_chung_cu_lam_sang) {
                    case 1:
                        detail.append("<p><b>Mức độ tài liệu:</b> <span class='clickable' style='font-weight: 400; color: #228;' data-toggle='popover' title='Khá' data-content='Tài liệu sẵn có nghèo nàn, nhưng các xem xét, đánh giá dược lý học đã hướng các nhà lâm sàng đến việc nghi ngờ sự tồn tại của các tương tác; hoặc tài liệu tốt cho một thuốc tương tự về dược lý.'>Khá <span style='color: #222;opacity: 0.6; font-size: 0.8em;' class='glyphicon glyphicon-question-sign'></span></span></p>");
                        break;
                    case 2:
                        detail.append("<p><b>Mức độ tài liệu:</b> <span class='clickable' style='font-weight: 400; color: #228;' data-toggle='popover' title='Tốt' data-content='Tài liệu đề nghị chắc chắn có sự tồn tại của tương tác, nhưng còn thiếu, chưa có các nghiên cứu có kiểm chứng tốt.'>Tốt <span style='color: #222;opacity: 0.6; font-size: 0.8em;' class='glyphicon glyphicon-question-sign'></span></span></p>");
                        break;
                    case 3:
                        detail.append("<p><b>Mức độ tài liệu:</b> <span class='clickable' style='font-weight: 400; color: #228;' data-toggle='popover' title='Rất Tốt' data-content='Các nghiên cứu có kiểm chứng đã thiết lập rõ ràng sự tồn tại của tương tác.'>Rất Tốt <span style='color: #222;opacity: 0.6; font-size: 0.8em;' class='glyphicon glyphicon-question-sign'></span></span></p>");
                        break;
                    default:
                        detail.append("<p><b>Mức độ tài liệu:</b> <span class='clickable' style='font-weight: 400; color: #228;' data-toggle='popover' title='Chưa rõ' data-content='Sự tương tác chưa rõ ràng'>Chưa rõ <span style='color: #222;opacity: 0.6; font-size: 0.8em;' class='glyphicon glyphicon-question-sign'></span></span></p>");
                }
            }
            has_info = false;
            for (f in list_fields) {
                n = list_fields[f];
                if (interaction[f] != null) {
                    detail.append("<h4>" + n + "</h4><p>" + interaction[f] + "</p>");
                    has_info = true;
                }
            }
            if (!has_info) {
                detail.append("<p>Chưa có thông tin</p>");
            }
        }
        return $(this).find('[data-toggle="popover"]').popover({
            trigger: 'hover'
        });
    });
    return $('.popup-with-zoom-anim').magnificPopup({
        type: 'inline',
        fixedContentPos: false,
        fixedBgPos: true,
        overflowY: 'auto',
        closeBtnInside: true,
        preloader: false,
        midClick: true,
        removalDelay: 300,
        mainClass: 'my-mfp-zoom-in'
    });
};

files = {};

initAjaxUpload = function() {
    return $('input.async[type=file]').each(function() {
        return $(this).change(function() {
            var name;
            name = $(this).attr("name");
            files[name] = this.files;
            return console.log(this.files[0].name);
        });
    });
};

$(document).ready(function() {
    return initAjaxUpload();
});

uploadFile = function(event, form, callback) {
    var action, data;
    $.Event(event).stopPropagation();
    $.Event(event).preventDefault();
    data = new FormData();
    action = $(form).attr("action");
    $(form).find('input[type=file]').each(function() {
        var file, j, len, name, ref1, results1;
        name = $(this).attr("name");
        if (files[name] != null) {
            ref1 = files[name];
            results1 = [];
            for (j = 0, len = ref1.length; j < len; j++) {
                file = ref1[j];
                results1.push(data.append(name, file));
            }
            return results1;
        }
    });
    $(form).addClass('waiting');
    form.find('.error-message').empty();
    return $.ajax({
        url: action,
        type: 'POST',
        data: data,
        cache: false,
        dataType: 'json',
        context: {
            form: form,
            callback: callback
        },
        processData: false,
        contentType: false,
        complete: function() {
            return $(this.form).removeClass('waiting');
        },
        success: function(data) {
            if (this.callback != null) {
                return this.callback(data, this.form);
            }
        },
        error: function(jqXHR, textStatus, errorThrown) {
            $(this.form).find('.error-message').html("<span class='error'>Error</span>");
            return console.log('ERRORS: (' + textStatus + ') ' + errorThrown);
        }
    });
};

doneBatchBietDuoc = function(data, form) {
    return $(this.form).find('.error-message').html("Hoàn thành xử lý upload Biệt dược. Tổng số dữ liệu xử lý: " + data.total + ". Thêm mới: " + data.added + ". Cập nhật: " + data.updated + ". Lỗi: " + data.failed);
};

uploadEntity = function(form, event) {
    uploadFile(event, form, refreshBenh);
    return $(form).find('.error-message').html("<img src=\"" + root_url + "/static/images/bx_loader.gif\" width=\"32\" height=\"32\" /> Processing ...");
};

refreshBenh = function(data) {
    return location.reload();
};

reprocess = function(form) {
    var entity_type, id, url;
    entity_type = $(form).attr("rev");
    id = $(form).attr("rel");
    url = root_api_url + "reprocess/" + entity_type + "/" + id + "/";
    $(form).find('.error-message').html("<img src=\"" + root_url + "/static/images/bx_loader.gif\" width=\"32\" height=\"32\" /> Processing ...");
    return $.ajax({
        url: url,
        context: {
            form: form
        },
        error: function(jqXHR, textStatus, errorThrown) {
            return $(this.form).find('.error-message').html("<span class='error'>Error  while reprocessing!</span>");
        },
        success: function(data, textStatus, jqXHR) {
            return location.reload();
        }
    });
};

processRelation = function(form) {
    var entity_type, id, url;
    entity_type = $(form).attr("rev");
    id = $(form).attr("rel");
    url = root_api_url + "process/" + entity_type + "/" + id + "/";
    $(form).find('.error-message').html("<img src=\"" + root_url + "/static/images/bx_loader.gif\" width=\"32\" height=\"32\" /> Processing ...");
    return $.ajax({
        url: url,
        context: {
            form: form
        },
        error: function(jqXHR, textStatus, errorThrown) {
            return $(this.form).find('.error-message').html("<span class='error'>Error  while reprocessing!</span>");
        },
        success: function(data, textStatus, jqXHR) {
            return location.reload();
        }
    });
};

validateEmail = function(email) {
    var filter;
    filter = /^([\w-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$/;
    if (filter.test(email)) {
        return true;
    } else {
        return false;
    }
};

unicode2ascii = function(str) {
    var from, i, j, ref1, to;
    from = "àáảạãäâèéëêìíïîòóọỏõöôùúüûñçốồộỗưừứựửữềếệễịĩđấầậẩẫăằắặẵơờớợỡũàảáá";
    to = "aaaaaaaeeeeiiiiooooooouuuuncoooouuuuuueeeeiidaaaaaaaaaaooooouaaaa";
    for (i = j = 0, ref1 = from.length; 0 <= ref1 ? j <= ref1 : j >= ref1; i = 0 <= ref1 ? ++j : --j) {
        str = str.replace(new RegExp(from.charAt(i), 'g'), to.charAt(i));
    }
    return str;
};

normalizeString = function(str) {
    var delim, i, j, ref1;
    delim = ';,!';
    for (i = j = 0, ref1 = delim.length; 0 <= ref1 ? j <= ref1 : j >= ref1; i = 0 <= ref1 ? ++j : --j) {
        str = str.replace(new RegExp(delim.charAt(i), 'g'), ' ');
    }
    return str;
};

currentDate = function(offset) {
    var d;
    if (offset == null) {
        offset = 0;
    }
    d = new Date();
    d = new Date(d.getTime() + offset * 24 * 60 * 60 * 1000);
    return d.getDate() + '/' + (d.getMonth() + 1) + '/' + d.getFullYear();
};

currentTime = function(offset) {
    var d;
    if (offset == null) {
        offset = 0;
    }
    d = new Date();
    d = new Date(d.getTime() + offset * 1000);
    return d.getHours() + ':' + d.getMinutes() + ':' + d.getSeconds();
};

parseRational = function(v) {
    var denom, nom, vv;
    v = v.replace(' ', '');
    if (v.indexOf('/') > 0) {
        vv = v.split('/');
        denom = parseFloat(vv[1]);
        nom = parseFloat(vv[0]);
        if (denom > 0) {
            nom = nom / denom;
        }
        return nom;
    }
    return parseFloat(v);
};

rational2str = function(r) {
    var i, j, max_denom, ref1;
    if (r == null) {
        return '';
    }
    if (r === 0) {
        return '0';
    }
    max_denom = 16;
    for (i = j = 1, ref1 = max_denom; 1 <= ref1 ? j <= ref1 : j >= ref1; i = 1 <= ref1 ? ++j : --j) {
        if (Math.abs(i * r - Math.round(i * r)) < 1e-4 * Math.abs(i * r)) {
            if (i === 1) {
                return r + '';
            }
            return Math.round(i * r) + '/' + i;
        }
    }
    return r + '';
};

htmlToPlaintext = function(text) {
    if (text != null) {
        return String(text).replace(/<[^>]+>/gm, '');
    } else {
        return '';
    }
};

animateScrollTo = function(selector, offset, interval) {
    if (offset == null) {
        offset = 0;
    }
    if (interval == null) {
        interval = 400;
    }
    return $('body,html').animate({
        scrollTop: $(selector).first().offset().top + offset
    }, interval);
};

csrfSafeMethod = function(method) {
    return /^(GET|HEAD|OPTIONS|TRACE)$/.test(method);
};

getCookie = function(cname) {
    var c, ca, j, len, name;
    name = cname + "=";
    ca = document.cookie.split(';');
    for (j = 0, len = ca.length; j < len; j++) {
        c = ca[j];
        while (c.charAt(0) === ' ') {
            c = c.substring(1);
        }
        if (c.indexOf(name) === 0) {
            return c.substring(name.length, c.length);
        }
    }
    return "";
};

$.ajaxSetup({
    beforeSend: function(xhr, settings) {
        var csrftoken;
        xhr.setRequestHeader("_yfp", Cookies.get('_yfp'));
        xhr.setRequestHeader('xtoken', Cookies.get('xtoken'));
        xhr.setRequestHeader("X-API-KEY", ']sFwDb8;$Zp0TpK3:k@JIZe0C=7BO7');
        if (!csrfSafeMethod(settings.type) && !this.crossDomain) {
            csrftoken = getCookie('csrftoken');
            return xhr.setRequestHeader("X-CSRFToken", csrftoken);
        }
    }
});


/*
me = () ->
  if isNonAuthenticated()
    setTimeout () ->
      if isNonAuthenticated()
        onNonAuthenticated()
        return
      me_()
    , 500

    return

  me_()

me_ = () ->
  $.ajax({
    cache: false
    url: root_api_url + 'me'
    error: ()->
      onNonAuthenticated()
    success : (data, textStatus, jqXHR) ->
      parsePersonalData(data)
  })
 */

getParameterByName = function(name) {
    var regex, results;
    name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
    regex = RegExp("[\\?&]" + name + "=([^&#]*)");
    results = regex.exec(location.search);
    if (results != null) {
        return decodeURIComponent(results[1].replace(/\+/g, " "));
    } else {
        return "";
    }
};

check_permission = function() {
    if (window.user_profile == null) {
        return;
    }
    return $('.permission-required').each(function() {
        var e, employer, f, found, j, len, len1, q, ref, ref1, rel;
        switch ($(this).attr('rev')) {
            case 'employer':
                if (window.user_profile.is_superuser) {
                    $(this).fadeIn('fast');
                    return;
                }
                if (!((window.user_profile.employers != null) && window.user_profile.employers.length > 0)) {
                    return;
                }
                rel = $(this).attr('rel');
                ref = $(this).attr('ref').split(',');
                if (!((rel != null) && (ref != null))) {
                    return;
                }
                employer = null;
                ref1 = window.user_profile.employers;
                for (j = 0, len = ref1.length; j < len; j++) {
                    e = ref1[j];
                    if (e.id === rel) {
                        employer = e;
                        break;
                    }
                }
                if (!(employer && (employer.cando != null) && employer.cando.length > 0)) {
                    return;
                }
                found = false;
                for (q = 0, len1 = ref.length; q < len1; q++) {
                    f = ref[q];
                    if (employer.cando.indexOf(f) >= 0) {
                        found = true;
                        break;
                    }
                }
                if (found) {
                    return $(this).fadeIn('fast');
                }
        }
    });
};

cando_permission = function(rev, rel, ref) {
    var e, employer, j, len, ref1;
    if (window.user_profile == null) {
        return false;
    }
    switch (rev) {
        case 'employer':
            if (window.user_profile.is_superuser) {
                return true;
            }
            if (!((window.user_profile.employers != null) && window.user_profile.employers.length > 0)) {
                return false;
            }
            employer = null;
            ref1 = window.user_profile.employers;
            for (j = 0, len = ref1.length; j < len; j++) {
                e = ref1[j];
                if (e.id === rel) {
                    employer = e;
                    break;
                }
            }
            if (!(employer && (employer.cando != null) && employer.cando.length > 0)) {
                return false;
            }
            if (!(employer.cando.indexOf(ref) >= 0)) {
                return false;
            }
            return true;
    }
    return false;
};

parsePersonalData = function(data) {
    var form, name, profile, user_avatar, user_info, user_profile_form;
    user_info = $('.user-info');
    user_avatar = $('.user-avatar');
    form = $('.logout-form-dropdown');
    user_info.attr('rel', data.user_id);
    window.user_profile = data;
    if (!((data != null) && (data.username != null))) {
        onNonAuthenticated();
        return;
    }
    profile = {};
    user_avatar.css("background-color", "#666");
    if (data.avatar) {
        profile.avatar = data.avatar;
        user_avatar.attr('src', data.avatar);
    }
    onAuthenticated();
    if (data.is_superuser || data.is_staff) {
        $('.admin-required').fadeIn();
    }
    check_permission();
    name = data.fname;
    if (name == null) {
        name = data.lname;
    }
    if (name == null) {
        name = data.username;
    }
    profile.name = name;

    /*
    form.append """
      <li><p class="navbar-text">Xin chào #{name}</p></li>
      <li><a href="/profile"><span class="icon card"></span>Thông tin cá nhân</a></li>
    """
  
    if data.patient_id?
      form.append """
      <li><a href="/ho-so/#{data.patient_id}/"><span class="icon health-record"></span>Hồ sơ y tế</a></li>
      """
    else
      form.append """
      <li><a href="/ho-so/"><span class="icon health-record"></span>Hồ sơ y tế</a></li>
      """
  
    if data.is_writer
      form.append "<li><a href='/viet_bai'><div class='item'><span class='icon document med' style='margin-left: 4px;margin-right: 2px;'></span>Viết bài</div></a></li>"
  
    if data.is_editor or data.is_reviewer or data.is_superuser
      form.append """
        <li><a href="/duyet_bai">Duyệt bài</a></li>
      """
  
    form.append """
      <li><a href="#" onclick="logout()"><span class="icon lock"></span>Thoát</a></li>
    """
  
    if data.employers? and data.employers.length > 0
      empheader = $("<li>").appendTo form
      empheader.html "<p class='navbar-text'>Doanh nghiệp</p>"
      for emp in data.employers
        empele = $("<li>").appendTo form
        empele.html """
        <a href="/doanh-nghiep/#{emp.id}">#{emp.name}</a>
        """
     */
    user_profile_form = $('.user-profile-form');
    if (user_profile_form.size() > 0) {
        if (data.fname != null) {
            user_profile_form.find("input[name='fname']").val(data.fname);
        }
        if (data.lname != null) {
            return user_profile_form.find("input[name='lname']").val(data.lname);
        }
    }
};

logout = function() {
    return window.location.href = "/logout?_=" + (new Date().getTime());
};

softlogout = function(force, message) {
    var warning;
    if (force == null) {
        force = false;
    }
    if (message == null) {
        message = "Phiên làm việc đã bị huỷ!";
    }
    $.ajax({
        url: root_api_url + 'logout'
    });
    clearXToken();
    onNonAuthenticated();
    process_cached();
    if (force) {
        warning = $("<div>").appendTo($("body")).hide();
        warning.css({
            "position": "fixed",
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            "text-align": "center"
        });
        warning.html("<div style='position: absolute; top: 0; left:0; bottom: 0; right: 0; background-color: #fff; opacity: 0.95; z-index: -1;'></div>\n<div style='padding-top: 40px; color: #222; padding-bottom: 20px;'>" + message + "</div>\n<div>\n  <a href=\"/login\" class='button black medium'>Đăng nhập lại</a>\n  <a href='/' class='button medium'>Quay về trang chủ</a>\n</div>\n");
        warning.fadeIn();
    }
};

global_tictoc = 0;

global_idle = 0;

global_count = 0;

process_cached = function() {
    var profile, user_profile_form;
    profile = loadProfile();
    if (profile == null) {
        $('.non-authentication-required').fadeIn();
        $('.authentication-required').fadeOut();
        return;
    }
    $('.authentication-required').fadeIn();
    $('.non-authentication-required').fadeOut();
    user_profile_form = $('.user-profile-form');
    if (profile.avatar != null) {
        return user_profile_form.find('.user-avatar .avatar').attr('src', profile.avatar);
    }
};

$(document).ready(function() {
    process_cached();
    $('body').on('contextmenu', function() {
        return false;
    });
    $(".tab-headers").children("span.tab").click(function() {
        var contents;
        $(this).siblings(".tab").removeClass("active");
        $(this).addClass("active");
        contents = $(this).closest(".tab-headers").siblings(".tab-contents");
        contents.children(".tab[role!='" + ($(this).attr('role')) + "']").removeClass('active');
        return contents.children(".tab[role='" + ($(this).attr('role')) + "']").addClass('active');
    });
    $(".button.confirmation").click(function(event) {
        if ($(this).hasClass('inactive')) {
            return;
        }
        $.Event(event).stopPropagation();
        return $(this).children('.popup-form').fadeToggle('fast');
    });
    $(".button.confirmation").find(".popup-form").click(function(event) {
        return $.Event(event).stopPropagation();
    });
    $(".button.confirmation").find(".button[rel='cancel']").click(function(event) {
        $(this).closest('.popup-form').fadeOut('fast');
        return $.Event(event).stopPropagation();
    });
    $('.search-wrapper').click(function(event) {
        return $.Event(event).stopPropagation();
    });
    $('.search-wrapper .search input').focus(function(event) {
        $('.search-wrapper').parent().removeClass('searching').closest('.page-header').removeClass('searching');
        return openTopSearch(event);
    });
    $('.search-wrapper').closest('.dropdown-menu').parent().on('shown.bs.dropdown', function() {
        return $(this).find('input').focus();
    });

    /*
    setInterval () ->
      global_count++
      if global_count > 60
        ping() if global_idle < 50
        global_count = 0
  
      profile = loadProfile()
      if not profile?
        global_idle = 0
        global_count = 0
        global_tictoc = 0
        return
  
      if global_tictoc is 0
        global_idle++
      else
        global_idle = 0
  
      global_tictoc = 0
  
      if global_idle > 1800
        softlogout(true)
        return
  
    , 1000
  
    $('body').mousedown ()->
      #console.log 'down'
      global_tictoc++
  
    $('body').on 'tap', ()->
      global_tictoc++
  
    $('body').keypress ()->
      #console.log 'press'
      global_tictoc++
     */
    return $('.bxslider').each(function() {
        var auto, config;
        auto = $(this).attr('auto') === 'yes';
        config = {
            auto: auto,
            useCSS: false,
            minSlides: 1
        };
        if ($(this).attr('maxSlides') != null) {
            config['maxSlides'] = $(this).attr('slideWidth');
        }
        if ($(this).attr('slideWidth') != null) {
            config['slideWidth'] = $(this).attr('slideWidth');
        }
        if ($(this).attr('mode') != null) {
            config['mode'] = $(this).attr('mode');
        }
        if ($(this).attr('adaptiveHeight') != null) {
            config['adaptiveHeight'] = true;
        }
        if ($(this).attr('finiteLoop') != null) {
            config['infiniteLoop'] = false;
        }
        if ($(this).children('li').size() > 1) {
            return $(this).bxSlider(config);
        }
    });
});

$(document).click(function(event) {
    $(".popup-form").fadeOut('fast');
    if ($(event.target).closest('.search-wrapper').size() < 1) {
        return closeTopSearch();
    }

    /*
    try
      $('.search-wrapper').each ->
        scope = angular.element(this.get(0)).scope()
        scope.searching = false
    catch
       * do nothing
     */
});

closeEditor = function(element) {
    $(element).children('textarea').remove();
    $(element).children('div:not(.editable)').remove();
    return $(element).removeClass('editing');
};

saveEditor = function(element) {
    var content, editable, field, rel, ss, uri;
    if (!$(element).hasClass('editing')) {
        return;
    }
    $(element).addClass('editing');
    editable = $(element).find('.editable');
    rel = editable.attr('rel');
    content = tinymce.get("editor-" + rel).getContent();
    field = editable.attr("rel");
    uri = editable.attr("rev");
    ss = uri.split("::");
    updateEntity(ss[0], ss[1], field, content);
    editable.html(content);
    return closeEditor(element);
};

openEditor = function(element) {
    var editable, editor, h, rel;
    if ($(element).hasClass('editing')) {
        return;
    }
    $(element).addClass('editing');
    editable = $(element).find('.editable');
    rel = editable.attr('rel');
    editor = $("<textarea>", {
        rel: rel,
        id: 'editor-' + rel
    }).appendTo($(element));
    editor.val(editable.html());
    h = editable.height();
    if (h < 200) {
        h = 200;
    }
    return tinyMCE.init({
        selector: "#editor-" + rel,
        theme: 'modern',
        skin_url: root_url + '/static/css/light',
        plugins: ["advlist autolink link image lists charmap print preview hr anchor pagebreak spellchecker", "searchreplace wordcount visualblocks visualchars code fullscreen insertdatetime media nonbreaking", "save table contextmenu directionality emoticons template paste textcolor ylink"],
        toolbar: 'undo redo | styleselect | bold italic underline | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image | preview | forecolor backcolor emoticons | code | ylink',
        height: h,
        skin_url: root_url + '/static/css/light'
    });
};

relateEntity = function(ele, to_entity) {
    var entity_field, entity_type, form, id, url;
    if ($(ele).hasClass("processing")) {
        return;
    }
    form = $(ele).closest('.control-section');
    entity_type = form.attr("rev");
    entity_field = form.attr("name");
    id = form.attr("rel");
    url = root_api_url + "process/" + entity_type + "/" + id + "/?field=" + entity_field + "&with=" + to_entity;
    $(ele).addClass("processing");
    return $.ajax({
        url: url,
        context: {
            button: ele
        },
        error: function(jqXHR, textStatus, errorThrown) {
            return $(this.button).removeClass('processing').parent().append("<span class='error'>Error  while reprocessing!</span>");
        },
        success: function(data, textStatus, jqXHR) {
            return location.reload();
        }
    });
};

$(document).ready(function() {
    return $('.control-section').each(function() {
        var btn, h, rel;
        h = $(this).children('h4, h3, h2, h1');
        rel = h.attr("rel");
        btn = "";
        if ((rel != null) && rel.length > 0) {
            btn = "<img src=\"" + root_url + "/static/images/icons/connect_48.png\" height=\"24px\" class=\"process-button\" title=\"Xử lý liên kết\" onclick=\"relateEntity(this, '" + rel + "')\" />";
        }
        return h.append("<span>&nbsp;&nbsp;\n  <img src=\"" + root_url + "/static/images/icons/edit.png\" height=\"24px\" class=\"edit-button\" title=\"Cập nhật nội dung\" onclick=\"openEditor($(this).closest('.control-section'))\" />\n  " + btn + "\n  <img src=\"" + root_url + "/static/images/icons/cancel.png\" height=\"24px\" class=\"cancel-button\" onclick=\"closeEditor($(this).closest('.control-section'))\" />\n  <img src=\"" + root_url + "/static/images/icons/check_blue.png\" height=\"24px\" class=\"save-button\" onclick=\"saveEditor($(this).closest('.control-section'))\" />\n</span>");
    });
});

toggleHoverDock = function(btn) {
    var dock, menu;
    dock = $(btn).parent();
    menu = dock.children('.menu');
    dock.toggleClass('active');
    return menu.slideToggle(100);
};

dock = $('.hover-dock');

dock.addClass('active');

menu = dock.children('.menu');

menu.show();

$(document).ready(function() {
    return $('[data-toggle="popover"]').popover({
        trigger: 'hover'
    });
});

cacheClient = function(key, val) {
    if (window.localStorage != null) {
        return window.localStorage.setItem(key, val);
    } else {
        return Cookies.set(key, val, {
            path: '/'
        });
    }
};

getCache = function(key) {
    var v;
    v = Cookies.get(key);
    if (v != null) {
        if (window.localStorage != null) {
            Cookies.remove(key);
            window.localStorage.setItem(key, v);
        }
        return v;
    }
    if (window.localStorage != null) {
        return window.localStorage.getItem(key);
    }
    return null;
};

removeCache = function(key) {
    Cookies.remove(key);
    if (window.localStorage != null) {
        return window.localStorage.removeItem(key);
    }
};